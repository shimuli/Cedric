using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace Cedric.Model.Phamacore
{
    public partial class PhamaDBVICDataContext : DbContext
    {
        public PhamaDBVICDataContext()
        {
        }

        public PhamaDBVICDataContext(DbContextOptions<PhamaDBVICDataContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Acc0063> Acc0063s { get; set; }
        public virtual DbSet<Acc0064> Acc0064s { get; set; }
        public virtual DbSet<Acct> Accts { get; set; }
        public virtual DbSet<Acct2010> Acct2010s { get; set; }
        public virtual DbSet<AcctCategory> AcctCategories { get; set; }
        public virtual DbSet<Acctbcode> Acctbcodes { get; set; }
        public virtual DbSet<Acctcategory1> Acctcategories1 { get; set; }
        public virtual DbSet<Acctclass> Acctclasses { get; set; }
        public virtual DbSet<Acctlist> Acctlists { get; set; }
        public virtual DbSet<Acctopen> Acctopens { get; set; }
        public virtual DbSet<Acctttl> Acctttls { get; set; }
        public virtual DbSet<Ad1973> Ad1973s { get; set; }
        public virtual DbSet<Af1973> Af1973s { get; set; }
        public virtual DbSet<Agc1973> Agc1973s { get; set; }
        public virtual DbSet<Age1973> Age1973s { get; set; }
        public virtual DbSet<Ageingcalc> Ageingcalcs { get; set; }
        public virtual DbSet<Ageingcredit> Ageingcredits { get; set; }
        public virtual DbSet<Ageingdebit> Ageingdebits { get; set; }
        public virtual DbSet<Ageingdetail> Ageingdetails { get; set; }
        public virtual DbSet<AgeingdetailsSupp> AgeingdetailsSupps { get; set; }
        public virtual DbSet<Ageingmissing> Ageingmissings { get; set; }
        public virtual DbSet<Ageingsummary> Ageingsummaries { get; set; }
        public virtual DbSet<AgeingsummarySupp> AgeingsummarySupps { get; set; }
        public virtual DbSet<Ageingsummarycredit> Ageingsummarycredits { get; set; }
        public virtual DbSet<Ageingsummarycredits001> Ageingsummarycredits001s { get; set; }
        public virtual DbSet<AgeingsummarycreditsSupp> AgeingsummarycreditsSupps { get; set; }
        public virtual DbSet<Ageingsummaryfinal> Ageingsummaryfinals { get; set; }
        public virtual DbSet<AgeingsummaryfinalSupp> AgeingsummaryfinalSupps { get; set; }
        public virtual DbSet<Ageingsummarykeeper> Ageingsummarykeepers { get; set; }
        public virtual DbSet<Agestamp1973> Agestamp1973s { get; set; }
        public virtual DbSet<AltInventory> AltInventories { get; set; }
        public virtual DbSet<As1973> As1973s { get; set; }
        public virtual DbSet<Asc1973> Asc1973s { get; set; }
        public virtual DbSet<Ax080818> Ax080818s { get; set; }
        public virtual DbSet<Ax080818list> Ax080818lists { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<BankReconciliation> BankReconciliations { get; set; }
        public virtual DbSet<BankingHd> BankingHds { get; set; }
        public virtual DbSet<Banktran> Banktrans { get; set; }
        public virtual DbSet<Barcode> Barcodes { get; set; }
        public virtual DbSet<Batchdet> Batchdets { get; set; }
        public virtual DbSet<BatchedBankRecon> BatchedBankRecons { get; set; }
        public virtual DbSet<Batchttl> Batchttls { get; set; }
        public virtual DbSet<Bdgtcat> Bdgtcats { get; set; }
        public virtual DbSet<Bill> Bills { get; set; }
        public virtual DbSet<Billcalendar> Billcalendars { get; set; }
        public virtual DbSet<Billcontact> Billcontacts { get; set; }
        public virtual DbSet<Billreminder> Billreminders { get; set; }
        public virtual DbSet<BmtC> BmtCs { get; set; }
        public virtual DbSet<BmtDt> BmtDts { get; set; }
        public virtual DbSet<BmtHd> BmtHds { get; set; }
        public virtual DbSet<Bmtbom> Bmtboms { get; set; }
        public virtual DbSet<Borderlog> Borderlogs { get; set; }
        public virtual DbSet<Bordersetup> Bordersetups { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<BranchItem> BranchItems { get; set; }
        public virtual DbSet<BranchinDt> BranchinDts { get; set; }
        public virtual DbSet<BranchinHd> BranchinHds { get; set; }
        public virtual DbSet<Branchinbtran> Branchinbtrans { get; set; }
        public virtual DbSet<Branchinjoin> Branchinjoins { get; set; }
        public virtual DbSet<Branchinlpodt> Branchinlpodts { get; set; }
        public virtual DbSet<Branchinlpohd> Branchinlpohds { get; set; }
        public virtual DbSet<Branchinprelpo> Branchinprelpos { get; set; }
        public virtual DbSet<BranchorderC> BranchorderCs { get; set; }
        public virtual DbSet<BranchorderDt> BranchorderDts { get; set; }
        public virtual DbSet<BranchorderHd> BranchorderHds { get; set; }
        public virtual DbSet<BranchtransDt> BranchtransDts { get; set; }
        public virtual DbSet<BranchtransHd> BranchtransHds { get; set; }
        public virtual DbSet<Brasscheck> Brasschecks { get; set; }
        public virtual DbSet<BrnC> BrnCs { get; set; }
        public virtual DbSet<BrnDt> BrnDts { get; set; }
        public virtual DbSet<BrnHd> BrnHds { get; set; }
        public virtual DbSet<BtransC> BtransCs { get; set; }
        public virtual DbSet<BtransferC> BtransferCs { get; set; }
        public virtual DbSet<BtrinDt> BtrinDts { get; set; }
        public virtual DbSet<BtrinHd> BtrinHds { get; set; }
        public virtual DbSet<Budget> Budgets { get; set; }
        public virtual DbSet<BudgetedSale> BudgetedSales { get; set; }
        public virtual DbSet<CaseSpecification> CaseSpecifications { get; set; }
        public virtual DbSet<CashinvoiceC> CashinvoiceCs { get; set; }
        public virtual DbSet<Cashprice> Cashprices { get; set; }
        public virtual DbSet<Cashpricepromo> Cashpricepromos { get; set; }
        public virtual DbSet<CashsaleC> CashsaleCs { get; set; }
        public virtual DbSet<CategoryPrice> CategoryPrices { get; set; }
        public virtual DbSet<Cbookpaymode> Cbookpaymodes { get; set; }
        public virtual DbSet<Centraldoc> Centraldocs { get; set; }
        public virtual DbSet<Chequebook> Chequebooks { get; set; }
        public virtual DbSet<Closeddipen2020> Closeddipen2020s { get; set; }
        public virtual DbSet<Closedstock> Closedstocks { get; set; }
        public virtual DbSet<Closedstockperiod> Closedstockperiods { get; set; }
        public virtual DbSet<Closedstockperioddate> Closedstockperioddates { get; set; }
        public virtual DbSet<Closedtran> Closedtrans { get; set; }
        public virtual DbSet<Closingcost> Closingcosts { get; set; }
        public virtual DbSet<CnoteDt> CnoteDts { get; set; }
        public virtual DbSet<CnoteDtrep> CnoteDtreps { get; set; }
        public virtual DbSet<CnoteHd> CnoteHds { get; set; }
        public virtual DbSet<CnoteHdrep> CnoteHdreps { get; set; }
        public virtual DbSet<CnoteprevDt> CnoteprevDts { get; set; }
        public virtual DbSet<CnoteprevHd> CnoteprevHds { get; set; }
        public virtual DbSet<Collectmode> Collectmodes { get; set; }
        public virtual DbSet<Collecttype> Collecttypes { get; set; }
        public virtual DbSet<Contactbest> Contactbests { get; set; }
        public virtual DbSet<Contactcustomer> Contactcustomers { get; set; }
        public virtual DbSet<Contactextra> Contactextras { get; set; }
        public virtual DbSet<Contactrating> Contactratings { get; set; }
        public virtual DbSet<Contactsalute> Contactsalutes { get; set; }
        public virtual DbSet<Corelastpricesw> Corelastpricesws { get; set; }
        public virtual DbSet<Corelastsuppitem> Corelastsuppitems { get; set; }
        public virtual DbSet<Coremaster> Coremasters { get; set; }
        public virtual DbSet<Coretransact> Coretransacts { get; set; }
        public virtual DbSet<Coretransactstock> Coretransactstocks { get; set; }
        public virtual DbSet<Credcont> Credconts { get; set; }
        public virtual DbSet<CreditCategory> CreditCategories { get; set; }
        public virtual DbSet<Creditcode> Creditcodes { get; set; }
        public virtual DbSet<CreditnoteC> CreditnoteCs { get; set; }
        public virtual DbSet<Credittrack> Credittracks { get; set; }
        public virtual DbSet<Credreference> Credreferences { get; set; }
        public virtual DbSet<CsCategory> CsCategories { get; set; }
        public virtual DbSet<CsaleDt> CsaleDts { get; set; }
        public virtual DbSet<CsaleDtrep> CsaleDtreps { get; set; }
        public virtual DbSet<CsaleHd> CsaleHds { get; set; }
        public virtual DbSet<CsaleHdrep> CsaleHdreps { get; set; }
        public virtual DbSet<Cstctr> Cstctrs { get; set; }
        public virtual DbSet<Ct001> Ct001s { get; set; }
        public virtual DbSet<Ctcustom> Ctcustoms { get; set; }
        public virtual DbSet<Ctexstk> Ctexstks { get; set; }
        public virtual DbSet<Ctidentity> Ctidentities { get; set; }
        public virtual DbSet<Ctlogz> Ctlogzs { get; set; }
        public virtual DbSet<Ctmaster> Ctmasters { get; set; }
        public virtual DbSet<Ctstkdead> Ctstkdeads { get; set; }
        public virtual DbSet<Ctstkdeadmake> Ctstkdeadmakes { get; set; }
        public virtual DbSet<Ctstkexpired> Ctstkexpireds { get; set; }
        public virtual DbSet<Cttransact> Cttransacts { get; set; }
        public virtual DbSet<Cttransact20210211> Cttransact20210211s { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Currencyrate> Currencyrates { get; set; }
        public virtual DbSet<CusContact> CusContacts { get; set; }
        public virtual DbSet<CusInterest> CusInterests { get; set; }
        public virtual DbSet<CusRuntotal> CusRuntotals { get; set; }
        public virtual DbSet<CusStatement> CusStatements { get; set; }
        public virtual DbSet<Cusbranch> Cusbranches { get; set; }
        public virtual DbSet<Cuscheck2008> Cuscheck2008s { get; set; }
        public virtual DbSet<Cusstockprice> Cusstockprices { get; set; }
        public virtual DbSet<CustCategory> CustCategories { get; set; }
        public virtual DbSet<CustDiscount> CustDiscounts { get; set; }
        public virtual DbSet<CustItemdiscount> CustItemdiscounts { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerMember> CustomerMembers { get; set; }
        public virtual DbSet<CustomerStatement> CustomerStatements { get; set; }
        public virtual DbSet<Customeraged> Customerageds { get; set; }
        public virtual DbSet<Customerledger> Customerledgers { get; set; }
        public virtual DbSet<Customerroute> Customerroutes { get; set; }
        public virtual DbSet<DatesTable> DatesTables { get; set; }
        public virtual DbSet<Deletelog> Deletelogs { get; set; }
        public virtual DbSet<Deliverymode> Deliverymodes { get; set; }
        public virtual DbSet<Deliverystatus> Deliverystatuses { get; set; }
        public virtual DbSet<Denomination> Denominations { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Dependant> Dependants { get; set; }
        public virtual DbSet<Diagnosis> Diagnoses { get; set; }
        public virtual DbSet<Dip2020A> Dip2020As { get; set; }
        public virtual DbSet<Dip2020B> Dip2020Bs { get; set; }
        public virtual DbSet<Dip2020FixA> Dip2020FixAs { get; set; }
        public virtual DbSet<Discounttype> Discounttypes { get; set; }
        public virtual DbSet<DispenseDt> DispenseDts { get; set; }
        public virtual DbSet<DispenseHd> DispenseHds { get; set; }
        public virtual DbSet<DnoteDt> DnoteDts { get; set; }
        public virtual DbSet<DnoteHd> DnoteHds { get; set; }
        public virtual DbSet<Docpriority> Docpriorities { get; set; }
        public virtual DbSet<Docselector> Docselectors { get; set; }
        public virtual DbSet<Dosage> Dosages { get; set; }
        public virtual DbSet<DrugCategory> DrugCategories { get; set; }
        public virtual DbSet<Drugentry> Drugentries { get; set; }
        public virtual DbSet<Educoredb> Educoredbs { get; set; }
        public virtual DbSet<Empbank> Empbanks { get; set; }
        public virtual DbSet<Empbankbranch> Empbankbranches { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Employer> Employers { get; set; }
        public virtual DbSet<Emptype> Emptypes { get; set; }
        public virtual DbSet<Entity> Entities { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<Eventcalendar> Eventcalendars { get; set; }
        public virtual DbSet<Eventcontact> Eventcontacts { get; set; }
        public virtual DbSet<Eventreminder> Eventreminders { get; set; }
        public virtual DbSet<ExemptTable> ExemptTables { get; set; }
        public virtual DbSet<ExpBranch> ExpBranches { get; set; }
        public virtual DbSet<ExpBranchAuto> ExpBranchAutos { get; set; }
        public virtual DbSet<ExpCustDiscount> ExpCustDiscounts { get; set; }
        public virtual DbSet<ExpCustomer> ExpCustomers { get; set; }
        public virtual DbSet<Expacct> Expaccts { get; set; }
        public virtual DbSet<Expacctauto> Expacctautos { get; set; }
        public virtual DbSet<Expcashprice> Expcashprices { get; set; }
        public virtual DbSet<Expcashpriceauto> Expcashpriceautos { get; set; }
        public virtual DbSet<Expcashpricepromo> Expcashpricepromos { get; set; }
        public virtual DbSet<Expcashpricepromoauto> Expcashpricepromoautos { get; set; }
        public virtual DbSet<Expcustomer1> Expcustomers1 { get; set; }
        public virtual DbSet<ExpcustomerMember> ExpcustomerMembers { get; set; }
        public virtual DbSet<ExpcustomerMembersauto> ExpcustomerMembersautos { get; set; }
        public virtual DbSet<Expcustomerauto> Expcustomerautos { get; set; }
        public virtual DbSet<Expinvdesc> Expinvdescs { get; set; }
        public virtual DbSet<Expinventory> Expinventories { get; set; }
        public virtual DbSet<Expinventoryauto> Expinventoryautos { get; set; }
        public virtual DbSet<Expinvprice> Expinvprices { get; set; }
        public virtual DbSet<Expspprice> Expspprices { get; set; }
        public virtual DbSet<Expsppriceauto> Expsppriceautos { get; set; }
        public virtual DbSet<Expsupplier> Expsuppliers { get; set; }
        public virtual DbSet<Expsupplierauto> Expsupplierautos { get; set; }
        public virtual DbSet<Expsupplierkah> Expsupplierkahs { get; set; }
        public virtual DbSet<Fa> Fas { get; set; }
        public virtual DbSet<Facat> Facats { get; set; }
        public virtual DbSet<Fatable> Fatables { get; set; }
        public virtual DbSet<Finalmovement> Finalmovements { get; set; }
        public virtual DbSet<Fyeka> Fyekas { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<Gl> Gls { get; set; }
        public virtual DbSet<Gl2010> Gl2010s { get; set; }
        public virtual DbSet<GlTran> GlTrans { get; set; }
        public virtual DbSet<Glacct> Glaccts { get; set; }
        public virtual DbSet<Glbatch> Glbatches { get; set; }
        public virtual DbSet<Glbook> Glbooks { get; set; }
        public virtual DbSet<Glbudget> Glbudgets { get; set; }
        public virtual DbSet<Glcore> Glcores { get; set; }
        public virtual DbSet<Glhist> Glhists { get; set; }
        public virtual DbSet<Gljrnbatch> Gljrnbatches { get; set; }
        public virtual DbSet<Glopen> Glopens { get; set; }
        public virtual DbSet<Glref> Glrefs { get; set; }
        public virtual DbSet<Glrep> Glreps { get; set; }
        public virtual DbSet<Glstock> Glstocks { get; set; }
        public virtual DbSet<Glsystem> Glsystems { get; set; }
        public virtual DbSet<Goldfinger> Goldfingers { get; set; }
        public virtual DbSet<Goldgl> Goldgls { get; set; }
        public virtual DbSet<Gp1> Gp1s { get; set; }
        public virtual DbSet<Gp2> Gp2s { get; set; }
        public virtual DbSet<Gp3> Gp3s { get; set; }
        public virtual DbSet<Gp4> Gp4s { get; set; }
        public virtual DbSet<GretC> GretCs { get; set; }
        public virtual DbSet<GretDt> GretDts { get; set; }
        public virtual DbSet<GretDtrep> GretDtreps { get; set; }
        public virtual DbSet<GretHd> GretHds { get; set; }
        public virtual DbSet<GretHdrep> GretHdreps { get; set; }
        public virtual DbSet<Grettrack> Grettracks { get; set; }
        public virtual DbSet<Grn001> Grn001s { get; set; }
        public virtual DbSet<Grn002> Grn002s { get; set; }
        public virtual DbSet<GrnC> GrnCs { get; set; }
        public virtual DbSet<GrnDt> GrnDts { get; set; }
        public virtual DbSet<GrnHd> GrnHds { get; set; }
        public virtual DbSet<Hrsource> Hrsources { get; set; }
        public virtual DbSet<IbiC> IbiCs { get; set; }
        public virtual DbSet<IbiDt> IbiDts { get; set; }
        public virtual DbSet<IbiHd> IbiHds { get; set; }
        public virtual DbSet<Ibireference> Ibireferences { get; set; }
        public virtual DbSet<Ijrncode> Ijrncodes { get; set; }
        public virtual DbSet<ImpBranch> ImpBranches { get; set; }
        public virtual DbSet<ImpBranchauto> ImpBranchautos { get; set; }
        public virtual DbSet<ImpBranchkah> ImpBranchkahs { get; set; }
        public virtual DbSet<ImpCustDiscount> ImpCustDiscounts { get; set; }
        public virtual DbSet<ImpCustomer> ImpCustomers { get; set; }
        public virtual DbSet<ImpCustomerMember> ImpCustomerMembers { get; set; }
        public virtual DbSet<ImpCustomerMembersauto> ImpCustomerMembersautos { get; set; }
        public virtual DbSet<ImpCustomerMemberskah> ImpCustomerMemberskahs { get; set; }
        public virtual DbSet<Impacct> Impaccts { get; set; }
        public virtual DbSet<Impacctauto> Impacctautos { get; set; }
        public virtual DbSet<Impacctkah> Impacctkahs { get; set; }
        public virtual DbSet<Impcashprice> Impcashprices { get; set; }
        public virtual DbSet<Impcashpriceauto> Impcashpriceautos { get; set; }
        public virtual DbSet<Impcashpricepromo> Impcashpricepromos { get; set; }
        public virtual DbSet<Impcashpricepromoauto> Impcashpricepromoautos { get; set; }
        public virtual DbSet<Impcustomer1> Impcustomers1 { get; set; }
        public virtual DbSet<ImpcustomerKah> ImpcustomerKahs { get; set; }
        public virtual DbSet<Impcustomerauto> Impcustomerautos { get; set; }
        public virtual DbSet<Impinv2020> Impinv2020s { get; set; }
        public virtual DbSet<Impinvdesc> Impinvdescs { get; set; }
        public virtual DbSet<Impinvdesckah> Impinvdesckahs { get; set; }
        public virtual DbSet<Impinventory> Impinventories { get; set; }
        public virtual DbSet<Impinventoryauto> Impinventoryautos { get; set; }
        public virtual DbSet<Impinvprice> Impinvprices { get; set; }
        public virtual DbSet<Impinvpricekah> Impinvpricekahs { get; set; }
        public virtual DbSet<Import> Imports { get; set; }
        public virtual DbSet<Impspprice> Impspprices { get; set; }
        public virtual DbSet<Impsppriceauto> Impsppriceautos { get; set; }
        public virtual DbSet<Impsupplier> Impsuppliers { get; set; }
        public virtual DbSet<Impsupplierauto> Impsupplierautos { get; set; }
        public virtual DbSet<Impsupplierkah> Impsupplierkahs { get; set; }
        public virtual DbSet<InvDiscount> InvDiscounts { get; set; }
        public virtual DbSet<InvGroup> InvGroups { get; set; }
        public virtual DbSet<InvHistory> InvHistories { get; set; }
        public virtual DbSet<InvJournalz> InvJournalzs { get; set; }
        public virtual DbSet<InvLocation> InvLocations { get; set; }
        public virtual DbSet<InvPackage> InvPackages { get; set; }
        public virtual DbSet<InvPrice> InvPrices { get; set; }
        public virtual DbSet<InvStock> InvStocks { get; set; }
        public virtual DbSet<InvStockSummary> InvStockSummaries { get; set; }
        public virtual DbSet<InvStockSummaryadj> InvStockSummaryadjs { get; set; }
        public virtual DbSet<InvStockSummaryclose> InvStockSummarycloses { get; set; }
        public virtual DbSet<InvStockTemp> InvStockTemps { get; set; }
        public virtual DbSet<InvStockTempadj> InvStockTempadjs { get; set; }
        public virtual DbSet<InvStockTempclose> InvStockTempcloses { get; set; }
        public virtual DbSet<InvStockadj> InvStockadjs { get; set; }
        public virtual DbSet<InvStockclose> InvStockcloses { get; set; }
        public virtual DbSet<InvStockimpfinal> InvStockimpfinals { get; set; }
        public virtual DbSet<InvStockoctober> InvStockoctobers { get; set; }
        public virtual DbSet<InvSubgroup> InvSubgroups { get; set; }
        public virtual DbSet<InvSupplier> InvSuppliers { get; set; }
        public virtual DbSet<InvTran> InvTrans { get; set; }
        public virtual DbSet<InvTransTemp> InvTransTemps { get; set; }
        public virtual DbSet<Invbcode> Invbcodes { get; set; }
        public virtual DbSet<Invbcodedate> Invbcodedates { get; set; }
        public virtual DbSet<Invcentral> Invcentrals { get; set; }
        public virtual DbSet<Invclass> Invclasses { get; set; }
        public virtual DbSet<Inventactive> Inventactives { get; set; }
        public virtual DbSet<Invento> Inventos { get; set; }
        public virtual DbSet<Inventory> Inventories { get; set; }
        public virtual DbSet<Inventorybranch> Inventorybranches { get; set; }
        public virtual DbSet<Invform> Invforms { get; set; }
        public virtual DbSet<InvoiceMatching> InvoiceMatchings { get; set; }
        public virtual DbSet<InvoiceMatchingCore> InvoiceMatchingCores { get; set; }
        public virtual DbSet<InvoiceMatchingNeo> InvoiceMatchingNeos { get; set; }
        public virtual DbSet<InvoiceMatchingRep> InvoiceMatchingReps { get; set; }
        public virtual DbSet<InvoiceMatchingTemp> InvoiceMatchingTemps { get; set; }
        public virtual DbSet<Invold> Involds { get; set; }
        public virtual DbSet<Invpreview> Invpreviews { get; set; }
        public virtual DbSet<Invto> Invtos { get; set; }
        public virtual DbSet<Invxxxx> Invxxxxes { get; set; }
        public virtual DbSet<IssuesQtyHistory> IssuesQtyHistories { get; set; }
        public virtual DbSet<ItemCosting> ItemCostings { get; set; }
        public virtual DbSet<ItemMake> ItemMakes { get; set; }
        public virtual DbSet<Itembonu> Itembonus { get; set; }
        public virtual DbSet<Itembonusmulti> Itembonusmultis { get; set; }
        public virtual DbSet<Itemdet> Itemdets { get; set; }
        public virtual DbSet<Jobgroup> Jobgroups { get; set; }
        public virtual DbSet<Jobtitle> Jobtitles { get; set; }
        public virtual DbSet<Journalimport> Journalimports { get; set; }
        public virtual DbSet<Kahbcode> Kahbcodes { get; set; }
        public virtual DbSet<Kahdefault> Kahdefaults { get; set; }
        public virtual DbSet<Kprdate> Kprdates { get; set; }
        public virtual DbSet<Kprdatestatus> Kprdatestatuses { get; set; }
        public virtual DbSet<Krainvoice> Krainvoices { get; set; }
        public virtual DbSet<Lcp> Lcps { get; set; }
        public virtual DbSet<Ldisc> Ldiscs { get; set; }
        public virtual DbSet<Ldisc1> Ldiscs1 { get; set; }
        public virtual DbSet<Loanshd> Loanshds { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Location1> Locations1 { get; set; }
        public virtual DbSet<Locationbin> Locationbins { get; set; }
        public virtual DbSet<Loydt> Loydts { get; set; }
        public virtual DbSet<Loyhd> Loyhds { get; set; }
        public virtual DbSet<Mailcc> Mailccs { get; set; }
        public virtual DbSet<Mailmessage> Mailmessages { get; set; }
        public virtual DbSet<ManSupplier> ManSuppliers { get; set; }
        public virtual DbSet<Manufacturer> Manufacturers { get; set; }
        public virtual DbSet<Membersextra> Membersextras { get; set; }
        public virtual DbSet<MnfC> MnfCs { get; set; }
        public virtual DbSet<MnfDt> MnfDts { get; set; }
        public virtual DbSet<MnfHd> MnfHds { get; set; }
        public virtual DbSet<Mnfbmr> Mnfbmrs { get; set; }
        public virtual DbSet<Modifydesc> Modifydescs { get; set; }
        public virtual DbSet<Modulesuse> Modulesuses { get; set; }
        public virtual DbSet<Mpesa> Mpesas { get; set; }
        public virtual DbSet<Mpesahd> Mpesahds { get; set; }
        public virtual DbSet<Myperiod> Myperiods { get; set; }
        public virtual DbSet<Na1973> Na1973s { get; set; }
        public virtual DbSet<Neoageing> Neoageings { get; set; }
        public virtual DbSet<Neoageingsupp> Neoageingsupps { get; set; }
        public virtual DbSet<Newinventory> Newinventories { get; set; }
        public virtual DbSet<Newsalesanalysis> Newsalesanalyses { get; set; }
        public virtual DbSet<Nhiftable> Nhiftables { get; set; }
        public virtual DbSet<NonregcashinvC> NonregcashinvCs { get; set; }
        public virtual DbSet<NonregcnoteC> NonregcnoteCs { get; set; }
        public virtual DbSet<NonreginvC> NonreginvCs { get; set; }
        public virtual DbSet<NstockDt> NstockDts { get; set; }
        public virtual DbSet<NstockHd> NstockHds { get; set; }
        public virtual DbSet<Oldsy> Oldsys { get; set; }
        public virtual DbSet<OtDt> OtDts { get; set; }
        public virtual DbSet<OtHd> OtHds { get; set; }
        public virtual DbSet<P9a> P9as { get; set; }
        public virtual DbSet<Packlistdt> Packlistdts { get; set; }
        public virtual DbSet<Packlisthd> Packlisthds { get; set; }
        public virtual DbSet<Paycalc> Paycalcs { get; set; }
        public virtual DbSet<Paydate> Paydates { get; set; }
        public virtual DbSet<Paymaster> Paymasters { get; set; }
        public virtual DbSet<PaymentDetail> PaymentDetails { get; set; }
        public virtual DbSet<PaymentDetailrep> PaymentDetailreps { get; set; }
        public virtual DbSet<PaymentsDt> PaymentsDts { get; set; }
        public virtual DbSet<PaymentsHd> PaymentsHds { get; set; }
        public virtual DbSet<PaymentsHdrep> PaymentsHdreps { get; set; }
        public virtual DbSet<Paymode> Paymodes { get; set; }
        public virtual DbSet<Paymodebank> Paymodebanks { get; set; }
        public virtual DbSet<Payperiodstatus> Payperiodstatuses { get; set; }
        public virtual DbSet<Payroll> Payrolls { get; set; }
        public virtual DbSet<Payrollitem> Payrollitems { get; set; }
        public virtual DbSet<Payterm> Payterms { get; set; }
        public virtual DbSet<Paytoalloc> Paytoallocs { get; set; }
        public virtual DbSet<Period> Periods { get; set; }
        public virtual DbSet<Phamaconfig> Phamaconfigs { get; set; }
        public virtual DbSet<PkInvStock> PkInvStocks { get; set; }
        public virtual DbSet<PkinvStockSummary> PkinvStockSummaries { get; set; }
        public virtual DbSet<PkinvStockTemp> PkinvStockTemps { get; set; }
        public virtual DbSet<PorderinDt> PorderinDts { get; set; }
        public virtual DbSet<PorderinHd> PorderinHds { get; set; }
        public virtual DbSet<Prescriber> Prescribers { get; set; }
        public virtual DbSet<Prescription> Prescriptions { get; set; }
        public virtual DbSet<Prescriptionslog> Prescriptionslogs { get; set; }
        public virtual DbSet<Pricechangesupp> Pricechangesupps { get; set; }
        public virtual DbSet<Printallocation> Printallocations { get; set; }
        public virtual DbSet<Printcashbook> Printcashbooks { get; set; }
        public virtual DbSet<Printcashbookrep> Printcashbookreps { get; set; }
        public virtual DbSet<Printitemsalessummary> Printitemsalessummaries { get; set; }
        public virtual DbSet<Printjournal> Printjournals { get; set; }
        public virtual DbSet<Printjournalinventory> Printjournalinventories { get; set; }
        public virtual DbSet<Printjournalsrep> Printjournalsreps { get; set; }
        public virtual DbSet<Printlabel> Printlabels { get; set; }
        public virtual DbSet<Printmylist> Printmylists { get; set; }
        public virtual DbSet<Printperiod> Printperiods { get; set; }
        public virtual DbSet<Printpricelist> Printpricelists { get; set; }
        public virtual DbSet<Printpurchasepower> Printpurchasepowers { get; set; }
        public virtual DbSet<Printq> Printqs { get; set; }
        public virtual DbSet<Printsalescrosstab> Printsalescrosstabs { get; set; }
        public virtual DbSet<Printsalesdrill> Printsalesdrills { get; set; }
        public virtual DbSet<Printsaleshybrid> Printsaleshybrids { get; set; }
        public virtual DbSet<Printsaleshybridneo> Printsaleshybridneos { get; set; }
        public virtual DbSet<Printsalespower> Printsalespowers { get; set; }
        public virtual DbSet<Printsalespowerdrill> Printsalespowerdrills { get; set; }
        public virtual DbSet<Printsalespowerregion> Printsalespowerregions { get; set; }
        public virtual DbSet<Printspurchasecore> Printspurchasecores { get; set; }
        public virtual DbSet<Printssalescore> Printssalescores { get; set; }
        public virtual DbSet<Printstockcrosstab> Printstockcrosstabs { get; set; }
        public virtual DbSet<Printstockstatus> Printstockstatuses { get; set; }
        public virtual DbSet<Printstockstatusrep> Printstockstatusreps { get; set; }
        public virtual DbSet<Printstocktakeneo> Printstocktakeneos { get; set; }
        public virtual DbSet<Printstocktakeneoqk> Printstocktakeneoqks { get; set; }
        public virtual DbSet<Printtrack> Printtracks { get; set; }
        public virtual DbSet<Procedure> Procedures { get; set; }
        public virtual DbSet<Procitem> Procitems { get; set; }
        public virtual DbSet<Prodclass> Prodclasses { get; set; }
        public virtual DbSet<ProfileGroup> ProfileGroups { get; set; }
        public virtual DbSet<Profitability> Profitabilities { get; set; }
        public virtual DbSet<Province> Provinces { get; set; }
        public virtual DbSet<Province1> Provinces1 { get; set; }
        public virtual DbSet<Provincetown> Provincetowns { get; set; }
        public virtual DbSet<ProvisionsDt> ProvisionsDts { get; set; }
        public virtual DbSet<ProvisionsHd> ProvisionsHds { get; set; }
        public virtual DbSet<Pubholiday> Pubholidays { get; set; }
        public virtual DbSet<PurchaseC> PurchaseCs { get; set; }
        public virtual DbSet<PurchaseDt> PurchaseDts { get; set; }
        public virtual DbSet<PurchaseExtra> PurchaseExtras { get; set; }
        public virtual DbSet<PurchaseHd> PurchaseHds { get; set; }
        public virtual DbSet<Qpr> Qprs { get; set; }
        public virtual DbSet<QuickinvStock> QuickinvStocks { get; set; }
        public virtual DbSet<QuotationC> QuotationCs { get; set; }
        public virtual DbSet<QuotationDt> QuotationDts { get; set; }
        public virtual DbSet<QuotationDtOnline> QuotationDtOnlines { get; set; }
        public virtual DbSet<QuotationHd> QuotationHds { get; set; }
        public virtual DbSet<QuotationHdOnline> QuotationHdOnlines { get; set; }
        public virtual DbSet<Rastamovement> Rastamovements { get; set; }
        public virtual DbSet<Rcpt> Rcpts { get; set; }
        public virtual DbSet<ReceiptDetail> ReceiptDetails { get; set; }
        public virtual DbSet<ReceiptsDt> ReceiptsDts { get; set; }
        public virtual DbSet<ReceiptsHd> ReceiptsHds { get; set; }
        public virtual DbSet<ReceiptsHdrep> ReceiptsHdreps { get; set; }
        public virtual DbSet<ReceiptsPaymode> ReceiptsPaymodes { get; set; }
        public virtual DbSet<Recondatum> Recondata { get; set; }
        public virtual DbSet<Reconlock> Reconlocks { get; set; }
        public virtual DbSet<Reconlocksupp> Reconlocksupps { get; set; }
        public virtual DbSet<Recurrence> Recurrences { get; set; }
        public virtual DbSet<Remcalendar> Remcalendars { get; set; }
        public virtual DbSet<Reminder> Reminders { get; set; }
        public virtual DbSet<Remreminder> Remreminders { get; set; }
        public virtual DbSet<ReportSetting> ReportSettings { get; set; }
        public virtual DbSet<ReqC> ReqCs { get; set; }
        public virtual DbSet<ReqDt> ReqDts { get; set; }
        public virtual DbSet<ReqHd> ReqHds { get; set; }
        public virtual DbSet<RetC> RetCs { get; set; }
        public virtual DbSet<Route> Routes { get; set; }
        public virtual DbSet<Routestown> Routestowns { get; set; }
        public virtual DbSet<Rpt24052006> Rpt24052006s { get; set; }
        public virtual DbSet<Rpttoalloc> Rpttoallocs { get; set; }
        public virtual DbSet<SaleinvDt> SaleinvDts { get; set; }
        public virtual DbSet<SaleinvDtrep> SaleinvDtreps { get; set; }
        public virtual DbSet<SaleinvDtrmt> SaleinvDtrmts { get; set; }
        public virtual DbSet<SaleinvHd> SaleinvHds { get; set; }
        public virtual DbSet<SaleinvHdrep> SaleinvHdreps { get; set; }
        public virtual DbSet<SaleinvHdrmt> SaleinvHdrmts { get; set; }
        public virtual DbSet<SalesAnalysisByItem> SalesAnalysisByItems { get; set; }
        public virtual DbSet<SalesAnalysisInventoryList> SalesAnalysisInventoryLists { get; set; }
        public virtual DbSet<SalesAnalysisMonthYtdSalesDetail> SalesAnalysisMonthYtdSalesDetails { get; set; }
        public virtual DbSet<SalesCode> SalesCodes { get; set; }
        public virtual DbSet<SalesJournalDetail> SalesJournalDetails { get; set; }
        public virtual DbSet<SalesMatrixSummary> SalesMatricesSummary { get; set; }
        public virtual DbSet<SalesPlan> SalesPlans { get; set; }
        public virtual DbSet<SalesanalysisYtd> SalesanalysisYtds { get; set; }
        public virtual DbSet<SalesbudgetDatum> SalesbudgetData { get; set; }
        public virtual DbSet<Salesinventory> Salesinventories { get; set; }
        public virtual DbSet<SalesinvoiceC> SalesinvoiceCs { get; set; }
        public virtual DbSet<Saleskeydip> Saleskeydips { get; set; }
        public virtual DbSet<Salesman> Salesmen { get; set; }
        public virtual DbSet<SalesmatrixDatum> SalesmatricesData { get; set; }
        public virtual DbSet<SalesmenCustomer> SalesmenCustomers { get; set; }
        public virtual DbSet<SalesmenItem> SalesmenItems { get; set; }
        public virtual DbSet<SalesorderDt> SalesorderDts { get; set; }
        public virtual DbSet<SalesorderHd> SalesorderHds { get; set; }
        public virtual DbSet<Saletran> Saletrans { get; set; }
        public virtual DbSet<ScJournal> ScJournals { get; set; }
        public virtual DbSet<ScJournalsclose> ScJournalscloses { get; set; }
        public virtual DbSet<ScJournalsforex> ScJournalsforices { get; set; }
        public virtual DbSet<ScJournalsrep> ScJournalsreps { get; set; }
        public virtual DbSet<ScreditDt> ScreditDts { get; set; }
        public virtual DbSet<ScreditHd> ScreditHds { get; set; }
        public virtual DbSet<Selcusin> Selcusins { get; set; }
        public virtual DbSet<Selcusinbranch> Selcusinbranches { get; set; }
        public virtual DbSet<SelectedDoc> SelectedDocs { get; set; }
        public virtual DbSet<Selpay> Selpays { get; set; }
        public virtual DbSet<Selrep> Selreps { get; set; }
        public virtual DbSet<Selsistabranch> Selsistabranches { get; set; }
        public virtual DbSet<Selsistum> Selsista { get; set; }
        public virtual DbSet<Sheet1> Sheet1s { get; set; }
        public virtual DbSet<Sinvuser> Sinvusers { get; set; }
        public virtual DbSet<SlorderDt> SlorderDts { get; set; }
        public virtual DbSet<SlorderHd> SlorderHds { get; set; }
        public virtual DbSet<Sm200> Sm200s { get; set; }
        public virtual DbSet<Sm201> Sm201s { get; set; }
        public virtual DbSet<Sm201import> Sm201imports { get; set; }
        public virtual DbSet<Sm202> Sm202s { get; set; }
        public virtual DbSet<Sm203> Sm203s { get; set; }
        public virtual DbSet<Sm204> Sm204s { get; set; }
        public virtual DbSet<Sm205> Sm205s { get; set; }
        public virtual DbSet<Sm206> Sm206s { get; set; }
        public virtual DbSet<Smarttype> Smarttypes { get; set; }
        public virtual DbSet<Smsdefault> Smsdefaults { get; set; }
        public virtual DbSet<Snv4t> Snv4ts { get; set; }
        public virtual DbSet<Snvin> Snvins { get; set; }
        public virtual DbSet<Snvinhd> Snvinhds { get; set; }
        public virtual DbSet<SpCategory> SpCategories { get; set; }
        public virtual DbSet<Spcategory1> Spcategories1 { get; set; }
        public virtual DbSet<Spprice> Spprices { get; set; }
        public virtual DbSet<StatementPeriod> StatementPeriods { get; set; }
        public virtual DbSet<StatementPeriodssupp> StatementPeriodssupps { get; set; }
        public virtual DbSet<Statute> Statutes { get; set; }
        public virtual DbSet<Stktake> Stktakes { get; set; }
        public virtual DbSet<Stktakeinvsubgroup> Stktakeinvsubgroups { get; set; }
        public virtual DbSet<Stktakeuser> Stktakeusers { get; set; }
        public virtual DbSet<Stktrin> Stktrins { get; set; }
        public virtual DbSet<Stktroutin> Stktroutins { get; set; }
        public virtual DbSet<StockAdjustment> StockAdjustments { get; set; }
        public virtual DbSet<Stockactivity> Stockactivities { get; set; }
        public virtual DbSet<Stockbalance> Stockbalances { get; set; }
        public virtual DbSet<Stockskeydip> Stockskeydips { get; set; }
        public virtual DbSet<Stocktakeneo> Stocktakeneos { get; set; }
        public virtual DbSet<Stocktemp> Stocktemps { get; set; }
        public virtual DbSet<Stocktran> Stocktrans { get; set; }
        public virtual DbSet<Stocktransout> Stocktransouts { get; set; }
        public virtual DbSet<Stocktranstemp> Stocktranstemps { get; set; }
        public virtual DbSet<SuppContact> SuppContacts { get; set; }
        public virtual DbSet<SuppDiscount> SuppDiscounts { get; set; }
        public virtual DbSet<SuppItem> SuppItems { get; set; }
        public virtual DbSet<SuppItemscore> SuppItemscores { get; set; }
        public virtual DbSet<SuppRuntotal> SuppRuntotals { get; set; }
        public virtual DbSet<SuppStatement> SuppStatements { get; set; }
        public virtual DbSet<Suppcheck2008> Suppcheck2008s { get; set; }
        public virtual DbSet<SuppinvDt> SuppinvDts { get; set; }
        public virtual DbSet<SuppinvDtrep> SuppinvDtreps { get; set; }
        public virtual DbSet<SuppinvHd> SuppinvHds { get; set; }
        public virtual DbSet<SuppinvHdrep> SuppinvHdreps { get; set; }
        public virtual DbSet<SuppinvoiceC> SuppinvoiceCs { get; set; }
        public virtual DbSet<Supplbalance> Supplbalances { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<SupplierStatement> SupplierStatements { get; set; }
        public virtual DbSet<Supplieraged> Supplierageds { get; set; }
        public virtual DbSet<Supptotradeapply> Supptotradeapplies { get; set; }
        public virtual DbSet<Supptotradecombo> Supptotradecombos { get; set; }
        public virtual DbSet<Sy> Sys { get; set; }
        public virtual DbSet<Sysdefault> Sysdefaults { get; set; }
        public virtual DbSet<Sysmodule> Sysmodules { get; set; }
        public virtual DbSet<Sysnextnumber> Sysnextnumbers { get; set; }
        public virtual DbSet<TabNam> TabNams { get; set; }
        public virtual DbSet<TableRow> TableRows { get; set; }
        public virtual DbSet<TaxType> TaxTypes { get; set; }
        public virtual DbSet<Taxis> Taxes { get; set; }
        public virtual DbSet<Taxtable> Taxtables { get; set; }
        public virtual DbSet<TblMonth> TblMonths { get; set; }
        public virtual DbSet<TblReminder> TblReminders { get; set; }
        public virtual DbSet<Tblvwgldoc> Tblvwgldocs { get; set; }
        public virtual DbSet<TheatreC> TheatreCs { get; set; }
        public virtual DbSet<TheatreDt> TheatreDts { get; set; }
        public virtual DbSet<TheatreHd> TheatreHds { get; set; }
        public virtual DbSet<Till> Tills { get; set; }
        public virtual DbSet<TillrepsHd> TillrepsHds { get; set; }
        public virtual DbSet<Tillshift> Tillshifts { get; set; }
        public virtual DbSet<Town> Towns { get; set; }
        public virtual DbSet<Trackcollect> Trackcollects { get; set; }
        public virtual DbSet<Trackcollectdispatch> Trackcollectdispatches { get; set; }
        public virtual DbSet<Trackcollectdispatchrecall> Trackcollectdispatchrecalls { get; set; }
        public virtual DbSet<Trackdeliver> Trackdelivers { get; set; }
        public virtual DbSet<Trackdeliverrecall> Trackdeliverrecalls { get; set; }
        public virtual DbSet<Trackdispatch> Trackdispatches { get; set; }
        public virtual DbSet<Trackstore> Trackstores { get; set; }
        public virtual DbSet<Trackstoremultisel> Trackstoremultisels { get; set; }
        public virtual DbSet<Trackverify> Trackverifies { get; set; }
        public virtual DbSet<Trackverifytwo> Trackverifytwos { get; set; }
        public virtual DbSet<Transferpoint> Transferpoints { get; set; }
        public virtual DbSet<Transporter> Transporters { get; set; }
        public virtual DbSet<Tx001> Tx001s { get; set; }
        public virtual DbSet<Unallocatedcu> Unallocatedcus { get; set; }
        public virtual DbSet<Unallocatedsupp> Unallocatedsupps { get; set; }
        public virtual DbSet<Unbatchlog> Unbatchlogs { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<UpliftsDt> UpliftsDts { get; set; }
        public virtual DbSet<UpliftsHd> UpliftsHds { get; set; }
        public virtual DbSet<UpliftsItem> UpliftsItems { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserAccess> UserAccesses { get; set; }
        public virtual DbSet<UserAudittrail> UserAudittrails { get; set; }
        public virtual DbSet<UserGroup> UserGroups { get; set; }
        public virtual DbSet<Userallocationnumber> Userallocationnumbers { get; set; }
        public virtual DbSet<UsergroupRight> UsergroupRights { get; set; }
        public virtual DbSet<Userlog> Userlogs { get; set; }
        public virtual DbSet<Usermessage> Usermessages { get; set; }
        public virtual DbSet<Usermessagesauthority> Usermessagesauthorities { get; set; }
        public virtual DbSet<Usermessagesauthorityrmt> Usermessagesauthorityrmts { get; set; }
        public virtual DbSet<Userpasshistory> Userpasshistories { get; set; }
        public virtual DbSet<Userprofile> Userprofiles { get; set; }
        public virtual DbSet<Usersbranch> Usersbranches { get; set; }
        public virtual DbSet<Usersdoc> Usersdocs { get; set; }
        public virtual DbSet<Usersusergroup> Usersusergroups { get; set; }
        public virtual DbSet<Usertimefootprint> Usertimefootprints { get; set; }
        public virtual DbSet<Usertimelog> Usertimelogs { get; set; }
        public virtual DbSet<VatToclaim> VatToclaims { get; set; }
        public virtual DbSet<VatTopay> VatTopays { get; set; }
        public virtual DbSet<VehDelivery> VehDeliveries { get; set; }
        public virtual DbSet<VehMake> VehMakes { get; set; }
        public virtual DbSet<VehType> VehTypes { get; set; }
        public virtual DbSet<VwAgeingCreditsMatched> VwAgeingCreditsMatcheds { get; set; }
        public virtual DbSet<VwAgeingCreditsMatched21102004> VwAgeingCreditsMatched21102004s { get; set; }
        public virtual DbSet<VwAgeingCreditsMatchedTotal> VwAgeingCreditsMatchedTotals { get; set; }
        public virtual DbSet<VwAgeingDebitsBalanceMonthBasis> VwAgeingDebitsBalanceMonthBases { get; set; }
        public virtual DbSet<VwAgeingDebitsBalanceMonthBasisNew> VwAgeingDebitsBalanceMonthBasisNews { get; set; }
        public virtual DbSet<VwAgeingDebitsBalanceMonthBasisNormal> VwAgeingDebitsBalanceMonthBasisNormals { get; set; }
        public virtual DbSet<VwAgeingDebitsBalanceMonthBasisOrig> VwAgeingDebitsBalanceMonthBasisOrigs { get; set; }
        public virtual DbSet<VwAgeingDebitsBalancePeriodBasis> VwAgeingDebitsBalancePeriodBases { get; set; }
        public virtual DbSet<VwAgeingDebitsBalancePeriodBasis21junBak> VwAgeingDebitsBalancePeriodBasis21junBaks { get; set; }
        public virtual DbSet<VwAgeingDebitsBalancePeriodBasis22jun> VwAgeingDebitsBalancePeriodBasis22juns { get; set; }
        public virtual DbSet<VwAgeingDebitsMatchedTotal> VwAgeingDebitsMatchedTotals { get; set; }
        public virtual DbSet<VwAgeingMonthBasisDetail> VwAgeingMonthBasisDetails { get; set; }
        public virtual DbSet<VwAgeingPeriodBasisDetail> VwAgeingPeriodBasisDetails { get; set; }
        public virtual DbSet<VwAgeingPeriodBasisDetails20201119> VwAgeingPeriodBasisDetails20201119s { get; set; }
        public virtual DbSet<VwAgeingPeriodBasisDetailsBak22dec> VwAgeingPeriodBasisDetailsBak22decs { get; set; }
        public virtual DbSet<VwAgeingSourceMatchedTotal> VwAgeingSourceMatchedTotals { get; set; }
        public virtual DbSet<VwAgeingSourceMatchedTotals160204> VwAgeingSourceMatchedTotals160204s { get; set; }
        public virtual DbSet<VwAgeingSummary> VwAgeingSummaries { get; set; }
        public virtual DbSet<VwAgeingSummary2008> VwAgeingSummary2008s { get; set; }
        public virtual DbSet<VwAgeingSummary21102004> VwAgeingSummary21102004s { get; set; }
        public virtual DbSet<VwAgeingSummaryBak> VwAgeingSummaryBaks { get; set; }
        public virtual DbSet<VwAgeingSummaryBak07Jan2004> VwAgeingSummaryBak07Jan2004s { get; set; }
        public virtual DbSet<VwAgeingSummaryCred> VwAgeingSummaryCreds { get; set; }
        public virtual DbSet<VwAgeingSummaryCredit> VwAgeingSummaryCredits { get; set; }
        public virtual DbSet<VwAgeingSummaryDebit> VwAgeingSummaryDebits { get; set; }
        public virtual DbSet<VwAgeingSummaryNew> VwAgeingSummaryNews { get; set; }
        public virtual DbSet<VwAgeingSummaryType1> VwAgeingSummaryType1s { get; set; }
        public virtual DbSet<VwAgeingSummaryType2> VwAgeingSummaryType2s { get; set; }
        public virtual DbSet<VwAgeingSummarydeB> VwAgeingSummarydeBs { get; set; }
        public virtual DbSet<VwAgeingUnallocatedCredit> VwAgeingUnallocatedCredits { get; set; }
        public virtual DbSet<VwAgeingUnallocatedCredits160204> VwAgeingUnallocatedCredits160204s { get; set; }
        public virtual DbSet<VwApd1973> VwApd1973s { get; set; }
        public virtual DbSet<VwApplyReceiptTo> VwApplyReceiptTos { get; set; }
        public virtual DbSet<VwAuc1973> VwAuc1973s { get; set; }
        public virtual DbSet<VwBranchReceiptPart> VwBranchReceiptParts { get; set; }
        public virtual DbSet<VwBranchTransferPart> VwBranchTransferParts { get; set; }
        public virtual DbSet<VwCashSaleCreditNote> VwCashSaleCreditNotes { get; set; }
        public virtual DbSet<VwCashSaleCreditNotePart> VwCashSaleCreditNoteParts { get; set; }
        public virtual DbSet<VwCashSaleReceiptsCrystal> VwCashSaleReceiptsCrystals { get; set; }
        public virtual DbSet<VwCombinedPurchase> VwCombinedPurchases { get; set; }
        public virtual DbSet<VwCombinedPurchaseAverage21102004> VwCombinedPurchaseAverage21102004s { get; set; }
        public virtual DbSet<VwCombinedPurchases21102004> VwCombinedPurchases21102004s { get; set; }
        public virtual DbSet<VwCombinedPurchasesAverage> VwCombinedPurchasesAverages { get; set; }
        public virtual DbSet<VwCombinedPurchasesPrice> VwCombinedPurchasesPrices { get; set; }
        public virtual DbSet<VwCombinedSale> VwCombinedSales { get; set; }
        public virtual DbSet<VwCombinedSales21102004> VwCombinedSales21102004s { get; set; }
        public virtual DbSet<VwCombinedSalesAverage> VwCombinedSalesAverages { get; set; }
        public virtual DbSet<VwCombinedSalesAverage21102004> VwCombinedSalesAverage21102004s { get; set; }
        public virtual DbSet<VwCombinedSalesPrice> VwCombinedSalesPrices { get; set; }
        public virtual DbSet<VwCombinedSalesPrice21102004> VwCombinedSalesPrice21102004s { get; set; }
        public virtual DbSet<VwCreditNote> VwCreditNotes { get; set; }
        public virtual DbSet<VwCreditNotePart> VwCreditNoteParts { get; set; }
        public virtual DbSet<VwCusBroughtForward> VwCusBroughtForwards { get; set; }
        public virtual DbSet<VwCusStatementDetail> VwCusStatementDetails { get; set; }
        public virtual DbSet<VwCusStatementDetails2000> VwCusStatementDetails2000s { get; set; }
        public virtual DbSet<VwCusStatementDetailsOpenitem> VwCusStatementDetailsOpenitems { get; set; }
        public virtual DbSet<VwCusStatementDetailsOpenitem21102004> VwCusStatementDetailsOpenitem21102004s { get; set; }
        public virtual DbSet<VwCusStatementDetailsOpenitemjune2005> VwCusStatementDetailsOpenitemjune2005s { get; set; }
        public virtual DbSet<VwCusStatementDetailsRunbal> VwCusStatementDetailsRunbals { get; set; }
        public virtual DbSet<VwCusStatementDetailsx> VwCusStatementDetailsxes { get; set; }
        public virtual DbSet<VwCusStatementOpeningRunbal> VwCusStatementOpeningRunbals { get; set; }
        public virtual DbSet<VwCusStatementTotal> VwCusStatementTotals { get; set; }
        public virtual DbSet<VwCusStatementTotals2008> VwCusStatementTotals2008s { get; set; }
        public virtual DbSet<VwCustomerAgeAnalysisXtal> VwCustomerAgeAnalysisXtals { get; set; }
        public virtual DbSet<VwCustomerAgeAnalysisXtal11052005> VwCustomerAgeAnalysisXtal11052005s { get; set; }
        public virtual DbSet<VwCustomerAgeAnalysisXtal2008> VwCustomerAgeAnalysisXtal2008s { get; set; }
        public virtual DbSet<VwCustomerAgeAnalysisXtalQuick> VwCustomerAgeAnalysisXtalQuicks { get; set; }
        public virtual DbSet<VwCustomerInterestInvoiceAmtDue> VwCustomerInterestInvoiceAmtDues { get; set; }
        public virtual DbSet<VwCustomersUnAllocated> VwCustomersUnAllocateds { get; set; }
        public virtual DbSet<VwDebitsList> VwDebitsLists { get; set; }
        public virtual DbSet<VwGetReportName> VwGetReportNames { get; set; }
        public virtual DbSet<VwGetSalesJournal> VwGetSalesJournals { get; set; }
        public virtual DbSet<VwGlintegrationAcct> VwGlintegrationAccts { get; set; }
        public virtual DbSet<VwGretnote> VwGretnotes { get; set; }
        public virtual DbSet<VwGretnotePart> VwGretnoteParts { get; set; }
        public virtual DbSet<VwGrnGretnote> VwGrnGretnotes { get; set; }
        public virtual DbSet<VwGroupCredit> VwGroupCredits { get; set; }
        public virtual DbSet<VwGroupDebit> VwGroupDebits { get; set; }
        public virtual DbSet<VwInvMatchTemp> VwInvMatchTemps { get; set; }
        public virtual DbSet<VwInventoryReorder> VwInventoryReorders { get; set; }
        public virtual DbSet<VwInventoryReordersMovement> VwInventoryReordersMovements { get; set; }
        public virtual DbSet<VwInventoryReordersMovementSummary> VwInventoryReordersMovementSummaries { get; set; }
        public virtual DbSet<VwInventoryStatementDetail> VwInventoryStatementDetails { get; set; }
        public virtual DbSet<VwInventoryStatementDocBalance> VwInventoryStatementDocBalances { get; set; }
        public virtual DbSet<VwInventoryStatementRunningBal> VwInventoryStatementRunningBals { get; set; }
        public virtual DbSet<VwInvoiceReceiptPart> VwInvoiceReceiptParts { get; set; }
        public virtual DbSet<VwItemMovement> VwItemMovements { get; set; }
        public virtual DbSet<VwItemMovementByMonth> VwItemMovementByMonths { get; set; }
        public virtual DbSet<VwItemMovementByMonthCrosstab> VwItemMovementByMonthCrosstabs { get; set; }
        public virtual DbSet<VwLastItemPrice> VwLastItemPrices { get; set; }
        public virtual DbSet<VwLastItemPricePw> VwLastItemPricePws { get; set; }
        public virtual DbSet<VwLastItemPriceSupp> VwLastItemPriceSupps { get; set; }
        public virtual DbSet<VwOrdersList> VwOrdersLists { get; set; }
        public virtual DbSet<VwPostDatedCheque> VwPostDatedCheques { get; set; }
        public virtual DbSet<VwPurchaseOrder> VwPurchaseOrders { get; set; }
        public virtual DbSet<VwPurchaseOrderInfo> VwPurchaseOrderInfos { get; set; }
        public virtual DbSet<VwQryLastPurchaseDate> VwQryLastPurchaseDates { get; set; }
        public virtual DbSet<VwQryLastSaleDate> VwQryLastSaleDates { get; set; }
        public virtual DbSet<VwQuotation> VwQuotations { get; set; }
        public virtual DbSet<VwQuotationPart> VwQuotationParts { get; set; }
        public virtual DbSet<VwQuotationPartcsale> VwQuotationPartcsales { get; set; }
        public virtual DbSet<VwQuotationPartwEb> VwQuotationPartwEbs { get; set; }
        public virtual DbSet<VwQuotationcsale> VwQuotationcsales { get; set; }
        public virtual DbSet<VwRet> VwRets { get; set; }
        public virtual DbSet<VwSalesAnalysisMonthYtdSalesDetailsSummary> VwSalesAnalysisMonthYtdSalesDetailsSummaries { get; set; }
        public virtual DbSet<VwSalesInvoice1> VwSalesInvoice1s { get; set; }
        public virtual DbSet<VwSalesInvoice2> VwSalesInvoice2s { get; set; }
        public virtual DbSet<VwSalesInvoiceList> VwSalesInvoiceLists { get; set; }
        public virtual DbSet<VwSalesJournalMatrixByItem> VwSalesJournalMatricesByItem { get; set; }
        public virtual DbSet<VwSalesJournalMatrixSummary> VwSalesJournalMatricesSummary { get; set; }
        public virtual DbSet<VwSalesJournalMatrixSummaryC> VwSalesJournalMatricesSummaryC { get; set; }
        public virtual DbSet<VwSelectBank> VwSelectBanks { get; set; }
        public virtual DbSet<VwSelectPendingOrder> VwSelectPendingOrders { get; set; }
        public virtual DbSet<VwShowCurrentCustomer> VwShowCurrentCustomers { get; set; }
        public virtual DbSet<VwShowCurrentSupplier> VwShowCurrentSuppliers { get; set; }
        public virtual DbSet<VwShowCurrentSupplier11052005> VwShowCurrentSupplier11052005s { get; set; }
        public virtual DbSet<VwShowNonPbank> VwShowNonPbanks { get; set; }
        public virtual DbSet<VwShowSalesUnbatchedInvoice> VwShowSalesUnbatchedInvoices { get; set; }
        public virtual DbSet<VwStockBalanceInquiry> VwStockBalanceInquiries { get; set; }
        public virtual DbSet<VwStockBalanceInquirydate> VwStockBalanceInquirydates { get; set; }
        public virtual DbSet<VwStockReorder> VwStockReorders { get; set; }
        public virtual DbSet<VwStockReordersMovement> VwStockReordersMovements { get; set; }
        public virtual DbSet<VwStockReordersMovementold> VwStockReordersMovementolds { get; set; }
        public virtual DbSet<VwStockReordersold> VwStockReordersolds { get; set; }
        public virtual DbSet<VwSuppAgeingCreditsBalanceMonthBasis> VwSuppAgeingCreditsBalanceMonthBases { get; set; }
        public virtual DbSet<VwSuppAgeingDebitsMatched> VwSuppAgeingDebitsMatcheds { get; set; }
        public virtual DbSet<VwSuppAgeingDebitsMatched21102004> VwSuppAgeingDebitsMatched21102004s { get; set; }
        public virtual DbSet<VwSuppAgeingDebitsMatchedTotal> VwSuppAgeingDebitsMatchedTotals { get; set; }
        public virtual DbSet<VwSuppAgeingPeriodBasisDetail> VwSuppAgeingPeriodBasisDetails { get; set; }
        public virtual DbSet<VwSuppAgeingSummary> VwSuppAgeingSummaries { get; set; }
        public virtual DbSet<VwSuppAgeingSummary1> VwSuppAgeingSummary1s { get; set; }
        public virtual DbSet<VwSuppAgeingSummary2008> VwSuppAgeingSummary2008s { get; set; }
        public virtual DbSet<VwSuppAgeingSummary21102004> VwSuppAgeingSummary21102004s { get; set; }
        public virtual DbSet<VwSuppAgeingSummaryCredit> VwSuppAgeingSummaryCredits { get; set; }
        public virtual DbSet<VwSuppAgeingSummaryCredits1> VwSuppAgeingSummaryCredits1s { get; set; }
        public virtual DbSet<VwSuppAgeingSummaryDeb> VwSuppAgeingSummaryDebs { get; set; }
        public virtual DbSet<VwSuppAgeingSummaryDebit> VwSuppAgeingSummaryDebits { get; set; }
        public virtual DbSet<VwSuppAgeingSummaryDebits1> VwSuppAgeingSummaryDebits1s { get; set; }
        public virtual DbSet<VwSuppAgeingUnallocatedDebit> VwSuppAgeingUnallocatedDebits { get; set; }
        public virtual DbSet<VwSuppAgeingUnallocatedDebitsTest> VwSuppAgeingUnallocatedDebitsTests { get; set; }
        public virtual DbSet<VwSuppBroughtForward> VwSuppBroughtForwards { get; set; }
        public virtual DbSet<VwSuppCreditsList> VwSuppCreditsLists { get; set; }
        public virtual DbSet<VwSuppStatementDetail> VwSuppStatementDetails { get; set; }
        public virtual DbSet<VwSuppStatementDetailsOpenitem> VwSuppStatementDetailsOpenitems { get; set; }
        public virtual DbSet<VwSuppStatementDetailsOpenitem21102004> VwSuppStatementDetailsOpenitem21102004s { get; set; }
        public virtual DbSet<VwSuppStatementDetailsRunbal> VwSuppStatementDetailsRunbals { get; set; }
        public virtual DbSet<VwSuppStatementOpeningRunbal> VwSuppStatementOpeningRunbals { get; set; }
        public virtual DbSet<VwSuppStatementTotal> VwSuppStatementTotals { get; set; }
        public virtual DbSet<VwSuppStatementTotals2008> VwSuppStatementTotals2008s { get; set; }
        public virtual DbSet<VwSupplierAgeAnalysisXtal> VwSupplierAgeAnalysisXtals { get; set; }
        public virtual DbSet<VwSupplierAgeAnalysisXtal11052005> VwSupplierAgeAnalysisXtal11052005s { get; set; }
        public virtual DbSet<VwSupplierAgeAnalysisXtal2008> VwSupplierAgeAnalysisXtal2008s { get; set; }
        public virtual DbSet<VwUnbatchedInvoice> VwUnbatchedInvoices { get; set; }
        public virtual DbSet<VwUnmatchedCustomerPayment> VwUnmatchedCustomerPayments { get; set; }
        public virtual DbSet<VwUnmatchedSupplierPayment> VwUnmatchedSupplierPayments { get; set; }
        public virtual DbSet<VwUserRightsAvailable> VwUserRightsAvailables { get; set; }
        public virtual DbSet<VwValidCustomerStatement> VwValidCustomerStatements { get; set; }
        public virtual DbSet<VwValidSupplierStatement> VwValidSupplierStatements { get; set; }
        public virtual DbSet<VwValidXtalCustomerStatement> VwValidXtalCustomerStatements { get; set; }
        public virtual DbSet<VwValidXtalSupplierStatement> VwValidXtalSupplierStatements { get; set; }
        public virtual DbSet<Vwac1973> Vwac1973s { get; set; }
        public virtual DbSet<Vwact1973> Vwact1973s { get; set; }
        public virtual DbSet<Vwactivestock> Vwactivestocks { get; set; }
        public virtual DbSet<VwageingdetailsExrate> VwageingdetailsExrates { get; set; }
        public virtual DbSet<VwageingdetailssuppExrate> VwageingdetailssuppExrates { get; set; }
        public virtual DbSet<Vwast1973> Vwast1973s { get; set; }
        public virtual DbSet<Vwbanktransaction> Vwbanktransactions { get; set; }
        public virtual DbSet<Vwcdoc> Vwcdocs { get; set; }
        public virtual DbSet<Vwcustomerledger> Vwcustomerledgers { get; set; }
        public virtual DbSet<Vwdaytransaction> Vwdaytransactions { get; set; }
        public virtual DbSet<Vwgldoc> Vwgldocs { get; set; }
        public virtual DbSet<VwgldocsBook> VwgldocsBooks { get; set; }
        public virtual DbSet<VwgldocsRep> VwgldocsReps { get; set; }
        public virtual DbSet<Vwgrn> Vwgrns { get; set; }
        public virtual DbSet<Vwlpotransferpart> Vwlpotransferparts { get; set; }
        public virtual DbSet<Vwpurchasesanalysis> Vwpurchasesanalyses { get; set; }
        public virtual DbSet<Vwpurchasesanalysiscentral> Vwpurchasesanalysiscentrals { get; set; }
        public virtual DbSet<Vwsalesanalysis> Vwsalesanalyses { get; set; }
        public virtual DbSet<Vwsalesanalysiscentral> Vwsalesanalysiscentrals { get; set; }
        public virtual DbSet<Vwstocksanalysis> Vwstocksanalyses { get; set; }
        public virtual DbSet<VwstocksanalysisToday> VwstocksanalysisTodays { get; set; }
        public virtual DbSet<VwstocksanalysisTodaybatched> VwstocksanalysisTodaybatcheds { get; set; }
        public virtual DbSet<VwstocksanalysisTodaybatchedpartwhole> VwstocksanalysisTodaybatchedpartwholes { get; set; }
        public virtual DbSet<VwstocksanalysisTodaypartwhole> VwstocksanalysisTodaypartwholes { get; set; }
        public virtual DbSet<Vwstocksanalysisallbatched> Vwstocksanalysisallbatcheds { get; set; }
        public virtual DbSet<Vwstocksanalysisbatched> Vwstocksanalysisbatcheds { get; set; }
        public virtual DbSet<Vwstocksanalysispartwhole> Vwstocksanalysispartwholes { get; set; }
        public virtual DbSet<Vwstocksanalysisstocktake> Vwstocksanalysisstocktakes { get; set; }
        public virtual DbSet<Vwsuppbalance> Vwsuppbalances { get; set; }
        public virtual DbSet<Vwtblsuppageing> Vwtblsuppageings { get; set; }
        public virtual DbSet<Vwtotalpayment> Vwtotalpayments { get; set; }
        public virtual DbSet<Vwtotalpayments11052005> Vwtotalpayments11052005s { get; set; }
        public virtual DbSet<Vwtotalreceipt> Vwtotalreceipts { get; set; }
        public virtual DbSet<Vwtotalreceipts11052005> Vwtotalreceipts11052005s { get; set; }
        public virtual DbSet<Warning> Warnings { get; set; }
        public virtual DbSet<Xpareto> Xparetos { get; set; }
        public virtual DbSet<_259t> _259ts { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Name=PhamacoreConnection");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Acc0063>(entity =>
            {
                entity.HasKey(e => e.Documentid);

                entity.ToTable("ACC0063");

                entity.Property(e => e.Documentid)
                    .ValueGeneratedNever()
                    .HasColumnName("DOCUMENTID");

                entity.Property(e => e.Billto)
                    .HasColumnType("ntext")
                    .HasColumnName("BILLTO");

                entity.Property(e => e.Customermessage).HasColumnName("CUSTOMERMESSAGE");

                entity.Property(e => e.Documentdate)
                    .HasColumnType("date")
                    .HasColumnName("DOCUMENTDATE");

                entity.Property(e => e.Documentno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("DOCUMENTNO");

                entity.Property(e => e.Documentstatusid).HasColumnName("DOCUMENTSTATUSID");

                entity.Property(e => e.Duedate)
                    .HasColumnType("date")
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Integrated).HasDefaultValueSql("((0))");

                entity.Property(e => e.Memo)
                    .HasMaxLength(50)
                    .HasColumnName("MEMO");

                entity.Property(e => e.Refno)
                    .HasMaxLength(50)
                    .HasColumnName("REFNO");

                entity.Property(e => e.Salespersonid)
                    .HasMaxLength(50)
                    .HasColumnName("SALESPERSONID");

                entity.Property(e => e.Shipto)
                    .HasColumnType("ntext")
                    .HasColumnName("SHIPTO");

                entity.Property(e => e.Sourcedocumentno)
                    .HasMaxLength(50)
                    .HasColumnName("SOURCEDOCUMENTNO");

                entity.Property(e => e.Sysdate)
                    .HasColumnType("datetime")
                    .HasColumnName("SYSDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("date")
                    .HasColumnName("TRANSACTIONDATE");

                entity.Property(e => e.Transfertypeid)
                    .HasMaxLength(50)
                    .HasColumnName("TRANSFERTYPEID");

                entity.Property(e => e.Userid)
                    .HasMaxLength(50)
                    .HasColumnName("USERID");

                entity.Property(e => e.WhsCdFrom)
                    .HasMaxLength(50)
                    .HasColumnName("WHS_CD_FROM");

                entity.Property(e => e.WhsCdTo)
                    .HasMaxLength(50)
                    .HasColumnName("WHS_CD_TO");
            });

            modelBuilder.Entity<Acc0064>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ACC0064");

                entity.Property(e => e.Customermessage).HasColumnName("CUSTOMERMESSAGE");

                entity.Property(e => e.Description)
                    .HasMaxLength(250)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Documentdate)
                    .HasColumnType("date")
                    .HasColumnName("DOCUMENTDATE");

                entity.Property(e => e.Documentid).HasColumnName("DOCUMENTID");

                entity.Property(e => e.Documentlineid).HasColumnName("DOCUMENTLINEID");

                entity.Property(e => e.Documentno)
                    .HasMaxLength(50)
                    .HasColumnName("DOCUMENTNO");

                entity.Property(e => e.Grandtotal)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("GRANDTOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Integrated).HasDefaultValueSql("((0))");

                entity.Property(e => e.Item)
                    .HasMaxLength(250)
                    .HasColumnName("ITEM");

                entity.Property(e => e.Itemgroupid).HasColumnName("ITEMGROUPID");

                entity.Property(e => e.Itemid)
                    .HasMaxLength(50)
                    .HasColumnName("ITEMID");

                entity.Property(e => e.Itemtypeid).HasColumnName("ITEMTYPEID");

                entity.Property(e => e.Linetotal)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("LINETOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memo)
                    .HasMaxLength(50)
                    .HasColumnName("MEMO");

                entity.Property(e => e.Productcode)
                    .HasMaxLength(50)
                    .HasColumnName("PRODUCTCODE");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.Quantity1)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("QUANTITY1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Refno)
                    .HasMaxLength(50)
                    .HasColumnName("REFNO");

                entity.Property(e => e.Salespersonid)
                    .HasMaxLength(50)
                    .HasColumnName("SALESPERSONID");

                entity.Property(e => e.Sourcedocumentno)
                    .HasMaxLength(50)
                    .HasColumnName("SOURCEDOCUMENTNO");

                entity.Property(e => e.Subtotal)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("SUBTOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transactiondate)
                    .HasColumnType("date")
                    .HasColumnName("TRANSACTIONDATE");

                entity.Property(e => e.Unitprice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("UNITPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Uomid)
                    .HasMaxLength(50)
                    .HasColumnName("UOMID");

                entity.Property(e => e.Uomid1)
                    .HasMaxLength(50)
                    .HasColumnName("UOMID1");

                entity.Property(e => e.Userid)
                    .HasMaxLength(50)
                    .HasColumnName("USERID");

                entity.Property(e => e.WhsCdFrom)
                    .HasMaxLength(50)
                    .HasColumnName("WHS_CD_FROM");

                entity.Property(e => e.WhsCdTo)
                    .HasMaxLength(50)
                    .HasColumnName("WHS_CD_TO");
            });

            modelBuilder.Entity<Acct>(entity =>
            {
                entity.HasKey(e => e.Acct1)
                    .IsClustered(false);

                entity.ToTable("ACCT");

                entity.HasIndex(e => e.Acct1, "ACCT_NO")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Type, "ndxType")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Acct1)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Acctcatgcode).HasColumnName("ACCTCATGCODE");

                entity.Property(e => e.Bank)
                    .HasColumnName("bank")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("BCODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Bdgtcat)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("BDGTCAT");

                entity.Property(e => e.Begbud)
                    .HasColumnName("BEGBUD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Begcr).HasColumnName("BEGCR");

                entity.Property(e => e.Begdr).HasColumnName("BEGDR");

                entity.Property(e => e.Blocked)
                    .HasColumnName("blocked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Class)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CLASS");

                entity.Property(e => e.Controlacct)
                    .HasColumnName("CONTROLACCT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Curbud)
                    .HasColumnName("CURBUD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Curcr).HasColumnName("CURCR");

                entity.Property(e => e.Curdr).HasColumnName("CURDR");

                entity.Property(e => e.Des)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Hassubacct)
                    .HasColumnName("hassubacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Motheracct)
                    .HasColumnName("motheracct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mthacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mthacct");

                entity.Property(e => e.Newbegcr).HasColumnName("NEWBEGCR");

                entity.Property(e => e.Newbegdr).HasColumnName("NEWBEGDR");

                entity.Property(e => e.Oldacct)
                    .HasColumnName("oldacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Oldbud)
                    .HasColumnName("OLDBUD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Oldcr).HasColumnName("OLDCR");

                entity.Property(e => e.Olddr).HasColumnName("OLDDR");

                entity.Property(e => e.Pcashgl)
                    .HasColumnName("pcashgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Prevbud)
                    .HasColumnName("PREVBUD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Prevcr).HasColumnName("PREVCR");

                entity.Property(e => e.Prevdr).HasColumnName("PREVDR");

                entity.Property(e => e.Rptcat)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RPTCAT");

                entity.Property(e => e.Subacct)
                    .HasColumnName("subacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Systemacct)
                    .HasColumnName("systemacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillgl)
                    .HasColumnName("tillgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Type)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");
            });

            modelBuilder.Entity<Acct2010>(entity =>
            {
                entity.HasKey(e => e.Acct)
                    .IsClustered(false);

                entity.ToTable("ACCT2010");

                entity.Property(e => e.Acct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Acctcatgcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCTCATGCODE");

                entity.Property(e => e.Bank).HasColumnName("bank");

                entity.Property(e => e.Bdgtcat)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("BDGTCAT");

                entity.Property(e => e.Begbud).HasColumnName("BEGBUD");

                entity.Property(e => e.Begcr).HasColumnName("BEGCR");

                entity.Property(e => e.Begdr).HasColumnName("BEGDR");

                entity.Property(e => e.Blocked).HasColumnName("blocked");

                entity.Property(e => e.Class)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CLASS");

                entity.Property(e => e.Controlacct).HasColumnName("CONTROLACCT");

                entity.Property(e => e.Curbud).HasColumnName("CURBUD");

                entity.Property(e => e.Curcr).HasColumnName("CURCR");

                entity.Property(e => e.Curdr).HasColumnName("CURDR");

                entity.Property(e => e.Des)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Hassubacct).HasColumnName("hassubacct");

                entity.Property(e => e.Motheracct).HasColumnName("motheracct");

                entity.Property(e => e.Mthacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mthacct");

                entity.Property(e => e.Newbegcr).HasColumnName("NEWBEGCR");

                entity.Property(e => e.Newbegdr).HasColumnName("NEWBEGDR");

                entity.Property(e => e.Oldacct).HasColumnName("oldacct");

                entity.Property(e => e.Oldbud).HasColumnName("OLDBUD");

                entity.Property(e => e.Oldcr).HasColumnName("OLDCR");

                entity.Property(e => e.Olddr).HasColumnName("OLDDR");

                entity.Property(e => e.Prevbud).HasColumnName("PREVBUD");

                entity.Property(e => e.Prevcr).HasColumnName("PREVCR");

                entity.Property(e => e.Prevdr).HasColumnName("PREVDR");

                entity.Property(e => e.Rptcat)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RPTCAT");

                entity.Property(e => e.Subacct).HasColumnName("subacct");

                entity.Property(e => e.Systemacct).HasColumnName("systemacct");

                entity.Property(e => e.Type)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");
            });

            modelBuilder.Entity<AcctCategory>(entity =>
            {
                entity.HasKey(e => e.Acctcatgcode);

                entity.ToTable("ACCT_CATEGORY");

                entity.Property(e => e.Acctcatgcode)
                    .ValueGeneratedNever()
                    .HasColumnName("ACCTCATGCODE");

                entity.Property(e => e.Acctcatgname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCTCATGNAME");

                entity.Property(e => e.Bcode)
                    .HasColumnName("BCODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Endacct).HasColumnName("ENDACCT");

                entity.Property(e => e.Startacct).HasColumnName("STARTACCT");
            });

            modelBuilder.Entity<Acctbcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ACCTBCODE");

                entity.Property(e => e.Acct)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Acctcatgcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCTCATGCODE");

                entity.Property(e => e.Bank)
                    .HasColumnName("bank")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bdgtcat)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("BDGTCAT");

                entity.Property(e => e.Begbud)
                    .HasColumnName("BEGBUD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Begcr).HasColumnName("BEGCR");

                entity.Property(e => e.Begdr).HasColumnName("BEGDR");

                entity.Property(e => e.Blocked)
                    .HasColumnName("blocked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Class)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CLASS");

                entity.Property(e => e.Controlacct)
                    .HasColumnName("CONTROLACCT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Curbud)
                    .HasColumnName("CURBUD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Curcr).HasColumnName("CURCR");

                entity.Property(e => e.Curdr).HasColumnName("CURDR");

                entity.Property(e => e.Des)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Hassubacct)
                    .HasColumnName("hassubacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Motheracct)
                    .HasColumnName("motheracct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mthacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mthacct");

                entity.Property(e => e.Newbegcr).HasColumnName("NEWBEGCR");

                entity.Property(e => e.Newbegdr).HasColumnName("NEWBEGDR");

                entity.Property(e => e.Oldacct)
                    .HasColumnName("oldacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Oldbud)
                    .HasColumnName("OLDBUD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Oldcr).HasColumnName("OLDCR");

                entity.Property(e => e.Olddr).HasColumnName("OLDDR");

                entity.Property(e => e.Prevbud)
                    .HasColumnName("PREVBUD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Prevcr).HasColumnName("PREVCR");

                entity.Property(e => e.Prevdr).HasColumnName("PREVDR");

                entity.Property(e => e.Rptcat)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RPTCAT");

                entity.Property(e => e.Subacct)
                    .HasColumnName("subacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Systemacct)
                    .HasColumnName("systemacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillgl)
                    .HasColumnName("tillgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Type)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");
            });

            modelBuilder.Entity<Acctcategory1>(entity =>
            {
                entity.HasKey(e => e.Rptcat);

                entity.ToTable("ACCTCATEGORIES");

                entity.Property(e => e.Rptcat)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RPTCAT");

                entity.Property(e => e.Bcode)
                    .HasColumnName("BCODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");
            });

            modelBuilder.Entity<Acctclass>(entity =>
            {
                entity.HasKey(e => new { e.Type, e.Class });

                entity.ToTable("ACCTCLASS");

                entity.Property(e => e.Type)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");

                entity.Property(e => e.Class)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CLASS");

                entity.Property(e => e.Classname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLASSNAME");

                entity.Property(e => e.Typename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");
            });

            modelBuilder.Entity<Acctlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ACCTLIST");

                entity.Property(e => e.Account).HasMaxLength(255);

                entity.Property(e => e.Acct)
                    .HasMaxLength(255)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Class)
                    .HasMaxLength(255)
                    .HasColumnName("CLASS");

                entity.Property(e => e.Des)
                    .HasMaxLength(255)
                    .HasColumnName("DES_");

                entity.Property(e => e.Type)
                    .HasMaxLength(255)
                    .HasColumnName("TYPE");
            });

            modelBuilder.Entity<Acctopen>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ACCTOPEN");

                entity.Property(e => e.Acct)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Acctcatgcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCTCATGCODE");

                entity.Property(e => e.Bank).HasColumnName("bank");

                entity.Property(e => e.Bdgtcat)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("BDGTCAT");

                entity.Property(e => e.Begbud).HasColumnName("BEGBUD");

                entity.Property(e => e.Begcr).HasColumnName("BEGCR");

                entity.Property(e => e.Begdr).HasColumnName("BEGDR");

                entity.Property(e => e.Blocked).HasColumnName("blocked");

                entity.Property(e => e.Class)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CLASS");

                entity.Property(e => e.Controlacct).HasColumnName("CONTROLACCT");

                entity.Property(e => e.Curbud).HasColumnName("CURBUD");

                entity.Property(e => e.Curcr).HasColumnName("CURCR");

                entity.Property(e => e.Curdr).HasColumnName("CURDR");

                entity.Property(e => e.Des)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Hassubacct).HasColumnName("hassubacct");

                entity.Property(e => e.Motheracct).HasColumnName("motheracct");

                entity.Property(e => e.Mthacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mthacct");

                entity.Property(e => e.Newbegcr).HasColumnName("NEWBEGCR");

                entity.Property(e => e.Newbegdr).HasColumnName("NEWBEGDR");

                entity.Property(e => e.Oldacct).HasColumnName("oldacct");

                entity.Property(e => e.Oldbud).HasColumnName("OLDBUD");

                entity.Property(e => e.Oldcr).HasColumnName("OLDCR");

                entity.Property(e => e.Olddr).HasColumnName("OLDDR");

                entity.Property(e => e.Prevbud).HasColumnName("PREVBUD");

                entity.Property(e => e.Prevcr).HasColumnName("PREVCR");

                entity.Property(e => e.Prevdr).HasColumnName("PREVDR");

                entity.Property(e => e.Rptcat)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RPTCAT");

                entity.Property(e => e.Subacct).HasColumnName("subacct");

                entity.Property(e => e.Systemacct).HasColumnName("systemacct");

                entity.Property(e => e.Tillgl)
                    .HasColumnName("tillgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Type)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");
            });

            modelBuilder.Entity<Acctttl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ACCTTTL");

                entity.HasIndex(e => e.Acct, "ACCT_NO")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Acct)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Bdgtcat)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("BDGTCAT");

                entity.Property(e => e.Begcr).HasColumnName("BEGCR");

                entity.Property(e => e.Begdr).HasColumnName("BEGDR");

                entity.Property(e => e.Class)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CLASS");

                entity.Property(e => e.Curcr).HasColumnName("CURCR");

                entity.Property(e => e.Curdr).HasColumnName("CURDR");

                entity.Property(e => e.Des)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Oldcr).HasColumnName("OLDCR");

                entity.Property(e => e.Olddr).HasColumnName("OLDDR");

                entity.Property(e => e.Prevcr).HasColumnName("PREVCR");

                entity.Property(e => e.Prevdr).HasColumnName("PREVDR");

                entity.Property(e => e.Type)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");
            });

            modelBuilder.Entity<Ad1973>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AD1973");

                entity.HasIndex(e => e.Username, "INDXUSER");

                entity.HasIndex(e => new { e.Username, e.CusCode }, "ndxcuscode")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Curend)
                    .HasColumnType("datetime")
                    .HasColumnName("CUREND");

                entity.Property(e => e.Curstart)
                    .HasColumnType("datetime")
                    .HasColumnName("CURSTART");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Dc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DC");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.Ninetyend)
                    .HasColumnType("datetime")
                    .HasColumnName("NINETYEND");

                entity.Property(e => e.Ninetystart)
                    .HasColumnType("datetime")
                    .HasColumnName("NINETYSTART");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Sixtyend)
                    .HasColumnType("datetime")
                    .HasColumnName("SIXTYEND");

                entity.Property(e => e.Sixtystart)
                    .HasColumnType("datetime")
                    .HasColumnName("SIXTYSTART");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Thirtyend)
                    .HasColumnType("datetime")
                    .HasColumnName("THIRTYEND");

                entity.Property(e => e.Thirtystart)
                    .HasColumnType("datetime")
                    .HasColumnName("THIRTYSTART");

                entity.Property(e => e.TransDesc)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Af1973>(entity =>
            {
                entity.HasKey(e => new { e.CusCode, e.Username });

                entity.ToTable("AF1973");

                entity.HasIndex(e => e.Username, "NDXUSER");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Ninetydays)
                    .HasColumnName("NINETYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Onetwenty)
                    .HasColumnName("ONETWENTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sixtydays)
                    .HasColumnName("SIXTYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thirtydays)
                    .HasColumnName("THIRTYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Unallocated)
                    .HasColumnName("UNALLOCATED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Uptothirty)
                    .HasColumnName("UPTOTHIRTY")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Agc1973>(entity =>
            {
                entity.HasKey(e => e.Entrynum);

                entity.ToTable("AGC1973");

                entity.HasIndex(e => e.CusCode, "IX_AGC1973");

                entity.HasIndex(e => e.Username, "IX_AGC1973_1");

                entity.Property(e => e.Entrynum).HasColumnName("entrynum");

                entity.Property(e => e.Ccurr).HasColumnName("ccurr");

                entity.Property(e => e.Cninety).HasColumnName("cninety");

                entity.Property(e => e.Conetwenty).HasColumnName("conetwenty");

                entity.Property(e => e.Csixty).HasColumnName("csixty");

                entity.Property(e => e.Cthirty).HasColumnName("cthirty");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Onetwenty).HasColumnName("onetwenty");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Uptothirty).HasColumnName("uptothirty");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<Age1973>(entity =>
            {
                entity.HasKey(e => e.Agerec);

                entity.ToTable("AGE1973");

                entity.HasIndex(e => e.AgeingEnddate, "IX_AGE1973");

                entity.HasIndex(e => e.Agestamp, "IX_AGE1973_1");

                entity.Property(e => e.Agerec)
                    .HasColumnName("AGEREC")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AgeingEnddate)
                    .HasColumnType("date")
                    .HasColumnName("AGEING_ENDDATE");

                entity.Property(e => e.AgeingEnddatesupp)
                    .HasColumnType("date")
                    .HasColumnName("AGEING_ENDDATESUPP");

                entity.Property(e => e.Agestamp)
                    .HasColumnName("AGESTAMP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastageingrun)
                    .HasColumnType("date")
                    .HasColumnName("lastageingrun");

                entity.Property(e => e.Mycustcurdate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mycustcurdate")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mycustninetydate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mycustninetydate")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mycustonetwentydate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mycustonetwentydate")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mycustsixtydate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mycustsixtydate")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mycustthirtydate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mycustthirtydate")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mysuppcurdate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mysuppcurdate")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mysuppninetydate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mysuppninetydate")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mysupponetwentydate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mysupponetwentydate")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mysuppsixtydate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mysuppsixtydate")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mysuppthirtydate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mysuppthirtydate")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Printlocalcurrencystatement)
                    .HasColumnName("PRINTLOCALCURRENCYSTATEMENT")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Ageingcalc>(entity =>
            {
                entity.HasKey(e => e.Entrynum);

                entity.ToTable("AGEINGCALC");

                entity.HasIndex(e => e.CusCode, "IX_AGEINGCALC");

                entity.HasIndex(e => e.Username, "IX_AGEINGCALC_1");

                entity.Property(e => e.Entrynum).HasColumnName("entrynum");

                entity.Property(e => e.Ccurr).HasColumnName("ccurr");

                entity.Property(e => e.Cninety).HasColumnName("cninety");

                entity.Property(e => e.Conetwenty).HasColumnName("conetwenty");

                entity.Property(e => e.Csixty).HasColumnName("csixty");

                entity.Property(e => e.Cthirty).HasColumnName("cthirty");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Onetwenty).HasColumnName("onetwenty");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Uptothirty).HasColumnName("uptothirty");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<Ageingcredit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AGEINGCREDITS");

                entity.HasIndex(e => e.NumDays, "NumDays")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.Reference)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCE");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate)
                    .HasColumnType("datetime")
                    .HasColumnName("transdate");
            });

            modelBuilder.Entity<Ageingdebit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AGEINGDEBITS");

                entity.HasIndex(e => e.NumDays, "NumDays")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ageingdetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AGEINGDETAILS");

                entity.HasIndex(e => e.Username, "INDXUSER");

                entity.HasIndex(e => new { e.Username, e.CusCode }, "ndxcuscode")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Curend)
                    .HasColumnType("datetime")
                    .HasColumnName("CUREND");

                entity.Property(e => e.Curstart)
                    .HasColumnType("datetime")
                    .HasColumnName("CURSTART");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Dc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DC");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.Ninetyend)
                    .HasColumnType("datetime")
                    .HasColumnName("NINETYEND");

                entity.Property(e => e.Ninetystart)
                    .HasColumnType("datetime")
                    .HasColumnName("NINETYSTART");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Sixtyend)
                    .HasColumnType("datetime")
                    .HasColumnName("SIXTYEND");

                entity.Property(e => e.Sixtystart)
                    .HasColumnType("datetime")
                    .HasColumnName("SIXTYSTART");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Thirtyend)
                    .HasColumnType("datetime")
                    .HasColumnName("THIRTYEND");

                entity.Property(e => e.Thirtystart)
                    .HasColumnType("datetime")
                    .HasColumnName("THIRTYSTART");

                entity.Property(e => e.TransDesc)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<AgeingdetailsSupp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AGEINGDETAILS_SUPP");

                entity.HasIndex(e => e.Username, "NDXUSER");

                entity.HasIndex(e => new { e.Username, e.SuppCode }, "ndxsuppcode")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Curend)
                    .HasColumnType("datetime")
                    .HasColumnName("CUREND");

                entity.Property(e => e.Dc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DC");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Ageingmissing>(entity =>
            {
                entity.HasKey(e => e.Entrynum);

                entity.ToTable("AGEINGMISSING");

                entity.HasIndex(e => new { e.CusCode, e.Username }, "IX_AGEINGMISSING");

                entity.Property(e => e.Entrynum).HasColumnName("entrynum");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<Ageingsummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AGEINGSUMMARY");

                entity.HasIndex(e => e.Username, "NDXUSER");

                entity.HasIndex(e => new { e.CusCode, e.Username }, "xcususer")
                    .IsClustered();

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Ninetydays)
                    .HasColumnName("NINETYDAYS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Onetwenty)
                    .HasColumnName("ONETWENTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Sixtydays)
                    .HasColumnName("SIXTYDAYS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Thirtydays)
                    .HasColumnName("THIRTYDAYS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Unallocated)
                    .HasColumnName("UNALLOCATED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Uptothirty)
                    .HasColumnName("UPTOTHIRTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<AgeingsummarySupp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AGEINGSUMMARY_SUPP");

                entity.HasIndex(e => e.Username, "NDXUSER");

                entity.HasIndex(e => new { e.SuppCode, e.Username }, "xsupuser")
                    .IsClustered();

                entity.Property(e => e.Ninetydays)
                    .HasColumnName("NINETYDAYS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Onetwenty)
                    .HasColumnName("ONETWENTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Sixtydays)
                    .HasColumnName("SIXTYDAYS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Thirtydays)
                    .HasColumnName("THIRTYDAYS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Unallocated)
                    .HasColumnName("UNALLOCATED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Uptothirty)
                    .HasColumnName("UPTOTHIRTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Ageingsummarycredit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AGEINGSUMMARYCREDITS");

                entity.HasIndex(e => e.Username, "NDXUSER");

                entity.HasIndex(e => new { e.Username, e.CusCode }, "NDXUSERCUS")
                    .IsClustered();

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Ninetydays)
                    .HasColumnName("NINETYDAYS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Onetwenty)
                    .HasColumnName("ONETWENTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Sixtydays)
                    .HasColumnName("SIXTYDAYS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Thirtydays)
                    .HasColumnName("THIRTYDAYS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Unallocated)
                    .HasColumnName("UNALLOCATED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Uptothirty)
                    .HasColumnName("UPTOTHIRTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Ageingsummarycredits001>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AGEINGSUMMARYCREDITS001");

                entity.HasIndex(e => e.Username, "NDXUSER");

                entity.HasIndex(e => new { e.Username, e.CusCode }, "NDXUSERCUS")
                    .IsClustered();

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Ninetydays)
                    .HasColumnName("NINETYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Onetwenty)
                    .HasColumnName("ONETWENTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sixtydays)
                    .HasColumnName("SIXTYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thirtydays)
                    .HasColumnName("THIRTYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Unallocated)
                    .HasColumnName("UNALLOCATED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Uptothirty)
                    .HasColumnName("UPTOTHIRTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<AgeingsummarycreditsSupp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AGEINGSUMMARYCREDITS_SUPP");

                entity.HasIndex(e => e.Username, "NDXUSER");

                entity.HasIndex(e => new { e.Username, e.SuppCode }, "NDXUSERSUPP")
                    .IsClustered();

                entity.Property(e => e.Ninetydays)
                    .HasColumnName("NINETYDAYS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Onetwenty)
                    .HasColumnName("ONETWENTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Sixtydays)
                    .HasColumnName("SIXTYDAYS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Thirtydays)
                    .HasColumnName("THIRTYDAYS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Unallocated)
                    .HasColumnName("UNALLOCATED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Uptothirty)
                    .HasColumnName("UPTOTHIRTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Ageingsummaryfinal>(entity =>
            {
                entity.HasKey(e => new { e.CusCode, e.Username });

                entity.ToTable("AGEINGSUMMARYFINAL");

                entity.HasIndex(e => e.Username, "NDXUSER");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Ninetydays)
                    .HasColumnName("NINETYDAYS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Onetwenty)
                    .HasColumnName("ONETWENTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Sixtydays)
                    .HasColumnName("SIXTYDAYS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Thirtydays)
                    .HasColumnName("THIRTYDAYS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Unallocated)
                    .HasColumnName("UNALLOCATED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Uptothirty)
                    .HasColumnName("UPTOTHIRTY")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<AgeingsummaryfinalSupp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AGEINGSUMMARYFINAL_SUPP");

                entity.HasIndex(e => new { e.SuppCode, e.Username }, "IX_AGEINGSUMMARYFINAL_SUPP");

                entity.HasIndex(e => e.Username, "NDXUSER");

                entity.Property(e => e.Ninetydays)
                    .HasColumnName("NINETYDAYS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Onetwenty)
                    .HasColumnName("ONETWENTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Sixtydays)
                    .HasColumnName("SIXTYDAYS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Thirtydays)
                    .HasColumnName("THIRTYDAYS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Unallocated)
                    .HasColumnName("UNALLOCATED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Uptothirty)
                    .HasColumnName("UPTOTHIRTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Ageingsummarykeeper>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AGEINGSUMMARYKEEPER");

                entity.HasIndex(e => e.Username, "NDXUSER");

                entity.HasIndex(e => new { e.CusCode, e.Username }, "xcususer")
                    .IsClustered();

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Ninetydays)
                    .HasColumnName("NINETYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Onetwenty)
                    .HasColumnName("ONETWENTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sixtydays)
                    .HasColumnName("SIXTYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thirtydays)
                    .HasColumnName("THIRTYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Unallocated)
                    .HasColumnName("UNALLOCATED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Uptothirty)
                    .HasColumnName("UPTOTHIRTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Agestamp1973>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AGESTAMP1973");

                entity.HasIndex(e => e.CusCode, "IX_AGESTAMP1973")
                    .IsClustered();

                entity.Property(e => e.CusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");
            });

            modelBuilder.Entity<AltInventory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ALT_INVENTORY");

                entity.Property(e => e.AltCode)
                    .HasMaxLength(15)
                    .HasColumnName("ALT_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(15)
                    .HasColumnName("INV_CODE");
            });

            modelBuilder.Entity<As1973>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AS1973");

                entity.HasIndex(e => e.Username, "NDXUSER");

                entity.HasIndex(e => new { e.CusCode, e.Username }, "xcususer")
                    .IsClustered();

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Ninetydays)
                    .HasColumnName("NINETYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Onetwenty)
                    .HasColumnName("ONETWENTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sixtydays)
                    .HasColumnName("SIXTYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thirtydays)
                    .HasColumnName("THIRTYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Unallocated)
                    .HasColumnName("UNALLOCATED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Uptothirty)
                    .HasColumnName("UPTOTHIRTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Asc1973>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ASC1973");

                entity.HasIndex(e => e.Username, "NDXUSER");

                entity.HasIndex(e => new { e.Username, e.CusCode }, "NDXUSERCUS")
                    .IsClustered();

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Ninetydays)
                    .HasColumnName("NINETYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Onetwenty)
                    .HasColumnName("ONETWENTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sixtydays)
                    .HasColumnName("SIXTYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thirtydays)
                    .HasColumnName("THIRTYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Unallocated)
                    .HasColumnName("UNALLOCATED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Uptothirty)
                    .HasColumnName("UPTOTHIRTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Ax080818>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AX080818");

                entity.Property(e => e.VerDate).IsRequired();

                entity.Property(e => e.VerNo).IsRequired();
            });

            modelBuilder.Entity<Ax080818list>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AX080818LIST");

                entity.Property(e => e.VerDate).IsRequired();

                entity.Property(e => e.VerNo).IsRequired();
            });

            modelBuilder.Entity<Bank>(entity =>
            {
                entity.HasKey(e => e.BankAcct)
                    .IsClustered(false);

                entity.ToTable("banks");

                entity.HasIndex(e => e.BankGl, "bank_gl")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_acct");

                entity.Property(e => e.BankGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("bank_gl");

                entity.Property(e => e.BankName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("bank_name");

                entity.Property(e => e.Banksystem)
                    .HasColumnName("banksystem")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blocked)
                    .HasColumnName("blocked")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Cashlimit)
                    .HasColumnName("cashlimit")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cbstyle)
                    .HasColumnName("cbstyle")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.GlBankcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("gl_bankcode");

                entity.Property(e => e.Isbank)
                    .HasColumnName("ISBANK")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Pettycash)
                    .HasColumnName("pettycash")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Postdated).HasColumnName("POSTDATED");
            });

            modelBuilder.Entity<BankReconciliation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BANK_RECONCILIATION");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ChequeDate).HasColumnType("datetime");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Descrip)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DocNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EntryCleared)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PayType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RctDate).HasColumnType("datetime");

                entity.Property(e => e.RctName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ref)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BankingHd>(entity =>
            {
                entity.HasKey(e => e.BnkDetnum)
                    .IsClustered(false);

                entity.ToTable("BANKING_HD");

                entity.HasIndex(e => e.BankAcct, "ndxBankAcct")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Currencycode, "ndxRptCurrency")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxRptCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Gcode, "ndxRptGCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SuppCode, "ndxRptSuppCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BnkDetnum, "pay_detnum")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BnkDetnum).HasColumnName("BNK_detnum");

                entity.Property(e => e.Admentrynum)
                    .HasColumnName("admentrynum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Admid)
                    .HasColumnName("admid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Amountinwords)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("amountinwords");

                entity.Property(e => e.Amountpaid).HasColumnName("amountpaid");

                entity.Property(e => e.Appcomments)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("appcomments")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Appstat)
                    .HasColumnName("appstat")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Appuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("appuser")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_acct");

                entity.Property(e => e.BankBnkDetnum)
                    .HasColumnName("bankBNK_detnum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BankbankAcct)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("bankbank_acct")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BankbankName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("bankbank_name")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Banktillno)
                    .HasColumnName("banktillno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Banktillsessno)
                    .HasColumnName("banktillsessno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BnkDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BNK_date");

                entity.Property(e => e.BnkNum).HasColumnName("BNK_NUM");

                entity.Property(e => e.BnkNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BNK_Number");

                entity.Property(e => e.BnkTax)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BNK_tax");

                entity.Property(e => e.Bounced).HasColumnName("bounced");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashier)
                    .HasColumnName("cashier")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashsale)
                    .HasColumnName("cashsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHQ_DATE");

                entity.Property(e => e.Clallocnum)
                    .HasColumnName("clallocnum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cleared).HasColumnName("cleared");

                entity.Property(e => e.ClearingDate).HasColumnType("datetime");

                entity.Property(e => e.Clearingamount).HasColumnName("clearingamount");

                entity.Property(e => e.Clinic)
                    .HasColumnName("clinic")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.Contrabcode)
                    .HasColumnName("contrabcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("currencycode");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.DependNo)
                    .HasColumnName("DEPEND_NO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Deposit)
                    .HasColumnName("deposit")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Discount).HasColumnName("discount");

                entity.Property(e => e.Docbanked)
                    .HasColumnName("docbanked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Docselect)
                    .HasColumnName("docselect")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DoctNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("doct_num");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.ExclAmt)
                    .HasColumnName("excl_amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fromhistory)
                    .HasColumnName("FROMHISTORY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GCODE");

                entity.Property(e => e.Gcs)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("GCS");

                entity.Property(e => e.Glrefcode).HasColumnName("glrefcode");

                entity.Property(e => e.Holding).HasColumnName("HOLDING");

                entity.Property(e => e.Homeamountpaid).HasColumnName("homeamountpaid");

                entity.Property(e => e.Inpatient)
                    .HasColumnName("INPATIENT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Matched).HasColumnName("matched");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("memberno")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Payfor)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("payfor");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("paymode");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reference");

                entity.Property(e => e.Referenceother)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("referenceother")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Revdoc)
                    .HasColumnName("revdoc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RptDetnum).HasColumnName("rpt_detnum");

                entity.Property(e => e.Rptcounter).HasColumnName("RPTCOUNTER");

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.ScJDetnum)
                    .HasColumnName("sc_j_detnum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("supp_code");

                entity.Property(e => e.TaxAmt)
                    .HasColumnName("tax_amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tax_code")
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.Theircurrencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("theircurrencycode");

                entity.Property(e => e.Tillno)
                    .HasColumnName("TILLNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillsessno)
                    .HasColumnName("TILLSESSNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Usin).HasColumnName("usin_");

                entity.Property(e => e.Visitentrynum)
                    .HasColumnName("VISITENTRYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Visitid)
                    .HasColumnName("VISITID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Banktran>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BANKTRANS");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ChequeDate).HasColumnType("datetime");

                entity.Property(e => e.Comments)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descrip)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DocNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EntryCleared)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PayType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pos).HasColumnName("POS");

                entity.Property(e => e.RctDate).HasColumnType("datetime");

                entity.Property(e => e.RctName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Ref)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Barcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BARCODES");

                entity.HasIndex(e => e.Barcode1, "IX_BARCODES")
                    .IsUnique();

                entity.HasIndex(e => e.InvCode, "xinv_code");

                entity.Property(e => e.Barcode1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BARCODE");

                entity.Property(e => e.BarcodeDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BARCODE_DATE");

                entity.Property(e => e.Batched)
                    .HasColumnName("batched")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENTRYDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Entrynum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ENTRYNUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UPDATEUSER");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Batchdet>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BATCHDET");

                entity.HasIndex(e => e.Myid, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Acct)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Batch)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("BATCH");

                entity.Property(e => e.Credit).HasColumnName("CREDIT");

                entity.Property(e => e.Dat)
                    .HasColumnType("datetime")
                    .HasColumnName("DAT_");

                entity.Property(e => e.Debit).HasColumnName("DEBIT");

                entity.Property(e => e.Des)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Invc)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("INVC");

                entity.Property(e => e.Myid).HasColumnName("myid");

                entity.Property(e => e.Period)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Reversing).HasColumnName("REVERSING");
            });

            modelBuilder.Entity<BatchedBankRecon>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BatchedBankRecon");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Acct");

                entity.Property(e => e.BatchDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Batch_Date");
            });

            modelBuilder.Entity<Batchttl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BATCHTTL");

                entity.HasIndex(e => e.Batch, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Batch)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("BATCH");

                entity.Property(e => e.Batchtype)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("BATCHTYPE");

                entity.Property(e => e.Closing).HasColumnName("CLOSING");

                entity.Property(e => e.Credits).HasColumnName("CREDITS");

                entity.Property(e => e.Dat)
                    .HasColumnType("datetime")
                    .HasColumnName("DAT_");

                entity.Property(e => e.Debits).HasColumnName("DEBITS");

                entity.Property(e => e.Period)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Prnjrnl).HasColumnName("PRNJRNL");

                entity.Property(e => e.Total).HasColumnName("TOTAL");
            });

            modelBuilder.Entity<Bdgtcat>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BDGTCAT");

                entity.HasIndex(e => new { e.Bdgtcat1, e.Des }, "BDGTCAT")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Bdgtcat1)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("BDGTCAT");

                entity.Property(e => e.Des)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DES_");
            });

            modelBuilder.Entity<Bill>(entity =>
            {
                entity.HasKey(e => e.BillCode)
                    .HasName("PK_BILL_1");

                entity.ToTable("BILL");

                entity.Property(e => e.BillCode).HasColumnName("BILL_CODE");

                entity.Property(e => e.BillName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BILL_NAME");
            });

            modelBuilder.Entity<Billcalendar>(entity =>
            {
                entity.HasKey(e => e.BillNumber);

                entity.ToTable("BILLCALENDAR");

                entity.Property(e => e.BillNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BILL_number");

                entity.Property(e => e.BillCode).HasColumnName("BILL_code");

                entity.Property(e => e.BillNum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BILL_num");

                entity.Property(e => e.Completenotes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("completenotes");

                entity.Property(e => e.Disable)
                    .HasColumnName("disable")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Enddate)
                    .HasColumnType("datetime")
                    .HasColumnName("enddate");

                entity.Property(e => e.Endtime)
                    .HasColumnType("datetime")
                    .HasColumnName("endtime");

                entity.Property(e => e.Endtimecaption)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("endtimecaption");

                entity.Property(e => e.Eventnotes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("eventnotes");

                entity.Property(e => e.OrigEvent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("orig_event");

                entity.Property(e => e.RecurrCode).HasColumnName("recurr_code");

                entity.Property(e => e.ReminderCode).HasColumnName("reminder_code");

                entity.Property(e => e.Startdate)
                    .HasColumnType("datetime")
                    .HasColumnName("startdate");

                entity.Property(e => e.Starttime)
                    .HasColumnType("datetime")
                    .HasColumnName("starttime");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Billcontact>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BILLCONTACTS");

                entity.Property(e => e.BillCode).HasColumnName("BILL_CODE");

                entity.Property(e => e.BillNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BILL_number");

                entity.Property(e => e.CategoryCode).HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.Chkcomplete)
                    .HasColumnName("chkcomplete")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Completenotes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("completenotes");

                entity.Property(e => e.CreditCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CREDIT_CODE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Entrynum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("entrynum");

                entity.Property(e => e.ProvinceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PROVINCE_CODE");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales_Code");

                entity.Property(e => e.TownCode).HasColumnName("TOWN_CODE");
            });

            modelBuilder.Entity<Billreminder>(entity =>
            {
                entity.HasKey(e => new { e.BillNumber, e.ReminderCode });

                entity.ToTable("BILLREMINDER");

                entity.Property(e => e.BillNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BILL_number");

                entity.Property(e => e.ReminderCode).HasColumnName("reminder_code");

                entity.Property(e => e.Dismiss)
                    .HasColumnName("dismiss")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Entrynum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("entrynum");

                entity.Property(e => e.RecurrCode).HasColumnName("recurr_code");

                entity.Property(e => e.RemDate)
                    .HasColumnType("datetime")
                    .HasColumnName("REM_DATE");

                entity.Property(e => e.RemTime)
                    .HasColumnType("datetime")
                    .HasColumnName("REM_TIME");
            });

            modelBuilder.Entity<BmtC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("BMT_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<BmtDt>(entity =>
            {
                entity.HasKey(e => e.BmtDetNum);

                entity.ToTable("BMT_DT");

                entity.Property(e => e.BmtDetNum).HasColumnName("BMT_DET_NUM");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BmtNum).HasColumnName("BMT_NUM");

                entity.Property(e => e.Bonus)
                    .HasColumnName("BONUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Detpending).HasColumnName("DETPENDING");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Inclusive)
                    .HasColumnName("inclusive")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvSubgroupname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_subgroupname")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Metquantity).HasColumnName("METQUANTITY");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Priceincl)
                    .HasColumnName("priceincl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Remquantity).HasColumnName("REMQUANTITY");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("tax_code");

                entity.Property(e => e.Taxamt)
                    .HasColumnName("taxamt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<BmtHd>(entity =>
            {
                entity.HasKey(e => new { e.BmtNum, e.Bcode })
                    .IsClustered(false);

                entity.ToTable("BMT_HD");

                entity.Property(e => e.BmtNum).HasColumnName("BMT_NUM");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Batched).HasColumnName("BATCHED");

                entity.Property(e => e.BmtD).HasColumnName("BMT_D");

                entity.Property(e => e.BmtDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BMT_DATE");

                entity.Property(e => e.BmtNet).HasColumnName("BMT_NET");

                entity.Property(e => e.BmtNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BMT_number");

                entity.Property(e => e.BmtTotal).HasColumnName("BMT_TOTAL");

                entity.Property(e => e.BmtVat).HasColumnName("BMT_VAT");

                entity.Property(e => e.BmtinvCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BMTINV_CODE");

                entity.Property(e => e.BmtinvName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BMTINV_NAME");

                entity.Property(e => e.Bmtpackqty)
                    .HasColumnName("BMTPACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bmtpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BMTPARTWHOLE")
                    .IsFixedLength(true);

                entity.Property(e => e.Bmtpwqty)
                    .HasColumnName("BMTPWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bmtquantity).HasColumnName("BMTQUANTITY");

                entity.Property(e => e.Bmtunit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BMTUNIT");

                entity.Property(e => e.Bomdet)
                    .HasColumnName("bomdet")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchfrom)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHFROM");

                entity.Property(e => e.Cancelled).HasColumnName("CANCELLED");

                entity.Property(e => e.Comments)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.ContName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cont_name");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DELIVERY_DATE");

                entity.Property(e => e.Done).HasColumnName("DONE");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.Grntype).HasColumnName("GRNTYPE");

                entity.Property(e => e.Invtype).HasColumnName("INVTYPE");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("LASTLINENO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PayTerms)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAY_TERMS");

                entity.Property(e => e.Pending).HasColumnName("pending");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("printcopy")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.SupRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUP_REF");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Bmtbom>(entity =>
            {
                entity.HasKey(e => new { e.Bomdet, e.Bomdetnum });

                entity.ToTable("BMTBOM");

                entity.Property(e => e.Bomdet).HasColumnName("BOMDET");

                entity.Property(e => e.Bomdetnum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BOMDETNUM");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BmtinvCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BMTINV_CODE");

                entity.Property(e => e.BmtinvName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BMTINV_NAME");

                entity.Property(e => e.Bmtpackqty)
                    .HasColumnName("BMTPACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bmtpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BMTPARTWHOLE")
                    .IsFixedLength(true);

                entity.Property(e => e.Bmtpwqty)
                    .HasColumnName("BMTPWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bmtquantity).HasColumnName("BMTQUANTITY");

                entity.Property(e => e.Bmtunit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BMTUNIT");
            });

            modelBuilder.Entity<Borderlog>(entity =>
            {
                entity.HasKey(e => new { e.Bcode, e.BorderNum });

                entity.ToTable("BORDERLOG");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.BorderNum).HasColumnName("BORDER_NUM");

                entity.Property(e => e.BorderDate)
                    .HasColumnType("date")
                    .HasColumnName("BORDER_DATE");

                entity.Property(e => e.Bordertobcode).HasColumnName("BORDERTOBCODE");

                entity.Property(e => e.Bordertoname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BORDERTONAME");

                entity.Property(e => e.Logref)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LOGREF");

                entity.Property(e => e.Override).HasColumnName("OVERRIDE");

                entity.Property(e => e.Overridecomments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("OVERRIDECOMMENTS");

                entity.Property(e => e.Overridedate)
                    .HasColumnType("datetime")
                    .HasColumnName("OVERRIDEDATE");
            });

            modelBuilder.Entity<Bordersetup>(entity =>
            {
                entity.HasKey(e => e.Bcode);

                entity.ToTable("BORDERSETUP");

                entity.Property(e => e.Bcode)
                    .ValueGeneratedNever()
                    .HasColumnName("BCODE");

                entity.Property(e => e.Activate)
                    .HasColumnName("ACTIVATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Autofillhybrid)
                    .HasColumnName("AUTOFILLHYBRID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Branchtobcode).HasColumnName("BRANCHTOBCODE");

                entity.Property(e => e.Branchtoname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHTONAME");

                entity.Property(e => e.Daytorun)
                    .HasColumnName("DAYTORUN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Excludenotsold)
                    .HasColumnName("EXCLUDENOTSOLD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forceautoorder)
                    .HasColumnName("FORCEAUTOORDER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastrundate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTRUNDATE");

                entity.Property(e => e.Nextrundate)
                    .HasColumnType("datetime")
                    .HasColumnName("NEXTRUNDATE");

                entity.Property(e => e.Orderdays)
                    .HasColumnName("ORDERDAYS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Saledays)
                    .HasColumnName("SALEDAYS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Saleperc)
                    .HasColumnName("SALEPERC")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.Stockorderonly)
                    .HasColumnName("STOCKORDERONLY")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Branch>(entity =>
            {
                entity.HasKey(e => e.Branchcode);

                entity.ToTable("BRANCH");

                entity.HasIndex(e => e.Bcode, "IX_BRANCH")
                    .IsUnique();

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Acct)
                    .HasColumnName("acct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Blockbranchorder)
                    .HasColumnName("blockbranchorder")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockbranchreceipt)
                    .HasColumnName("blockbranchreceipt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockbranchtransfer)
                    .HasColumnName("blockbranchtransfer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockcashinvoice)
                    .HasColumnName("blockcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockcashsale)
                    .HasColumnName("blockcashsale")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockcnote)
                    .HasColumnName("blockcnote")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockcustomer)
                    .HasColumnName("blockcustomer")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockgret)
                    .HasColumnName("blockgret")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockgrn)
                    .HasColumnName("blockgrn")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockinventory)
                    .HasColumnName("blockinventory")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockinvjournals)
                    .HasColumnName("blockinvjournals")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockpayment)
                    .HasColumnName("blockpayment")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockporder)
                    .HasColumnName("blockporder")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockquotation)
                    .HasColumnName("blockquotation")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockreceipt)
                    .HasColumnName("blockreceipt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blocksalesinvoice)
                    .HasColumnName("blocksalesinvoice")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blocksuppinvoice)
                    .HasColumnName("blocksuppinvoice")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blocksupplier)
                    .HasColumnName("blocksupplier")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Bmtprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("BMTPREFIX");

                entity.Property(e => e.Borderpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("borderpartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.BranchIp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_IP");

                entity.Property(e => e.BranchName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_NAME");

                entity.Property(e => e.Branchcostacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCOSTACCT");

                entity.Property(e => e.Branchdirect)
                    .HasColumnName("branchdirect")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchexport)
                    .HasColumnName("branchexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchgoodsacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHGOODSACCT");

                entity.Property(e => e.Branchorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("branchorderprefix");

                entity.Property(e => e.Branchreceiptprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("branchreceiptprefix")
                    .HasDefaultValueSql("('ARN')");

                entity.Property(e => e.Branchserverpath)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHSERVERPATH");

                entity.Property(e => e.Branchtransferprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("branchtransferprefix");

                entity.Property(e => e.Brandgenericsale)
                    .HasColumnName("brandgenericsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Brexpupdate)
                    .HasColumnName("brexpupdate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Brnpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("brnpartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Btranspartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("btranspartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Cashinvoicepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cashinvoicepartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Cashinvoiceprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cashinvoiceprefix");

                entity.Property(e => e.Cashsaleprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cashsaleprefix")
                    .HasDefaultValueSql("('CS')");

                entity.Property(e => e.Cbrow)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CBROW");

                entity.Property(e => e.Creditnoteprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("creditnoteprefix");

                entity.Property(e => e.Cstctr)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CSTCTR")
                    .IsFixedLength(true);

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Custexport)
                    .HasColumnName("custexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Custexpupdate)
                    .HasColumnName("custexpupdate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Databasename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DATABASENAME");

                entity.Property(e => e.Datasourcename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("datasourcename");

                entity.Property(e => e.DefLoc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DEF_LOC");

                entity.Property(e => e.Defpricingmode)
                    .HasColumnName("defpricingmode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Defpricingmodecash)
                    .HasColumnName("defpricingmodecash")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Defpricingmodecashinvoice)
                    .HasColumnName("defpricingmodecashinvoice")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Enabled)
                    .HasColumnName("ENABLED")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.ExpInvCustDiscount)
                    .HasColumnName("expInvCustDiscount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Glexport)
                    .HasColumnName("glexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Glexpupdate)
                    .HasColumnName("glexpupdate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Goodsreceivedprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("goodsreceivedprefix");

                entity.Property(e => e.Goodsreturnedprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("goodsreturnedprefix");

                entity.Property(e => e.ImpInvAll)
                    .HasColumnName("impInvALL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImpInvCustDiscount)
                    .HasColumnName("impInvCustDiscount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImpInvDesc)
                    .HasColumnName("impInvDesc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImpInvFormulation)
                    .HasColumnName("impInvFormulation")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImpInvMainclass)
                    .HasColumnName("impInvMainclass")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImpInvProdClass)
                    .HasColumnName("impInvProdClass")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImpInvShelf)
                    .HasColumnName("impInvShelf")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImpInventory)
                    .HasColumnName("impInventory")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Importprices)
                    .HasColumnName("importprices")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Importpricesavgcost)
                    .HasColumnName("importpricesavgcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Importpriceslstcost)
                    .HasColumnName("importpriceslstcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Integrated)
                    .HasColumnName("integrated")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Invexport)
                    .HasColumnName("invexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invexpupdate)
                    .HasColumnName("invexpupdate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invoicepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("invoicepartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Journalpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("journalpartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Kahawadirect)
                    .HasColumnName("kahawadirect")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahawalink)
                    .HasColumnName("kahawalink")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahbranch)
                    .HasColumnName("kahbranch")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahcashprice)
                    .HasColumnName("kahcashprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahcashpricepromo)
                    .HasColumnName("kahcashpricepromo")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahcustomer)
                    .HasColumnName("kahcustomer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahgl)
                    .HasColumnName("kahgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahinventory)
                    .HasColumnName("kahinventory")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahmembers)
                    .HasColumnName("kahmembers")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahprices)
                    .HasColumnName("kahprices")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahspprice)
                    .HasColumnName("kahspprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahsupplier)
                    .HasColumnName("kahsupplier")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Locationreturnprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("locationreturnprefix")
                    .HasDefaultValueSql("('RET')");

                entity.Property(e => e.Locationtransferprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("locationtransferprefix")
                    .HasDefaultValueSql("('ALT')");

                entity.Property(e => e.Lockdefpricingmode)
                    .HasColumnName("lockdefpricingmode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockdefpricingmodecash)
                    .HasColumnName("lockdefpricingmodecash")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockdefpricingmodecashinvoice)
                    .HasColumnName("lockdefpricingmodecashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholeborder)
                    .HasColumnName("lockpartwholeborder")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholebrn)
                    .HasColumnName("lockpartwholebrn")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholebtrans)
                    .HasColumnName("lockpartwholebtrans")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholecashinvoice)
                    .HasColumnName("lockpartwholecashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholeinvoice)
                    .HasColumnName("lockpartwholeinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholejournal)
                    .HasColumnName("lockpartwholejournal")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholesale)
                    .HasColumnName("lockpartwholesale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholestocktake)
                    .HasColumnName("lockpartwholestocktake")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mainbranch).HasColumnName("MAINBRANCH");

                entity.Property(e => e.Mnfprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MNFPREFIX");

                entity.Property(e => e.NextBmtNum)
                    .HasColumnName("nextBMT_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextMnfNum)
                    .HasColumnName("nextMNF_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextbmrdet)
                    .HasColumnName("nextbmrdet")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextbomdet)
                    .HasColumnName("nextbomdet")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextborderNum)
                    .HasColumnName("nextborder_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbrepNum)
                    .HasColumnName("nextbrep_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbrnNum)
                    .HasColumnName("nextbrn_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbtransNum)
                    .HasColumnName("nextbtrans_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcinvNum)
                    .HasColumnName("nextcinv_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcnoteDetNum)
                    .HasColumnName("nextcnote_det_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcnoteNum)
                    .HasColumnName("nextcnote_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcsaleDetNum)
                    .HasColumnName("nextcsale_det_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcsaleNum)
                    .HasColumnName("NEXTCSALE_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextgretNum)
                    .HasColumnName("NEXTGRET_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextgretdetnum)
                    .HasColumnName("nextgretdetnum")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextgrnNum)
                    .HasColumnName("NEXTGRN_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextgrndetnum)
                    .HasColumnName("nextgrndetnum")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextibiNum)
                    .HasColumnName("NEXTIBI_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextijrnnum)
                    .HasColumnName("NEXTIJRNNUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextinvjNum)
                    .HasColumnName("NEXTINVJ_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextjournNum)
                    .HasColumnName("NEXTJOURN_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextmpickno)
                    .HasColumnName("NEXTMPICKNO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextnoncnoteNum)
                    .HasColumnName("nextnoncnote_num")
                    .HasDefaultValueSql("((60000000))");

                entity.Property(e => e.NextnonregcashinvNum)
                    .HasColumnName("nextnonregcashinv_num")
                    .HasDefaultValueSql("((70000000))");

                entity.Property(e => e.NextnonreginvNum)
                    .HasColumnName("nextnonreginv_num")
                    .HasDefaultValueSql("((60000000))");

                entity.Property(e => e.Nextpaydetnum)
                    .HasColumnName("nextpaydetnum")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextpayentrynum)
                    .HasColumnName("nextpayentrynum")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextporderNum)
                    .HasColumnName("NEXTPORDER_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextporderdetnum)
                    .HasColumnName("nextporderdetnum")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextprelponum)
                    .HasColumnName("NEXTPRELPONUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextquoNum)
                    .HasColumnName("NEXTQUO_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextreqNum)
                    .HasColumnName("NEXTreq_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextretNum)
                    .HasColumnName("Nextret_num")
                    .HasDefaultValueSql("((50000000))");

                entity.Property(e => e.Nextrptdetnum)
                    .HasColumnName("nextrptdetnum")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextrptentrynum)
                    .HasColumnName("nextrptentrynum")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsaleinvDetNum)
                    .HasColumnName("nextsaleinv_det_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsaleinvNum)
                    .HasColumnName("nextsaleinv_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextscjournNum)
                    .HasColumnName("nextscjourn_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsinvNum)
                    .HasColumnName("NEXTSINV_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextsinvdetnum)
                    .HasColumnName("nextsinvdetnum")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsoNum)
                    .HasColumnName("NEXTSO_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nonregcashinvprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("nonregcashinvprefix")
                    .HasDefaultValueSql("('XNJ')");

                entity.Property(e => e.Nonregcnoteprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("nonregcnoteprefix")
                    .HasDefaultValueSql("('XNC')");

                entity.Property(e => e.Nonreginvprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("nonreginvprefix")
                    .HasDefaultValueSql("('XNI')");

                entity.Property(e => e.Openstock)
                    .HasColumnName("openstock")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Priceexport)
                    .HasColumnName("priceexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Purchaseorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("purchaseorderprefix");

                entity.Property(e => e.Quotationprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("quotationprefix");

                entity.Property(e => e.Reqprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("reqprefix")
                    .HasDefaultValueSql("('ARQ')");

                entity.Property(e => e.Saleinvoiceprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("saleinvoiceprefix");

                entity.Property(e => e.Salepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("salepartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Salesorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("salesorderprefix");

                entity.Property(e => e.Showallcustomer)
                    .HasColumnName("SHOWALLCUSTOMER")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Showallcustomertrans)
                    .HasColumnName("SHOWALLCUSTOMERTRANS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Stocktakepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("stocktakepartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("supp_code");

                entity.Property(e => e.Suppexport)
                    .HasColumnName("suppexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Suppexpupdate)
                    .HasColumnName("suppexpupdate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Supplierinvoiceprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("supplierinvoiceprefix");

                entity.Property(e => e.Transferbcode)
                    .HasColumnName("TRANSFERBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transferpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("transferpartwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<BranchItem>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.InvCode })
                    .IsClustered(false);

                entity.ToTable("BRANCH_ITEMS");

                entity.HasIndex(e => new { e.Branchcode, e.InvCode }, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Branchcode, "ndxSuppCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.DiscountAvailable)
                    .HasColumnName("discount_available")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InvCode1)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE1");

                entity.Property(e => e.LastOrdered)
                    .HasColumnName("LAST_ORDERED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Lastdiscount)
                    .HasColumnName("LASTDISCOUNT")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Lastprice)
                    .HasColumnName("LASTPRICE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PreferredPrice)
                    .HasColumnName("PREFERRED_PRICE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Price)
                    .HasColumnName("PRICE")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<BranchinDt>(entity =>
            {
                entity.HasKey(e => new { e.BrinDetNum, e.Bcode })
                    .HasName("IX_BRANCHIN_DT_CRUD");

                entity.ToTable("BRANCHIN_DT");

                entity.Property(e => e.BrinDetNum).HasColumnName("BRIN_DET_NUM");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Bcodefrom)
                    .HasColumnName("BCODEFROM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonus)
                    .HasColumnName("BONUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.BorderDetNum)
                    .HasColumnName("Border_DET_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BrinNum).HasColumnName("BRIN_NUM");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Detpending).HasColumnName("DETPENDING");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Metquantity).HasColumnName("METQUANTITY");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Remquantity).HasColumnName("REMQUANTITY");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("tax_code");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<BranchinHd>(entity =>
            {
                entity.HasKey(e => new { e.BrinNum, e.Bcode })
                    .HasName("IX_BRANCHIN_HD_CRUD");

                entity.ToTable("BRANCHIN_HD");

                entity.Property(e => e.BrinNum).HasColumnName("BRIN_NUM");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Batched).HasColumnName("BATCHED");

                entity.Property(e => e.Bcodefrom)
                    .HasColumnName("BCODEFROM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchfrom)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHFROM");

                entity.Property(e => e.BrinD).HasColumnName("BRIN_D");

                entity.Property(e => e.BrinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BRIN_DATE");

                entity.Property(e => e.BrinNet).HasColumnName("BRIN_NET");

                entity.Property(e => e.BrinNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRIN_number");

                entity.Property(e => e.BrinTotal).HasColumnName("BRIN_TOTAL");

                entity.Property(e => e.BrinVat).HasColumnName("BRIN_VAT");

                entity.Property(e => e.Cancelled).HasColumnName("CANCELLED");

                entity.Property(e => e.Comments)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.ContName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cont_name");

                entity.Property(e => e.ContNum).HasColumnName("cont_num");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DELIVERY_DATE");

                entity.Property(e => e.Done).HasColumnName("DONE");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.GrnNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("grn_number");

                entity.Property(e => e.Grntype).HasColumnName("GRNTYPE");

                entity.Property(e => e.Invtype).HasColumnName("INVTYPE");

                entity.Property(e => e.Kahapi)
                    .HasColumnName("kahapi")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("LASTLINENO")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PayTerms)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAY_TERMS");

                entity.Property(e => e.Pending).HasColumnName("pending");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.SupRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUP_REF");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Branchinbtran>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BRANCHINBTRANS");

                entity.HasIndex(e => new { e.BorderNumber, e.BorderNum, e.BranchId, e.BorderUser }, "IX_BRANCHINBTRANS")
                    .IsUnique();

                entity.Property(e => e.Autobtrnum)
                    .HasColumnName("AUTOBTRNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BorderDate).HasColumnType("datetime");

                entity.Property(e => e.BorderNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BorderUser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BranchFrom)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BtransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BTRANS_DATE");

                entity.Property(e => e.BtransNum).HasColumnName("BTRANS_NUM");

                entity.Property(e => e.BtransNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BTRANS_number");

                entity.Property(e => e.Btrposted)
                    .HasColumnName("BTRPOSTED")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Branchinjoin>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BRANCHINJOIN");

                entity.HasIndex(e => new { e.BorderNum, e.BranchId, e.DetNum, e.BorderUser }, "IX_BRANCHINJOIN")
                    .IsUnique();

                entity.HasIndex(e => e.BorderUser, "IX_BRANCHINJOIN_1");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.BorderDate).HasColumnType("datetime");

                entity.Property(e => e.BorderNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BorderUser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BranchFrom)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BranchFromCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DocEntryNo).ValueGeneratedOnAdd();

                entity.Property(e => e.Findme)
                    .HasColumnName("FINDME")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Getsel)
                    .HasColumnName("GETSEL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InDetNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ItemName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPack).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemStock).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemStockPw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ItemStockPW")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LineDisc)
                    .HasColumnName("line_disc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OrdBal).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrdBalPw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OrdBalPW");

                entity.Property(e => e.OrdPw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OrdPW");

                entity.Property(e => e.OrdQty).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrdSupplPw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OrdSupplPW");

                entity.Property(e => e.Orderqty)
                    .HasColumnName("ORDERQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Orderqtypw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDERQTYPW");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("tax_code")
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.Varianceqty).HasColumnName("VARIANCEQTY");

                entity.Property(e => e.Varianceqtypw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VARIANCEQTYPW");
            });

            modelBuilder.Entity<Branchinlpodt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BRANCHINLPODT");

                entity.HasIndex(e => new { e.BorderNum, e.BranchId, e.InDetNum, e.ItemCode }, "IX_BRANCHINLPODT")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.BorderDate).HasColumnType("datetime");

                entity.Property(e => e.BorderNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BorderUser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BranchFrom)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BranchFromCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Findme)
                    .HasColumnName("FINDME")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Getsel)
                    .HasColumnName("GETSEL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InDetNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ItemName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPack).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemStock).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemStockPw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ItemStockPW")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LineDisc)
                    .HasColumnName("line_disc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OrdBal).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrdBalPw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OrdBalPW");

                entity.Property(e => e.OrdPw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OrdPW");

                entity.Property(e => e.OrdQty).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrdSupplPw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OrdSupplPW");

                entity.Property(e => e.Orderqty)
                    .HasColumnName("ORDERQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Orderqtypw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDERQTYPW");

                entity.Property(e => e.PorderNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PORDER_NUMBER");

                entity.Property(e => e.Spvcomplete)
                    .HasColumnName("SPVCOMPLETE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("tax_code")
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.Varianceqty).HasColumnName("VARIANCEQTY");

                entity.Property(e => e.Varianceqtypw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VARIANCEQTYPW");
            });

            modelBuilder.Entity<Branchinlpohd>(entity =>
            {
                entity.HasKey(e => new { e.Prelponum, e.Prelpobcode, e.ItemCode });

                entity.ToTable("BRANCHINLPOHD");

                entity.Property(e => e.Prelponum).HasColumnName("PRELPONUM");

                entity.Property(e => e.Prelpobcode).HasColumnName("PRELPOBCODE");

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ItemName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPack).HasDefaultValueSql("((0))");

                entity.Property(e => e.PorderDetNum).HasColumnName("PORDER_DET_NUM");

                entity.Property(e => e.PorderNum).HasColumnName("PORDER_NUM");

                entity.Property(e => e.PorderNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PORDER_NUMBER");

                entity.Property(e => e.Porderbcode).HasColumnName("PORDERBCODE");

                entity.Property(e => e.Spdisc)
                    .HasColumnName("SPDISC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spprice)
                    .HasColumnName("SPPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spvcomplete)
                    .HasColumnName("SPVCOMPLETE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_DESC");

                entity.Property(e => e.Totalprelpoqty)
                    .HasColumnName("TOTALPRELPOQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalprelpoqtypw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOTALPRELPOQTYPW");
            });

            modelBuilder.Entity<Branchinprelpo>(entity =>
            {
                entity.HasKey(e => new { e.Prelponum, e.Prelpobcode, e.BorderNum, e.BranchId, e.InDetNum, e.ItemCode });

                entity.ToTable("BRANCHINPRELPO");

                entity.Property(e => e.Prelponum).HasColumnName("PRELPONUM");

                entity.Property(e => e.Prelpobcode).HasColumnName("PRELPOBCODE");

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PorderDetNum).HasColumnName("PORDER_DET_NUM");

                entity.Property(e => e.PorderNum).HasColumnName("PORDER_NUM");

                entity.Property(e => e.PorderNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PORDER_NUMBER");

                entity.Property(e => e.Porderbcode).HasColumnName("PORDERBCODE");

                entity.Property(e => e.Prelpoqty)
                    .HasColumnName("PRELPOQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Prelpoqtypw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PRELPOQTYPW");

                entity.Property(e => e.Spvcomplete)
                    .HasColumnName("SPVCOMPLETE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");
            });

            modelBuilder.Entity<BranchorderC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("BRANCHORDER_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<BranchorderDt>(entity =>
            {
                entity.HasKey(e => new { e.BorderDetNum, e.Bcode })
                    .HasName("IX_BRANCHORDER_DT_CRUD");

                entity.ToTable("BRANCHORDER_DT");

                entity.Property(e => e.BorderDetNum).HasColumnName("BORDER_DET_NUM");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Bonus)
                    .HasColumnName("BONUS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.BorderNum).HasColumnName("BORDER_NUM");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Detpending).HasColumnName("DETPENDING");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Metquantity).HasColumnName("METQUANTITY");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Remquantity).HasColumnName("REMQUANTITY");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("tax_code");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<BranchorderHd>(entity =>
            {
                entity.HasKey(e => new { e.BorderNum, e.Bcode })
                    .HasName("IX_BRANCHORDER_HD_CRUD");

                entity.ToTable("BRANCHORDER_HD");

                entity.Property(e => e.BorderNum).HasColumnName("BORDER_NUM");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Batched).HasColumnName("BATCHED");

                entity.Property(e => e.BorderD).HasColumnName("BORDER_D");

                entity.Property(e => e.BorderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BORDER_DATE");

                entity.Property(e => e.BorderNet).HasColumnName("BORDER_NET");

                entity.Property(e => e.BorderNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BORDER_number");

                entity.Property(e => e.BorderTotal).HasColumnName("BORDER_TOTAL");

                entity.Property(e => e.BorderVat).HasColumnName("BORDER_VAT");

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchfrom)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHFROM");

                entity.Property(e => e.Branchtobcode)
                    .HasColumnName("BRANCHTObcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Cancelled).HasColumnName("CANCELLED");

                entity.Property(e => e.Comments)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.ContName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cont_name");

                entity.Property(e => e.ContNum).HasColumnName("cont_num");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DELIVERY_DATE");

                entity.Property(e => e.Done).HasColumnName("DONE");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.GrnNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("grn_number");

                entity.Property(e => e.Grntype).HasColumnName("GRNTYPE");

                entity.Property(e => e.Invtype).HasColumnName("INVTYPE");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("LASTLINENO")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PayTerms)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAY_TERMS");

                entity.Property(e => e.Pending).HasColumnName("pending");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("printcopy")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.SupRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUP_REF");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BranchtransDt>(entity =>
            {
                entity.HasKey(e => new { e.Bcode, e.BtransDetNum })
                    .HasName("IX_BRANCHTRANS_DT_CRUD");

                entity.ToTable("BRANCHTRANS_DT");

                entity.HasIndex(e => e.Documentnumber, "ndxDocNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BtransNum, "ndxSaleInvNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCode, "ndxTaxCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BtransDetNum).HasColumnName("BTRANS_DET_NUM");

                entity.Property(e => e.AdultChild)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("adult_child")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonus)
                    .HasColumnName("bonus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.BorderDetNum)
                    .HasColumnName("Border_DET_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BrinDetNum)
                    .HasColumnName("BRIN_DET_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BtransNum).HasColumnName("BTRANS_NUM");

                entity.Property(e => e.Costofsale)
                    .HasColumnName("costofsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DeliveryNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERY_NO");

                entity.Property(e => e.Description)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Documentnumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTNUMBER");

                entity.Property(e => e.Expiry)
                    .HasColumnType("datetime")
                    .HasColumnName("expiry");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.ManufC)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("manufC");

                entity.Property(e => e.ModuleCode)
                    .HasColumnName("Module_Code")
                    .HasDefaultValueSql("((4))");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Newprice).HasColumnName("NEWPRICE");

                entity.Property(e => e.Newtotalcost).HasColumnName("NEWTOTALCOST");

                entity.Property(e => e.OrdQuantity)
                    .HasColumnName("ord_quantity")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PreGrn)
                    .IsRequired()
                    .HasColumnName("Pre_GRN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyLeft).HasColumnName("Qty_Left");

                entity.Property(e => e.QtyOrdered).HasColumnName("QTY_ORDERED");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Returned)
                    .HasColumnName("returned")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Taken)
                    .HasColumnName("taken")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxAmt).HasColumnName("TAX_AMT");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<BranchtransHd>(entity =>
            {
                entity.HasKey(e => new { e.BtransNum, e.Bcode })
                    .IsClustered(false);

                entity.ToTable("BRANCHTRANS_HD");

                entity.HasIndex(e => e.Branchcode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusRef, "ndxCusRef")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BtransDate, "ndxSaleDate")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BtransNumber, "ndxSaleInvNumber")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BtransNum).HasColumnName("BTRANS_NUM");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Amounttopay).HasColumnName("AMOUNTTOPAY");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Autobtr)
                    .HasColumnName("AUTOBTR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Autobtrnum)
                    .HasColumnName("AUTOBTRNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchfrom)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHFROM");

                entity.Property(e => e.BtransD).HasColumnName("BTRANS_D");

                entity.Property(e => e.BtransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BTRANS_DATE");

                entity.Property(e => e.BtransNet).HasColumnName("BTRANS_NET");

                entity.Property(e => e.BtransNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("BTRANS_number");

                entity.Property(e => e.BtransRef)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BTRANS_REF");

                entity.Property(e => e.BtransTotal).HasColumnName("BTRANS_TOTAL");

                entity.Property(e => e.BtransVat).HasColumnName("BTRANS_VAT");

                entity.Property(e => e.Cashsaleinvoice)
                    .HasColumnName("cashsaleinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Comments)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("EXCH_RATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.GlTradeaccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_TRADEACCOUNT");

                entity.Property(e => e.Insure).HasColumnName("insure");

                entity.Property(e => e.Invtrack)
                    .HasColumnName("INVTRACK")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemselectionDone).HasColumnName("ITEMSELECTION_DONE");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTUPDATE");

                entity.Property(e => e.MiscCharges).HasColumnName("MISC_CHARGES");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Paying).HasColumnName("paying");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Printcopy).HasColumnName("PRINTCOPY");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales_Code");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.TranspCharge).HasColumnName("transp_charge");

                entity.Property(e => e.TranspCode).HasColumnName("transp_code");

                entity.Property(e => e.TransportVat).HasColumnName("TRANSPORT_VAT");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Urgent)
                    .HasColumnName("urgent")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WaybillNum).HasColumnName("waybill_num");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Brasscheck>(entity =>
            {
                entity.HasKey(e => new { e.InvCode, e.Bcode, e.Username })
                    .HasName("PK_BRASSCHECK_1");

                entity.ToTable("BRASSCHECK");

                entity.HasIndex(e => e.Username, "IX_BRASSCHECKuser");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Adjqty)
                    .HasColumnName("ADJQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Adjqtypw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADJQTYPW");

                entity.Property(e => e.Docqty)
                    .HasColumnName("DOCQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Docqtyopen)
                    .HasColumnName("DOCQTYOPEN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Docqtyopenpw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DOCQTYOPENPW");

                entity.Property(e => e.Docqtypw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DOCQTYPW");

                entity.Property(e => e.Purchqty)
                    .HasColumnName("PURCHQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Purchqtypw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PURCHQTYPW");

                entity.Property(e => e.Salesqty)
                    .HasColumnName("SALESQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Salesqtypw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SALESQTYPW");

                entity.Property(e => e.Stkqty)
                    .HasColumnName("STKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transfqty)
                    .HasColumnName("TRANSFQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transfqtypw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRANSFQTYPW");
            });

            modelBuilder.Entity<BrnC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("brn_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<BrnDt>(entity =>
            {
                entity.HasKey(e => new { e.Bcode, e.BrnDetNum })
                    .HasName("IX_BRN_DT_CRUD");

                entity.ToTable("BRN_DT");

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCode, "ndxTaxCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BrnNum, "ndxsInvNum")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.BrnDetNum).HasColumnName("BRN_DET_NUM");

                entity.Property(e => e.Bonus).HasColumnName("bonus");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.BorderDetNum).HasColumnName("BORDER_DET_NUM");

                entity.Property(e => e.BrnNum).HasColumnName("BRN_NUM");

                entity.Property(e => e.BtransDetNum)
                    .HasColumnName("BTRANS_DET_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Costfactor)
                    .HasColumnName("costfactor")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Detpending).HasColumnName("detpending");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Importbrn)
                    .HasColumnName("importbrn")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Metquantity).HasColumnName("metquantity");

                entity.Property(e => e.ModuleCode)
                    .HasColumnName("Module_Code")
                    .HasDefaultValueSql("((12))");

                entity.Property(e => e.Mylineno).HasColumnName("mylineno");

                entity.Property(e => e.OrdQuantity).HasColumnName("ord_quantity");

                entity.Property(e => e.Ordered).HasColumnName("ORDERED");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PreGrn)
                    .IsRequired()
                    .HasColumnName("Pre_GRN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PreferredPrice).HasColumnName("Preferred_Price");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyLeft).HasColumnName("Qty_Left");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Remquantity).HasColumnName("remquantity");

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransNumber).HasColumnName("trans_number");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<BrnHd>(entity =>
            {
                entity.HasKey(e => new { e.BrnNum, e.Bcode })
                    .IsClustered(false);

                entity.ToTable("BRN_HD");

                entity.HasIndex(e => e.Branchcode, "ndxBranchCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BrnNumber, "ndxBrnNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Currencycode, "ndxCurrencyCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BrnDate, "ndxSinvDate")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BrnNum).HasColumnName("BRN_NUM");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Amounttopay).HasColumnName("AMOUNTTOPAY");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Awbdate)
                    .HasColumnType("datetime")
                    .HasColumnName("AWBDATE");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.BrnD).HasColumnName("BRN_D");

                entity.Property(e => e.BrnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BRN_DATE");

                entity.Property(e => e.BrnNet).HasColumnName("BRN_NET");

                entity.Property(e => e.BrnNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRN_number");

                entity.Property(e => e.BrnTotal).HasColumnName("BRN_TOTAL");

                entity.Property(e => e.BrnVat).HasColumnName("BRN_VAT");

                entity.Property(e => e.BtransNum).HasColumnName("BTRANS_NUM");

                entity.Property(e => e.Cashpurchase).HasColumnName("CASHPURCHASE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.ContNum).HasColumnName("CONT_NUM");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Done).HasColumnName("DONE");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.Frombranch)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FROMBRANCH");

                entity.Property(e => e.GrnNum).HasColumnName("GRN_NUM");

                entity.Property(e => e.GrnNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GRN_NUMBER");

                entity.Property(e => e.Idfno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IDFNO");

                entity.Property(e => e.Importbrn)
                    .HasColumnName("importbrn")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invoicetype).HasColumnName("invoicetype");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Myprintcopy).HasColumnName("myprintcopy");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Paying).HasColumnName("paying");

                entity.Property(e => e.Pending).HasColumnName("pending");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("printcopy")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Sdone).HasColumnName("sdone");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.SuppInvoicenum)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SuppRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_REF")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<BtransC>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("btrans_c");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<BtransferC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("btransfer_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<BtrinDt>(entity =>
            {
                entity.HasKey(e => new { e.Bcode, e.BtransDetNum })
                    .IsClustered(false);

                entity.ToTable("BTRIN_DT");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.BtransDetNum).HasColumnName("BTRANS_DET_NUM");

                entity.Property(e => e.AdultChild)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("adult_child")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcodeto)
                    .HasColumnName("BCODETO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonus)
                    .HasColumnName("bonus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.BorderDetNum)
                    .HasColumnName("Border_DET_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BrinDetNum)
                    .HasColumnName("BRIN_DET_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BtransNum).HasColumnName("BTRANS_NUM");

                entity.Property(e => e.Costofsale)
                    .HasColumnName("costofsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DeliveryNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERY_NO");

                entity.Property(e => e.Description)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Documentnumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTNUMBER");

                entity.Property(e => e.Expiry)
                    .HasColumnType("datetime")
                    .HasColumnName("expiry");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.ManufC)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("manufC");

                entity.Property(e => e.ModuleCode)
                    .HasColumnName("Module_Code")
                    .HasDefaultValueSql("((4))");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Newprice).HasColumnName("NEWPRICE");

                entity.Property(e => e.Newtotalcost).HasColumnName("NEWTOTALCOST");

                entity.Property(e => e.OrdQuantity)
                    .HasColumnName("ord_quantity")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PreGrn)
                    .IsRequired()
                    .HasColumnName("Pre_GRN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyLeft).HasColumnName("Qty_Left");

                entity.Property(e => e.QtyOrdered).HasColumnName("QTY_ORDERED");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Returned)
                    .HasColumnName("returned")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Taken)
                    .HasColumnName("taken")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxAmt).HasColumnName("TAX_AMT");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<BtrinHd>(entity =>
            {
                entity.HasKey(e => new { e.BtransNum, e.Bcode })
                    .IsClustered(false);

                entity.ToTable("BTRIN_HD");

                entity.Property(e => e.BtransNum).HasColumnName("BTRANS_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Amounttopay).HasColumnName("AMOUNTTOPAY");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bcodeto)
                    .HasColumnName("BCODETO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchfrom)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHFROM");

                entity.Property(e => e.BtransD).HasColumnName("BTRANS_D");

                entity.Property(e => e.BtransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BTRANS_DATE");

                entity.Property(e => e.BtransNet).HasColumnName("BTRANS_NET");

                entity.Property(e => e.BtransNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("BTRANS_number");

                entity.Property(e => e.BtransRef)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BTRANS_REF");

                entity.Property(e => e.BtransTotal).HasColumnName("BTRANS_TOTAL");

                entity.Property(e => e.BtransVat).HasColumnName("BTRANS_VAT");

                entity.Property(e => e.Cashsaleinvoice)
                    .HasColumnName("cashsaleinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Comments)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.Docscount)
                    .HasColumnName("docscount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("EXCH_RATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.GlTradeaccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_TRADEACCOUNT");

                entity.Property(e => e.Insure).HasColumnName("insure");

                entity.Property(e => e.ItemselectionDone).HasColumnName("ITEMSELECTION_DONE");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTUPDATE");

                entity.Property(e => e.MiscCharges).HasColumnName("MISC_CHARGES");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Paying).HasColumnName("paying");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Printcopy).HasColumnName("PRINTCOPY");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales_Code");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.TranspCharge).HasColumnName("transp_charge");

                entity.Property(e => e.TranspCode).HasColumnName("transp_code");

                entity.Property(e => e.TransportVat).HasColumnName("TRANSPORT_VAT");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Urgent)
                    .HasColumnName("urgent")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WaybillNum).HasColumnName("waybill_num");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Budget>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BUDGET");

                entity.HasIndex(e => e.Acct, "BDGT_AC")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Acct)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Bdgtcat)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("BDGTCAT");

                entity.Property(e => e.Budytd).HasColumnName("BUDYTD");

                entity.Property(e => e.Pd1).HasColumnName("PD1");

                entity.Property(e => e.Pd10).HasColumnName("PD10");

                entity.Property(e => e.Pd11).HasColumnName("PD11");

                entity.Property(e => e.Pd12).HasColumnName("PD12");

                entity.Property(e => e.Pd13).HasColumnName("PD13");

                entity.Property(e => e.Pd2).HasColumnName("PD2");

                entity.Property(e => e.Pd3).HasColumnName("PD3");

                entity.Property(e => e.Pd4).HasColumnName("PD4");

                entity.Property(e => e.Pd5).HasColumnName("PD5");

                entity.Property(e => e.Pd6).HasColumnName("PD6");

                entity.Property(e => e.Pd7).HasColumnName("PD7");

                entity.Property(e => e.Pd8).HasColumnName("PD8");

                entity.Property(e => e.Pd9).HasColumnName("PD9");

                entity.Property(e => e.Thispd).HasColumnName("THISPD");

                entity.Property(e => e.Usdytd).HasColumnName("USDYTD");
            });

            modelBuilder.Entity<BudgetedSale>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.SalesMonth)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Salesval).HasColumnName("SALESVAL");
            });

            modelBuilder.Entity<CaseSpecification>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdforderNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDFOrderNo");

                entity.Property(e => e.Length)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShipmentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Shipment_Date");

                entity.Property(e => e.ShipmentNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Supp_Code");

                entity.Property(e => e.Supplier)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnitNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Width)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CashinvoiceC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("cashinvoice_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<Cashprice>(entity =>
            {
                entity.HasKey(e => new { e.CusCode, e.InvCode })
                    .HasName("PK_CASHPRICE_1");

                entity.ToTable("CASHPRICE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Bonus).HasColumnName("BONUS");

                entity.Property(e => e.Bonus1).HasColumnName("BONUS1");

                entity.Property(e => e.Bonus2).HasColumnName("BONUS2");

                entity.Property(e => e.Bonus3).HasColumnName("BONUS3");

                entity.Property(e => e.Bonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW");

                entity.Property(e => e.Bonuspw1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW1");

                entity.Property(e => e.Bonuspw2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW2");

                entity.Property(e => e.Bonuspw3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW3");

                entity.Property(e => e.Cashpriceamt)
                    .HasColumnName("CASHPRICEAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpriceapply)
                    .HasColumnName("CASHPRICEAPPLY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpriceentrynum)
                    .HasColumnName("CASHPRICEENTRYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Discexpirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYDATE");

                entity.Property(e => e.Discexpirytime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYTIME");

                entity.Property(e => e.Discmode)
                    .HasColumnName("DISCMODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Discstartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTDATE");

                entity.Property(e => e.Discstarttime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTTIME");

                entity.Property(e => e.Disctype)
                    .HasColumnName("DISCTYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvCode1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE1");

                entity.Property(e => e.InvCode2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE2");

                entity.Property(e => e.InvCode3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE3");

                entity.Property(e => e.InvCode4)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE4");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty1)
                    .HasColumnName("PWQTY1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty2)
                    .HasColumnName("PWQTY2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty3)
                    .HasColumnName("PWQTY3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Retailprice)
                    .HasColumnName("RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spbonus).HasColumnName("SPBONUS");

                entity.Property(e => e.Spbonus1).HasColumnName("SPBONUS1");

                entity.Property(e => e.Spbonus2).HasColumnName("SPBONUS2");

                entity.Property(e => e.Spbonus3).HasColumnName("SPBONUS3");

                entity.Property(e => e.Spbonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW");

                entity.Property(e => e.Spbonuspw1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW1");

                entity.Property(e => e.Spbonuspw2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW2");

                entity.Property(e => e.Spbonuspw3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW3");

                entity.Property(e => e.Spdiscount)
                    .HasColumnName("SPDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty)
                    .HasColumnName("SPPWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty1)
                    .HasColumnName("SPPWQTY1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty2)
                    .HasColumnName("SPPWQTY2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty3)
                    .HasColumnName("SPPWQTY3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tradeprice)
                    .HasColumnName("TRADEPRICE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Cashpricepromo>(entity =>
            {
                entity.HasKey(e => new { e.CusCode, e.InvCode })
                    .HasName("PK_CASHPRICEPROMO_1");

                entity.ToTable("CASHPRICEPROMO");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Cashpricepromoamt)
                    .HasColumnName("CASHPRICEPROMOAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpricepromoapply)
                    .HasColumnName("CASHPRICEPROMOAPPLY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpricepromoentrynum)
                    .HasColumnName("CASHPRICEPROMOENTRYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Discexpirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYDATE");

                entity.Property(e => e.Discexpirytime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYTIME");

                entity.Property(e => e.Discstartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTDATE");

                entity.Property(e => e.Discstarttime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTTIME");

                entity.Property(e => e.Disctype)
                    .HasColumnName("DISCTYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvCode1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE1");

                entity.Property(e => e.InvCode2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE2");

                entity.Property(e => e.InvCode3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE3");

                entity.Property(e => e.InvCode4)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE4");

                entity.Property(e => e.Retailprice)
                    .HasColumnName("RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spbonus).HasColumnName("SPBONUS");

                entity.Property(e => e.Spbonus1).HasColumnName("SPBONUS1");

                entity.Property(e => e.Spbonus2).HasColumnName("SPBONUS2");

                entity.Property(e => e.Spbonus3).HasColumnName("SPBONUS3");

                entity.Property(e => e.Spbonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW");

                entity.Property(e => e.Spbonuspw1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW1");

                entity.Property(e => e.Spbonuspw2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW2");

                entity.Property(e => e.Spbonuspw3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW3");

                entity.Property(e => e.Spdiscount)
                    .HasColumnName("SPDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty).HasColumnName("SPPWQTY");

                entity.Property(e => e.Sppwqty1)
                    .HasColumnName("SPPWQTY1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty2)
                    .HasColumnName("SPPWQTY2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty3)
                    .HasColumnName("SPPWQTY3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice)
                    .HasColumnName("TOTALSPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice1)
                    .HasColumnName("TOTALSPRICE1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice2)
                    .HasColumnName("TOTALSPRICE2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice3)
                    .HasColumnName("TOTALSPRICE3")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CashsaleC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("cashsale_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<CategoryPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("category_price");

                entity.Property(e => e.CreditCode)
                    .HasMaxLength(5)
                    .HasColumnName("CREDIT_CODE");

                entity.Property(e => e.Discount).HasColumnName("DISCOUNT");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .HasColumnName("inv_code");

                entity.Property(e => e.InvRetailprice).HasColumnName("INV_RETAILPRICE");

                entity.Property(e => e.InvTradeprice).HasColumnName("INV_TRADEPRICE");
            });

            modelBuilder.Entity<Cbookpaymode>(entity =>
            {
                entity.HasKey(e => e.Paymode)
                    .IsClustered(false);

                entity.ToTable("CBOOKPAYMODE");

                entity.HasIndex(e => e.Paymodepos, "IX_CBOOKPAYMODE")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Paymode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PAYMODE");

                entity.Property(e => e.Paymodepos).HasColumnName("PAYMODEPOS");
            });

            modelBuilder.Entity<Centraldoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CENTRALDOCS");

                entity.HasIndex(e => new { e.Docname, e.Docsdate, e.Modcode }, "IX_CENTRALDOCS")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Docname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCNAME");

                entity.Property(e => e.Docsclosed).HasColumnName("DOCSCLOSED");

                entity.Property(e => e.Docsdate)
                    .HasColumnType("date")
                    .HasColumnName("DOCSDATE");

                entity.Property(e => e.Dtcount)
                    .HasColumnName("DTCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Hdcount)
                    .HasColumnName("HDCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Modcode).HasColumnName("MODCODE");
            });

            modelBuilder.Entity<Chequebook>(entity =>
            {
                entity.HasKey(e => new { e.CheqNo, e.BankAcct });

                entity.ToTable("CHEQUEBOOK");

                entity.Property(e => e.CheqNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cheqNo");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("bank_acct");

                entity.Property(e => e.CheqEntryno)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("cheqEntryno");
            });

            modelBuilder.Entity<Closeddipen2020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("closeddipen2020");

                entity.Property(e => e.AvgCost).HasColumnName("AVG COST");

                entity.Property(e => e.AvgCostCl).HasColumnName("Avg Cost Cl");

                entity.Property(e => e.ClosingValue).HasColumnName("Closing Value");

                entity.Property(e => e.F6).HasMaxLength(255);

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(255)
                    .HasColumnName("ITEM CODE");

                entity.Property(e => e.ItemCode1)
                    .HasMaxLength(255)
                    .HasColumnName("Item Code1");

                entity.Property(e => e.ItemDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Item Description");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(255)
                    .HasColumnName("ITEM NAME");

                entity.Property(e => e.PackSize).HasColumnName("Pack Size");

                entity.Property(e => e.StockBalance).HasColumnName("Stock Balance");

                entity.Property(e => e.StockQty).HasColumnName("STOCK QTY");

                entity.Property(e => e.StockValue).HasColumnName("STOCK VALUE");
            });

            modelBuilder.Entity<Closedstock>(entity =>
            {
                entity.HasKey(e => new { e.InvCode, e.Stockmonth, e.Stockyear });

                entity.ToTable("CLOSEDSTOCK");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Stockmonth).HasColumnName("STOCKMONTH");

                entity.Property(e => e.Stockyear).HasColumnName("STOCKYEAR");

                entity.Property(e => e.InvAvgcost)
                    .HasColumnName("INV_AVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvLastunitcost)
                    .HasColumnName("INV_LASTUNITCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvPhysicalitem)
                    .HasColumnName("INV_PHYSICALITEM")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Closedstockperiod>(entity =>
            {
                entity.HasKey(e => new { e.Itemcode, e.Bcode, e.Processdate })
                    .HasName("PK_CLOSESTOCKPERIOD");

                entity.ToTable("CLOSEDSTOCKPERIOD");

                entity.HasIndex(e => e.Processdate, "IX_CLOSESTOCKPERIOD");

                entity.Property(e => e.Itemcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Processdate)
                    .HasColumnType("datetime")
                    .HasColumnName("PROCESSDATE");

                entity.Property(e => e.InvAvgcost).HasColumnName("INV_AVGCOST");

                entity.Property(e => e.InvLastunitcost).HasColumnName("INV_LASTUNITCOST");

                entity.Property(e => e.InvRetailprice).HasColumnName("INV_RETAILPRICE");

                entity.Property(e => e.InvTradeprice).HasColumnName("INV_TRADEPRICE");

                entity.Property(e => e.InvWsaleprice)
                    .HasColumnName("INV_WSALEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.PackQty)
                    .HasColumnName("PACK_QTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Processperiod)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("PROCESSPERIOD");

                entity.Property(e => e.Stkpos).HasColumnName("STKPOS");

                entity.Property(e => e.Stkpospw)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("STKPOSPW");

                entity.Property(e => e.Subgroupcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUBGROUPCODE");

                entity.Property(e => e.Subgroupname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("SUBGROUPNAME");
            });

            modelBuilder.Entity<Closedstockperioddate>(entity =>
            {
                entity.HasKey(e => e.Processdate);

                entity.ToTable("CLOSEDSTOCKPERIODDATES");

                entity.Property(e => e.Processdate)
                    .HasColumnType("datetime")
                    .HasColumnName("PROCESSDATE");
            });

            modelBuilder.Entity<Closedtran>(entity =>
            {
                entity.HasKey(e => new { e.Bcode, e.Modulecode, e.Transperiod });

                entity.ToTable("CLOSEDTRANS");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Modulecode).HasColumnName("MODULECODE");

                entity.Property(e => e.Transperiod)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("TRANSPERIOD");

                entity.Property(e => e.Modulename)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MODULENAME");

                entity.Property(e => e.Transcount)
                    .HasColumnName("TRANSCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transdate)
                    .HasColumnType("date")
                    .HasColumnName("TRANSDATE");

                entity.Property(e => e.Transposted)
                    .HasColumnName("TRANSPOSTED")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Closingcost>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CLOSINGCOST");

                entity.Property(e => e.Enddate)
                    .HasColumnType("datetime")
                    .HasColumnName("enddate");

                entity.Property(e => e.InvAvgcost).HasColumnName("INV_AVGCOST");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inv_code");

                entity.Property(e => e.Period)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("period");
            });

            modelBuilder.Entity<CnoteDt>(entity =>
            {
                entity.HasKey(e => new { e.CnoteDetNum, e.Bcode })
                    .HasName("IX_CNOTE_DT_CRUD");

                entity.ToTable("CNOTE_DT");

                entity.HasIndex(e => e.CnoteNum, "ndxCnoteNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCode, "ndxTaxCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CnoteDetNum).HasColumnName("CNOTE_DET_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Bonus).HasColumnName("BONUS");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Clcoredoc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CLCOREDOC")
                    .HasDefaultValueSql("('PHM')")
                    .IsFixedLength(true);

                entity.Property(e => e.Clvisit)
                    .HasColumnName("CLVISIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CnoteNum).HasColumnName("CNOTE_NUM");

                entity.Property(e => e.Copay)
                    .HasColumnName("copay")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CopaycnoteBcode)
                    .HasColumnName("copaycnote_bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CopaycnoteDetNum)
                    .HasColumnName("copaycnote_det_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CopaycnoteNum)
                    .HasColumnName("copaycnote_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Copaycuscode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("copaycuscode")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Copayreason)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("copayreason")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Costofsale).HasColumnName("costofsale");

                entity.Property(e => e.Credpenalty)
                    .HasColumnName("credpenalty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DeptCode)
                    .HasColumnName("dept_code")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Documentnumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTNUMBER");

                entity.Property(e => e.Documenttype).HasColumnName("DOCUMENTTYPE");

                entity.Property(e => e.EmpNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EMP_NUM");

                entity.Property(e => e.Excise)
                    .HasColumnName("excise")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inclusive)
                    .HasColumnName("inclusive")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.Itemavgcost)
                    .HasColumnName("itemavgcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Loybcode)
                    .HasColumnName("LOYBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loydetnum)
                    .HasColumnName("LOYDETNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loydettype)
                    .HasColumnName("LOYDETTYPE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loynum)
                    .HasColumnName("LOYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loypoints)
                    .HasColumnName("LOYPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ModuleCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Module_Code");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PreGrn)
                    .IsRequired()
                    .HasColumnName("Pre_GRN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PrevDtno).HasColumnName("PREV_DTNO");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Priceincl)
                    .HasColumnName("priceincl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcCode)
                    .HasColumnName("PROC_CODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyLeft).HasColumnName("Qty_Left");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.SaleinvDetNum).HasColumnName("SALEINV_DET_NUM");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.TaxAmt).HasColumnName("TAX_AMT");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<CnoteDtrep>(entity =>
            {
                entity.HasKey(e => new { e.CnoteNum, e.CnoteDetNum });

                entity.ToTable("CNOTE_DTREP");

                entity.HasIndex(e => e.CnoteNum, "ndxCnoteNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCode, "ndxTaxCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CnoteNum, e.Mylineno }, "ndxlineno")
                    .IsUnique();

                entity.Property(e => e.CnoteNum).HasColumnName("CNOTE_NUM");

                entity.Property(e => e.CnoteDetNum).HasColumnName("CNOTE_DET_NUM");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bonus).HasColumnName("BONUS");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Costofsale).HasColumnName("costofsale");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Documentnumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTNUMBER");

                entity.Property(e => e.Documenttype).HasColumnName("DOCUMENTTYPE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.ModuleCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Module_Code");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PreGrn)
                    .IsRequired()
                    .HasColumnName("Pre_GRN")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.PrevDtno).HasColumnName("PREV_DTNO");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.QtyLeft).HasColumnName("Qty_Left");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.SaleinvDetNum).HasColumnName("SALEINV_DET_NUM");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.TaxAmt).HasColumnName("TAX_AMT");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<CnoteHd>(entity =>
            {
                entity.HasKey(e => new { e.CnoteNum, e.Bcode })
                    .HasName("IX_CNOTE_HD_CRUD");

                entity.ToTable("CNOTE_HD");

                entity.HasIndex(e => e.CnoteDate, "ndxCnoteDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CnoteNumber, "ndxCnoteNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Currencycode, "ndxCurrencyCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CnoteNum).HasColumnName("CNOTE_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashrefundstatus)
                    .HasColumnName("CASHREFUNDSTATUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashsale).HasColumnName("CASHSALE");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Clcoreclosed)
                    .HasColumnName("CLCORECLOSED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Clcoredoc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CLCOREDOC")
                    .HasDefaultValueSql("('PHM')")
                    .IsFixedLength(true);

                entity.Property(e => e.Clvisit)
                    .HasColumnName("CLVISIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CnoteD).HasColumnName("CNOTE_D");

                entity.Property(e => e.CnoteDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CNOTE_DATE");

                entity.Property(e => e.CnoteExcise)
                    .HasColumnName("cnote_excise")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CnoteNet).HasColumnName("CNOTE_NET");

                entity.Property(e => e.CnoteNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cnote_number");

                entity.Property(e => e.CnoteTotal).HasColumnName("CNOTE_TOTAL");

                entity.Property(e => e.CnoteVat).HasColumnName("CNOTE_VAT");

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.Copaycnote)
                    .HasColumnName("copaycnote")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CopaycnoteBcode)
                    .HasColumnName("copaycnote_bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CopaycnoteNum)
                    .HasColumnName("copaycnote_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Currencycode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE")
                    .HasDefaultValueSql("((999))");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cus_ref");

                entity.Property(e => e.Cuspoints)
                    .HasColumnName("CUSPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Documenttype).HasColumnName("DOCUMENTTYPE");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("EXCH_RATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Existingitems).HasColumnName("existingitems");

                entity.Property(e => e.GlTradeaccount)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("GL_TRADEACCOUNT");

                entity.Property(e => e.Insure).HasColumnName("insure");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loybcode)
                    .HasColumnName("LOYBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loynum)
                    .HasColumnName("LOYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("memberno");

                entity.Property(e => e.Mempointsbuy)
                    .HasColumnName("MEMPOINTSBUY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mempointsredeem)
                    .HasColumnName("MEMPOINTSREDEEM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MiscCharges).HasColumnName("MISC_CHARGES");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Paybcode)
                    .HasColumnName("PAYBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Paydetnum)
                    .HasColumnName("PAYDETNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.PrevNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("PREV_NUMBER");

                entity.Property(e => e.Pricediff)
                    .HasColumnName("PRICEDIFF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("printcopy")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Refund)
                    .HasColumnName("refund")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Refundcash)
                    .HasColumnName("REFUNDCASH")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rptbcode)
                    .HasColumnName("RPTBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rptdetnum)
                    .HasColumnName("RPTDETNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales_Code");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.Smartid)
                    .HasColumnName("SMARTID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillno)
                    .HasColumnName("TILLNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillsessno)
                    .HasColumnName("TILLSESSNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.TranspCharge).HasColumnName("transp_charge");

                entity.Property(e => e.TranspCode).HasColumnName("transp_code");

                entity.Property(e => e.TransportVat).HasColumnName("TRANSPORT_VAT");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usin).HasColumnName("usin_");

                entity.Property(e => e.WaybillNum).HasColumnName("waybill_num");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CnoteHdrep>(entity =>
            {
                entity.HasKey(e => e.CnoteNum);

                entity.ToTable("CNOTE_HDREP");

                entity.HasIndex(e => e.CnoteNumber, "cnote_number")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CnoteDate, "ndxCnoteDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CnoteNumber, "ndxCnoteNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Currencycode, "ndxCurrencyCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CnoteNum)
                    .ValueGeneratedNever()
                    .HasColumnName("CNOTE_NUM");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Cashsale).HasColumnName("CASHSALE");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.CnoteD).HasColumnName("CNOTE_D");

                entity.Property(e => e.CnoteDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CNOTE_DATE");

                entity.Property(e => e.CnoteNet).HasColumnName("CNOTE_NET");

                entity.Property(e => e.CnoteNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cnote_number");

                entity.Property(e => e.CnoteTotal).HasColumnName("CNOTE_TOTAL");

                entity.Property(e => e.CnoteVat).HasColumnName("CNOTE_VAT");

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.Currencycode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE")
                    .HasDefaultValueSql("(999)");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cus_ref");

                entity.Property(e => e.Documenttype).HasColumnName("DOCUMENTTYPE");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("EXCH_RATE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Existingitems).HasColumnName("existingitems");

                entity.Property(e => e.GlTradeaccount)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("GL_TRADEACCOUNT");

                entity.Property(e => e.Insure).HasColumnName("insure");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.MiscCharges).HasColumnName("MISC_CHARGES");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.PrevNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("PREV_NUMBER");

                entity.Property(e => e.Pricediff)
                    .HasColumnName("PRICEDIFF")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("printcopy")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Refund)
                    .HasColumnName("refund")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales_Code");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.TranspCharge).HasColumnName("transp_charge");

                entity.Property(e => e.TranspCode).HasColumnName("transp_code");

                entity.Property(e => e.TransportVat).HasColumnName("TRANSPORT_VAT");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usin).HasColumnName("usin_");

                entity.Property(e => e.WaybillNum).HasColumnName("waybill_num");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<CnoteprevDt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CNOTEPREV_DT");

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SoNum, "ndxSoNum")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Bonus).HasColumnName("BONUS");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.DefLoc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DEF_LOC");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Detpending).HasColumnName("detpending");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Expiry)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY");

                entity.Property(e => e.GlAcct)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCT");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_CODE");

                entity.Property(e => e.ItemDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_DESC");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Metquantity).HasColumnName("METQUANTITY");

                entity.Property(e => e.PackQty).HasColumnName("PACK_QTY");

                entity.Property(e => e.PackqtyReceiving).HasColumnName("PACKQTY_RECEIVING");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Quantityused).HasColumnName("quantityused");

                entity.Property(e => e.ReceiveQty).HasColumnName("RECEIVE_QTY");

                entity.Property(e => e.Remquantity).HasColumnName("REMQUANTITY");

                entity.Property(e => e.SoDetNum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SO_DET_NUM");

                entity.Property(e => e.SoNum).HasColumnName("SO_NUM");

                entity.Property(e => e.TaxAmt).HasColumnName("TAX_AMT");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransferQty).HasColumnName("TRANSFER_QTY");

                entity.Property(e => e.Unit)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<CnoteprevHd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CNOTEPREV_HD");

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SoDate, "ndxSoDate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Batched)
                    .HasColumnName("batched")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Cancelled)
                    .HasColumnName("CANCELLED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Comments)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("customer_name");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.ExpDelivery)
                    .HasColumnType("datetime")
                    .HasColumnName("EXP_DELIVERY");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNO");

                entity.Property(e => e.Pending)
                    .HasColumnName("pending")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PrevNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("PREV_NUMBER");

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("sales_code");

                entity.Property(e => e.Selected)
                    .HasColumnName("SELECTED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SoD).HasColumnName("SO_D");

                entity.Property(e => e.SoDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SO_DATE");

                entity.Property(e => e.SoNet).HasColumnName("SO_NET");

                entity.Property(e => e.SoNum).HasColumnName("SO_NUM");

                entity.Property(e => e.SoNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("so_number");

                entity.Property(e => e.SoTotal).HasColumnName("so_total");

                entity.Property(e => e.SoVat).HasColumnName("SO_VAT");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.UserName)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Collectmode>(entity =>
            {
                entity.HasKey(e => e.CmCode);

                entity.ToTable("COLLECTMODE");

                entity.Property(e => e.CmCode).HasColumnName("CM_CODE");

                entity.Property(e => e.CmName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CM_NAME");
            });

            modelBuilder.Entity<Collecttype>(entity =>
            {
                entity.HasKey(e => e.CtCode);

                entity.ToTable("COLLECTTYPE");

                entity.Property(e => e.CtCode).HasColumnName("CT_CODE");

                entity.Property(e => e.CtName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CT_NAME");
            });

            modelBuilder.Entity<Contactbest>(entity =>
            {
                entity.HasKey(e => e.ContactCall);

                entity.ToTable("CONTACTBEST");

                entity.Property(e => e.ContactCall).HasColumnName("CONTACT_CALL");

                entity.Property(e => e.Bestcall)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BESTCALL");
            });

            modelBuilder.Entity<Contactcustomer>(entity =>
            {
                entity.HasKey(e => e.ContactNum)
                    .IsClustered(false);

                entity.ToTable("CONTACTCUSTOMER");

                entity.HasIndex(e => e.CusCode, "XCUS_CODE");

                entity.Property(e => e.ContactNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("contact_num");

                entity.Property(e => e.Address)
                    .HasMaxLength(150)
                    .HasColumnName("ADDRESS")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Blocked)
                    .HasColumnName("BLOCKED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.CategoryCode).HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.Companyfax)
                    .HasMaxLength(50)
                    .HasColumnName("COMPANYFAX")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Cusmemberno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSMEMBERNO");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("email")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Iscustomer)
                    .HasColumnName("ISCUSTOMER")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Phone)
                    .HasMaxLength(150)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(150)
                    .HasColumnName("PHYSICALADD")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Pin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIN")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.RatingCode).HasColumnName("RATING_CODE");

                entity.Property(e => e.Town)
                    .HasMaxLength(150)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TownCode).HasColumnName("town_code");

                entity.Property(e => e.Vat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VAT")
                    .HasDefaultValueSql("('-')");
            });

            modelBuilder.Entity<Contactextra>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CONTACTEXTRA");

                entity.HasIndex(e => e.CcontNum, "CCONT_NUM")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ContactNum, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.CcontNum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CCONT_NUM");

                entity.Property(e => e.Cellphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CELLPHONE");

                entity.Property(e => e.Cellphone1)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CELLPHONE1");

                entity.Property(e => e.ContactCall).HasColumnName("CONTACT_CALL");

                entity.Property(e => e.ContactNum)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT_NUM");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Email1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL1");

                entity.Property(e => e.Fax)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.Fax1)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("FAX1");

                entity.Property(e => e.Fname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FNAME");

                entity.Property(e => e.Keycontact)
                    .HasColumnName("KEYCONTACT")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Lname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LNAME");

                entity.Property(e => e.Notes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Phyaddress)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PHYADDRESS");

                entity.Property(e => e.SaluteCode).HasColumnName("SALUTE_CODE");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TELEPHONE");

                entity.Property(e => e.Telephone1)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TELEPHONE1");

                entity.Property(e => e.TownCode).HasColumnName("TOWN_CODE");
            });

            modelBuilder.Entity<Contactrating>(entity =>
            {
                entity.HasKey(e => e.RatingCode);

                entity.ToTable("CONTACTRATINGS");

                entity.Property(e => e.RatingCode).HasColumnName("RATING_CODE");

                entity.Property(e => e.RatingName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RATING_NAME");
            });

            modelBuilder.Entity<Contactsalute>(entity =>
            {
                entity.HasKey(e => e.SaluteCode);

                entity.ToTable("CONTACTSALUTE");

                entity.Property(e => e.SaluteCode).HasColumnName("SALUTE_CODE");

                entity.Property(e => e.Salutation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SALUTATION");
            });

            modelBuilder.Entity<Corelastpricesw>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CORELASTPRICESW");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvCode1)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE1");

                entity.Property(e => e.InvCode2)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE2");

                entity.Property(e => e.Lastdisc).HasColumnName("LASTDISC");

                entity.Property(e => e.Lastprice).HasColumnName("LASTPRICE");

                entity.Property(e => e.Partwhole)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time");
            });

            modelBuilder.Entity<Corelastsuppitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CORELASTSUPPITEM");

                entity.HasIndex(e => e.SinvDate, "NDXDATE")
                    .IsClustered();

                entity.HasIndex(e => e.InvCode, "ndxinvcode");

                entity.HasIndex(e => new { e.SuppCode, e.InvCode }, "ndxinvsupp");

                entity.Property(e => e.Bonus).HasColumnName("bonus");

                entity.Property(e => e.Discount).HasColumnName("discount");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inv_code");

                entity.Property(e => e.Partwhole)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PARTWHOLE");

                entity.Property(e => e.Pkqty).HasColumnName("pkqty");

                entity.Property(e => e.Price).HasColumnName("price");

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.Property(e => e.SinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("sinv_date");

                entity.Property(e => e.SinvNum).HasColumnName("sinv_num");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("supp_code");

                entity.Property(e => e.SuppDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("supp_desc");

                entity.Property(e => e.SuppRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("supp_ref");

                entity.Property(e => e.Transtime)
                    .HasColumnType("datetime")
                    .HasColumnName("transtime");
            });

            modelBuilder.Entity<Coremaster>(entity =>
            {
                entity.HasKey(e => new { e.Modcode, e.Docref });

                entity.ToTable("COREMASTER");

                entity.Property(e => e.Modcode).HasColumnName("MODCODE");

                entity.Property(e => e.Docref)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCREF");
            });

            modelBuilder.Entity<Coretransact>(entity =>
            {
                entity.HasKey(e => new { e.Modcode, e.Docnum, e.Bcode });

                entity.ToTable("CORETRANSACT");

                entity.Property(e => e.Modcode).HasColumnName("MODCODE");

                entity.Property(e => e.Docnum).HasColumnName("DOCNUM");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Updatedate)
                    .HasColumnType("datetime")
                    .HasColumnName("UPDATEDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Updateme)
                    .HasColumnName("UPDATEME")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Coretransactstock>(entity =>
            {
                entity.HasKey(e => new { e.Modcode, e.Docnum, e.Docdetnum, e.Bcode });

                entity.ToTable("CORETRANSACTSTOCK");

                entity.HasIndex(e => new { e.Modcode, e.Docnum, e.Docdetnum, e.Bcode }, "IX_CORETRANSACTSTOCK");

                entity.Property(e => e.Modcode).HasColumnName("MODCODE");

                entity.Property(e => e.Docnum).HasColumnName("DOCNUM");

                entity.Property(e => e.Docdetnum).HasColumnName("DOCDETNUM");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Updatedate)
                    .HasColumnType("datetime")
                    .HasColumnName("UPDATEDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Updateme)
                    .HasColumnName("UPDATEME")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Credcont>(entity =>
            {
                entity.HasKey(e => e.Credccode);

                entity.ToTable("CREDCONT");

                entity.Property(e => e.Credccode).HasColumnName("credccode");

                entity.Property(e => e.Credcname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("credcname");
            });

            modelBuilder.Entity<CreditCategory>(entity =>
            {
                entity.HasKey(e => e.CreditCode);

                entity.ToTable("CREDIT_CATEGORY");

                entity.HasIndex(e => e.Description, "DESCRIPTION")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CreditCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CREDIT_CODE");

                entity.Property(e => e.Awardpoints)
                    .HasColumnName("awardpoints")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Discount).HasColumnName("DISCOUNT");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.Pricemarkup)
                    .HasColumnName("pricemarkup")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");
            });

            modelBuilder.Entity<Creditcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("creditcodes");

                entity.Property(e => e.CreditCode1)
                    .HasMaxLength(255)
                    .HasColumnName("CREDIT_CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("DESCRIPTION");
            });

            modelBuilder.Entity<CreditnoteC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("creditnote_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<Credittrack>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CREDITTRACK");

                entity.Property(e => e.Ctrack)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ctrack");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(15)
                    .HasColumnName("inv_code");

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(50)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.Taken).HasColumnName("taken");
            });

            modelBuilder.Entity<Credreference>(entity =>
            {
                entity.HasKey(e => e.Credrefnumber);

                entity.ToTable("CREDREFERENCE");

                entity.Property(e => e.Credrefnumber).HasColumnName("CREDREFNUMBER");

                entity.Property(e => e.Credrefname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CREDREFNAME");
            });

            modelBuilder.Entity<CsCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CS_CATEGORY");

                entity.Property(e => e.CscatgCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_CODE");

                entity.Property(e => e.CscatgGl)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_GL");

                entity.Property(e => e.CscatgName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_NAME");
            });

            modelBuilder.Entity<CsaleDt>(entity =>
            {
                entity.HasKey(e => new { e.CsaleDetNum, e.Bcode })
                    .HasName("IX_CSALE_DT_CRUD");

                entity.ToTable("CSALE_DT");

                entity.HasIndex(e => e.InvCode, "ndxCSDInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CsaleNum, "ndxCSDNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CsaleNum, "ndxCsaleNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCode, "ndxTaxCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CsaleDetNum).HasColumnName("CSALE_DET_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.AdultChild)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("adult_child");

                entity.Property(e => e.Bonus).HasColumnName("bonus");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Clcoredoc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CLCOREDOC")
                    .HasDefaultValueSql("('PHM')")
                    .IsFixedLength(true);

                entity.Property(e => e.Clvisit)
                    .HasColumnName("CLVISIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cnoteqty)
                    .HasColumnName("CNOTEQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Costofsale)
                    .HasColumnName("costofsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CsaleNum).HasColumnName("CSALE_NUM");

                entity.Property(e => e.D1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d1");

                entity.Property(e => e.D2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d2");

                entity.Property(e => e.D3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d3");

                entity.Property(e => e.DeptCode)
                    .HasColumnName("dept_code")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.EmpNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EMP_NUM");

                entity.Property(e => e.Forrefill)
                    .HasColumnName("forrefill")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inclusive)
                    .HasColumnName("inclusive")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.Itemavgcost)
                    .HasColumnName("itemavgcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Loybcode)
                    .HasColumnName("LOYBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loydetnum)
                    .HasColumnName("LOYDETNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loydettype)
                    .HasColumnName("LOYDETTYPE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loynum)
                    .HasColumnName("LOYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loypoints)
                    .HasColumnName("LOYPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ModuleCode)
                    .HasColumnName("Module_Code")
                    .HasDefaultValueSql("((41))");

                entity.Property(e => e.Mylineno).HasColumnName("mylineno");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PreGrn)
                    .IsRequired()
                    .HasColumnName("Pre_GRN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Priceincl)
                    .HasColumnName("priceincl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcCode)
                    .HasColumnName("PROC_CODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Promoitem)
                    .HasColumnName("promoitem")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyLeft).HasColumnName("Qty_Left");

                entity.Property(e => e.QtyOrdered)
                    .HasColumnName("QTY_ORDERED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.QuoDetNum)
                    .HasColumnName("quo_det_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RefillinvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("refillinv_code");

                entity.Property(e => e.Refillqty)
                    .HasColumnName("refillqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rfldate)
                    .HasColumnType("datetime")
                    .HasColumnName("RFLDATE");

                entity.Property(e => e.Rmdays)
                    .HasColumnName("RMDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rmtype)
                    .HasColumnName("RMTYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SoDetNum)
                    .HasColumnName("SO_DET_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Strength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("STRENGTH");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Taxamt)
                    .HasColumnName("taxamt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.Property(e => e.W1).HasColumnName("w1");

                entity.Property(e => e.W2).HasColumnName("w2");
            });

            modelBuilder.Entity<CsaleDtrep>(entity =>
            {
                entity.HasKey(e => new { e.CsaleNum, e.CsaleDetNum });

                entity.ToTable("CSALE_DTREP");

                entity.HasIndex(e => e.InvCode, "ndxCSDInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CsaleNum, "ndxCSDNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CsaleNum, "ndxCsaleNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCode, "ndxTaxCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CsaleNum, e.Mylineno }, "ndxmyline")
                    .IsUnique();

                entity.Property(e => e.CsaleNum).HasColumnName("CSALE_NUM");

                entity.Property(e => e.CsaleDetNum).HasColumnName("CSALE_DET_NUM");

                entity.Property(e => e.AdultChild)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("adult_child");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bonus).HasColumnName("bonus");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Cnoteqty)
                    .HasColumnName("CNOTEQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Costofsale)
                    .HasColumnName("costofsale")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.ModuleCode)
                    .HasColumnName("Module_Code")
                    .HasDefaultValueSql("(41)");

                entity.Property(e => e.Mylineno).HasColumnName("mylineno");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PreGrn)
                    .IsRequired()
                    .HasColumnName("Pre_GRN")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.QtyLeft).HasColumnName("Qty_Left");

                entity.Property(e => e.QtyOrdered)
                    .HasColumnName("QTY_ORDERED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.SoDetNum)
                    .HasColumnName("SO_DET_NUM")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Strength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("STRENGTH");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.HasOne(d => d.CsaleNumNavigation)
                    .WithMany(p => p.CsaleDtreps)
                    .HasForeignKey(d => d.CsaleNum)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DCSALE_DTREP__DCSALE__D_0C3C90E1");
            });

            modelBuilder.Entity<CsaleHd>(entity =>
            {
                entity.HasKey(e => new { e.CsaleNum, e.Bcode })
                    .HasName("IX_CSALE_HD_CRUD");

                entity.ToTable("CSALE_HD");

                entity.HasIndex(e => e.CusCode, "ndxCSHCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CsaleNum, "ndxCSHNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CsaleDate, "ndxCsaleDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Currencycode, "ndxCurrency")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CsaleNum).HasColumnName("CSALE_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("analysis_code");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BANK_ACCT");

                entity.Property(e => e.BankReference)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("bank_reference")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BankbankAcct)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("bankbank_acct")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BankbankName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("bankbank_name")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BankrptDetnum)
                    .HasColumnName("bankrpt_detnum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Banktillno)
                    .HasColumnName("banktillno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Banktillsessno)
                    .HasColumnName("banktillsessno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cancelled).HasColumnName("CANCELLED");

                entity.Property(e => e.CashCollector)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cash_collector");

                entity.Property(e => e.Cashbalance).HasColumnName("cashbalance");

                entity.Property(e => e.Cashfromcustomer)
                    .HasColumnName("cashfromcustomer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpaid).HasColumnName("cashpaid");

                entity.Property(e => e.Cashsale).HasColumnName("CASHSALE");

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHQ_DATE");

                entity.Property(e => e.Clcoreclosed)
                    .HasColumnName("CLCORECLOSED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Clcoreclosedate)
                    .HasColumnType("datetime")
                    .HasColumnName("CLCORECLOSEDATE");

                entity.Property(e => e.Clcoredoc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CLCOREDOC")
                    .HasDefaultValueSql("('PHM')")
                    .IsFixedLength(true);

                entity.Property(e => e.Clearamt).HasColumnName("CLEARAMT");

                entity.Property(e => e.Cleared).HasColumnName("CLEARED");

                entity.Property(e => e.ClearingDate).HasColumnType("datetime");

                entity.Property(e => e.Clvisit)
                    .HasColumnName("CLVISIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.CsaleD).HasColumnName("CSALE_D");

                entity.Property(e => e.CsaleDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CSALE_DATE");

                entity.Property(e => e.CsaleNet).HasColumnName("CSALE_NET");

                entity.Property(e => e.CsaleNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("csale_number");

                entity.Property(e => e.CsaleTotal).HasColumnName("CSALE_TOTAL");

                entity.Property(e => e.CsaleVat).HasColumnName("CSALE_VAT");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.CusRef2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cus_ref2");

                entity.Property(e => e.Cuspoints)
                    .HasColumnName("CUSPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("customer_name");

                entity.Property(e => e.Docbanked)
                    .HasColumnName("docbanked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Doconhold)
                    .HasColumnName("DOCONHOLD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Docselect)
                    .HasColumnName("docselect")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.GlTradeaccount)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("GL_TRADEACCOUNT");

                entity.Property(e => e.Holding).HasColumnName("HOLDING");

                entity.Property(e => e.ItemselectionDone).HasColumnName("ITEMSELECTION_DONE");

                entity.Property(e => e.LastCollector)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("LAST_collector");

                entity.Property(e => e.Lastlineno).HasColumnName("lastlineno");

                entity.Property(e => e.Lastupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTUPDATE");

                entity.Property(e => e.Loybcode)
                    .HasColumnName("LOYBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loynum)
                    .HasColumnName("LOYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("memberno");

                entity.Property(e => e.Mempointsbuy)
                    .HasColumnName("MEMPOINTSBUY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mempointsredeem)
                    .HasColumnName("MEMPOINTSREDEEM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mpesaentryno)
                    .HasColumnName("MPESAENTRYNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mpesatransid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MPESATRANSID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mpickbcode)
                    .HasColumnName("MPICKBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mpickno)
                    .HasColumnName("MPICKNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAYMODE");

                entity.Property(e => e.Paymodenum)
                    .HasColumnName("paymodenum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Paymodetype)
                    .HasColumnName("paymodetype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Printcopy).HasColumnName("PRINTCOPY");

                entity.Property(e => e.Redeemed)
                    .HasColumnName("REDEEMED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reference");

                entity.Property(e => e.RemndNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REMND_NUMBER");

                entity.Property(e => e.Rfldate)
                    .HasColumnType("datetime")
                    .HasColumnName("RFLDATE");

                entity.Property(e => e.RptDetnum).HasColumnName("RPT_DETNUM");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales_Code");

                entity.Property(e => e.Salesman)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALESMAN");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Selected).HasColumnName("selected");

                entity.Property(e => e.Tillno)
                    .HasColumnName("TILLNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillsessno)
                    .HasColumnName("TILLSESSNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tocashier)
                    .HasColumnName("tocashier")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.TtlWeight)
                    .HasColumnName("ttl_weight")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CsaleHdrep>(entity =>
            {
                entity.HasKey(e => e.CsaleNum)
                    .IsClustered(false);

                entity.ToTable("CSALE_HDREP");

                entity.HasIndex(e => e.CsaleNumber, "csale_number")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxCSHCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CsaleNum, "ndxCSHNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CsaleDate, "ndxCsaleDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Currencycode, "ndxCurrency")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CsaleNum)
                    .ValueGeneratedNever()
                    .HasColumnName("CSALE_NUM");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("analysis_code");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BANK_ACCT");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Cancelled).HasColumnName("CANCELLED");

                entity.Property(e => e.CashCollector)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cash_collector");

                entity.Property(e => e.Cashbalance).HasColumnName("cashbalance");

                entity.Property(e => e.Cashfromcustomer)
                    .HasColumnName("cashfromcustomer")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Cashpaid).HasColumnName("cashpaid");

                entity.Property(e => e.Cashsale).HasColumnName("CASHSALE");

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHQ_DATE");

                entity.Property(e => e.Clearamt).HasColumnName("CLEARAMT");

                entity.Property(e => e.Cleared).HasColumnName("CLEARED");

                entity.Property(e => e.ClearingDate).HasColumnType("datetime");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.CsaleD).HasColumnName("CSALE_D");

                entity.Property(e => e.CsaleDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CSALE_DATE");

                entity.Property(e => e.CsaleNet).HasColumnName("CSALE_NET");

                entity.Property(e => e.CsaleNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("csale_number");

                entity.Property(e => e.CsaleTotal).HasColumnName("CSALE_TOTAL");

                entity.Property(e => e.CsaleVat).HasColumnName("CSALE_VAT");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.CusRef2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cus_ref2");

                entity.Property(e => e.Cuspoints)
                    .HasColumnName("CUSPOINTS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("customer_name");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.GlTradeaccount)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("GL_TRADEACCOUNT");

                entity.Property(e => e.Holding).HasColumnName("HOLDING");

                entity.Property(e => e.ItemselectionDone).HasColumnName("ITEMSELECTION_DONE");

                entity.Property(e => e.LastCollector)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("LAST_collector");

                entity.Property(e => e.Lastlineno).HasColumnName("lastlineno");

                entity.Property(e => e.Lastupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTUPDATE");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("memberno");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAYMODE");

                entity.Property(e => e.Printcopy).HasColumnName("PRINTCOPY");

                entity.Property(e => e.Redeemed)
                    .HasColumnName("REDEEMED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reference");

                entity.Property(e => e.RptDetnum).HasColumnName("RPT_DETNUM");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales_Code");

                entity.Property(e => e.Salesman)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALESMAN");

                entity.Property(e => e.Selected).HasColumnName("selected");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<Cstctr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CSTCTR");

                entity.HasIndex(e => e.Cstctr1, "CSTCTR")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Cstctr1)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("CSTCTR");

                entity.Property(e => e.Des)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DES_");
            });

            modelBuilder.Entity<Ct001>(entity =>
            {
                entity.HasKey(e => e.Bcode);

                entity.ToTable("CT001");

                entity.Property(e => e.Bcode)
                    .ValueGeneratedNever()
                    .HasColumnName("BCODE");

                entity.Property(e => e.Bname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BNAME");

                entity.Property(e => e.Phamahq)
                    .HasColumnName("PHAMAHQ")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Phamaip)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHAMAIP");
            });

            modelBuilder.Entity<Ctcustom>(entity =>
            {
                entity.HasKey(e => e.Tabname);

                entity.ToTable("CTCUSTOM");

                entity.Property(e => e.Tabname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TABNAME");

                entity.Property(e => e.Coreserviceno)
                    .HasColumnName("coreserviceno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dowork)
                    .HasColumnName("dowork")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fldnames)
                    .IsUnicode(false)
                    .HasColumnName("FLDNAMES");

                entity.Property(e => e.Flduniq)
                    .IsUnicode(false)
                    .HasColumnName("FLDUNIQ");

                entity.Property(e => e.Impqry)
                    .HasColumnName("IMPQRY")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Ctexstk>(entity =>
            {
                entity.HasKey(e => new { e.Bcode, e.EntryId });

                entity.ToTable("CTEXSTK");

                entity.Property(e => e.EntryId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EntryID");

                entity.Property(e => e.BatchNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BranchName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Calccost).HasColumnName("CALCCOST");

                entity.Property(e => e.DateGenerated).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("expiry_date");

                entity.Property(e => e.InvAvgcost).HasColumnName("inv_avgcost");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LocCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("loc_code");
            });

            modelBuilder.Entity<Ctidentity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CTIDENTITY");

                entity.Property(e => e.ColumnName).HasMaxLength(128);

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<Ctlogz>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CTLOGZ");

                entity.HasIndex(e => e.Logdate, "IX_CTLOGZ")
                    .IsClustered();

                entity.HasIndex(e => new { e.Modulearea, e.Modulename }, "IX_CTLOGZ_1");

                entity.Property(e => e.Logdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOGDATE");

                entity.Property(e => e.Logerror)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("LOGERROR");

                entity.Property(e => e.Logerrorid)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOGERRORID");

                entity.Property(e => e.Logid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LOGID");

                entity.Property(e => e.Loguser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOGUSER");

                entity.Property(e => e.Modulearea)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MODULEAREA");

                entity.Property(e => e.Modulecode).HasColumnName("MODULECODE");

                entity.Property(e => e.Modulename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MODULENAME");
            });

            modelBuilder.Entity<Ctmaster>(entity =>
            {
                entity.HasKey(e => e.Tabname);

                entity.ToTable("CTMASTER");

                entity.Property(e => e.Tabname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TABNAME");

                entity.Property(e => e.Coreserviceno)
                    .HasColumnName("coreserviceno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dowork)
                    .HasColumnName("dowork")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fldnames)
                    .IsUnicode(false)
                    .HasColumnName("FLDNAMES");

                entity.Property(e => e.Flduniq)
                    .IsUnicode(false)
                    .HasColumnName("FLDUNIQ");

                entity.Property(e => e.Impqry)
                    .HasColumnName("IMPQRY")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Ctstkdead>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CTSTKDEAD");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Branchname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENTRYDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Entryid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ENTRYID");

                entity.Property(e => e.Instockqty)
                    .HasColumnName("INSTOCKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Instockqtypw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INSTOCKQTYPW");

                entity.Property(e => e.Itemavgcost)
                    .HasColumnName("ITEMAVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemavgcostcalc)
                    .HasColumnName("ITEMAVGCOSTCALC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemcode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemcost)
                    .HasColumnName("ITEMCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemcostcalc)
                    .HasColumnName("ITEMCOSTCALC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemlastcost)
                    .HasColumnName("ITEMLASTCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemlastcostcalc)
                    .HasColumnName("ITEMLASTCOSTCALC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Itempack)
                    .HasColumnName("ITEMPACK")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Lastpurchcode).HasColumnName("LASTPURCHCODE");

                entity.Property(e => e.Lastpurchdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTPURCHDATE");

                entity.Property(e => e.Lastpurchdays).HasColumnName("LASTPURCHDAYS");

                entity.Property(e => e.Lastpurchname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LASTPURCHNAME");

                entity.Property(e => e.Lastsalecode).HasColumnName("LASTSALECODE");

                entity.Property(e => e.Lastsaledate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTSALEDATE");

                entity.Property(e => e.Lastsaledays).HasColumnName("LASTSALEDAYS");

                entity.Property(e => e.Lastsalename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LASTSALENAME");

                entity.Property(e => e.Manufcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANUFCODE");

                entity.Property(e => e.Manufname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("MANUFNAME");

                entity.Property(e => e.Subgcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUBGCODE");

                entity.Property(e => e.Subgname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("SUBGNAME");
            });

            modelBuilder.Entity<Ctstkdeadmake>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CTSTKDEADMAKE");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Branchname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENTRYDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Entryid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ENTRYID");

                entity.Property(e => e.Entrystatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ENTRYSTATUS");

                entity.Property(e => e.Instockqty)
                    .HasColumnName("INSTOCKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Instockqtypw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INSTOCKQTYPW");

                entity.Property(e => e.Itemavgcost)
                    .HasColumnName("ITEMAVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemavgcostcalc)
                    .HasColumnName("ITEMAVGCOSTCALC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemcode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemcost)
                    .HasColumnName("ITEMCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemcostcalc)
                    .HasColumnName("ITEMCOSTCALC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemlastcost)
                    .HasColumnName("ITEMLASTCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemlastcostcalc)
                    .HasColumnName("ITEMLASTCOSTCALC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Itempack)
                    .HasColumnName("ITEMPACK")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Lastpurchcode).HasColumnName("LASTPURCHCODE");

                entity.Property(e => e.Lastpurchdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTPURCHDATE");

                entity.Property(e => e.Lastpurchdays).HasColumnName("LASTPURCHDAYS");

                entity.Property(e => e.Lastpurchname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LASTPURCHNAME");

                entity.Property(e => e.Lastsalecode).HasColumnName("LASTSALECODE");

                entity.Property(e => e.Lastsaledate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTSALEDATE");

                entity.Property(e => e.Lastsaledays).HasColumnName("LASTSALEDAYS");

                entity.Property(e => e.Lastsalename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LASTSALENAME");

                entity.Property(e => e.Makeuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MAKEUSER");

                entity.Property(e => e.Manufcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANUFCODE");

                entity.Property(e => e.Manufname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("MANUFNAME");

                entity.Property(e => e.Subgcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUBGCODE");

                entity.Property(e => e.Subgname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("SUBGNAME");
            });

            modelBuilder.Entity<Ctstkexpired>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CTSTKEXPIRED");

                entity.Property(e => e.Batchnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BATCHNUMBER");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Branchname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENTRYDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Entryid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ENTRYID");

                entity.Property(e => e.Expcode).HasColumnName("EXPCODE");

                entity.Property(e => e.Expdate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPDATE");

                entity.Property(e => e.Expdays).HasColumnName("EXPDAYS");

                entity.Property(e => e.Expname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EXPNAME");

                entity.Property(e => e.Expstockqty).HasColumnName("EXPSTOCKQTY");

                entity.Property(e => e.Instockqty).HasColumnName("INSTOCKQTY");

                entity.Property(e => e.Instockqtypw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INSTOCKQTYPW");

                entity.Property(e => e.Itemavgcost)
                    .HasColumnName("ITEMAVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemavgcostcalc)
                    .HasColumnName("ITEMAVGCOSTCALC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemcode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemcost)
                    .HasColumnName("ITEMCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemcostcalc)
                    .HasColumnName("ITEMCOSTCALC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemlastcost)
                    .HasColumnName("ITEMLASTCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemlastcostcalc)
                    .HasColumnName("ITEMLASTCOSTCALC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Itempack)
                    .HasColumnName("ITEMPACK")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Loccode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOCCODE");

                entity.Property(e => e.Locname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("LOCNAME");

                entity.Property(e => e.Manufcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANUFCODE");

                entity.Property(e => e.Manufname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("MANUFNAME");

                entity.Property(e => e.Subgcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUBGCODE");

                entity.Property(e => e.Subgname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("SUBGNAME");
            });

            modelBuilder.Entity<Cttransact>(entity =>
            {
                entity.HasKey(e => e.Tabname);

                entity.ToTable("CTTRANSACT");

                entity.Property(e => e.Tabname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TABNAME");

                entity.Property(e => e.Coreserviceno)
                    .HasColumnName("coreserviceno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dowork)
                    .HasColumnName("dowork")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fldnames)
                    .IsUnicode(false)
                    .HasColumnName("FLDNAMES");

                entity.Property(e => e.Flduniq)
                    .IsUnicode(false)
                    .HasColumnName("FLDUNIQ");

                entity.Property(e => e.Impqry)
                    .HasColumnName("IMPQRY")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Cttransact20210211>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CTTRANSACT20210211");

                entity.Property(e => e.Dowork).HasColumnName("dowork");

                entity.Property(e => e.Fldnames)
                    .IsUnicode(false)
                    .HasColumnName("FLDNAMES");

                entity.Property(e => e.Flduniq)
                    .IsUnicode(false)
                    .HasColumnName("FLDUNIQ");

                entity.Property(e => e.Tabname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TABNAME");
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.HasKey(e => e.Currencycode)
                    .IsClustered(false);

                entity.ToTable("CURRENCIES");

                entity.HasIndex(e => e.Symbol, "ndxcurrsymbol")
                    .IsUnique();

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("currencycode");

                entity.Property(e => e.Default).HasColumnName("DEFAULT");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Symbol)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SYMBOL");
            });

            modelBuilder.Entity<Currencyrate>(entity =>
            {
                entity.HasKey(e => new { e.Currencycode, e.Period, e.Year })
                    .IsClustered(false);

                entity.ToTable("CURRENCYRATES");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Period).HasColumnName("PERIOD");

                entity.Property(e => e.Year)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("YEAR");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.Ratemultiply).HasColumnName("RATemultiply");

                entity.Property(e => e.TransNum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TRANS_NUM");
            });

            modelBuilder.Entity<CusContact>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CUS_CONTACTS");

                entity.HasIndex(e => e.CcontNum, "CCONT_NUM")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CcontNum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CCONT_NUM");

                entity.Property(e => e.Cellcountry)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CELLCOUNTRY");

                entity.Property(e => e.Cellname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CELLNAME");

                entity.Property(e => e.Cellnumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CELLNUMBER");

                entity.Property(e => e.Cellphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CELLPHONE");

                entity.Property(e => e.Contact)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Fax)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.Phyaddress)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PHYADDRESS");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TELEPHONE");
            });

            modelBuilder.Entity<CusInterest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CUS_INTEREST");

                entity.HasIndex(e => new { e.CusCode, e.TransDate, e.SaleinvNumber }, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AmountPaid).HasColumnName("AMOUNT_PAID");

                entity.Property(e => e.Batched).HasColumnName("BATCHED");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.InterestCharged).HasColumnName("INTEREST_CHARGED");

                entity.Property(e => e.InterestRate).HasColumnName("INTEREST_RATE");

                entity.Property(e => e.InvoiceAmount).HasColumnName("INVOICE_AMOUNT");

                entity.Property(e => e.InvoiceBalance).HasColumnName("INVOICE_BALANCE");

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SALEINV_NUMBER");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");
            });

            modelBuilder.Entity<CusRuntotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CUS_RUNTOTALS");

                entity.HasIndex(e => e.Idkey, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idkey)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDKEY");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_date");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<CusStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CUS_STATEMENT");

                entity.HasIndex(e => e.Id, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Username, e.CusCode }, "ndxCusCode")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Username, "ndxuser");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Bfwd).HasColumnName("BFWD");

                entity.Property(e => e.Credit).HasColumnName("CREDIT");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Debit).HasColumnName("DEBIT");

                entity.Property(e => e.Description)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Display)
                    .HasColumnName("display")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Docbal)
                    .HasColumnName("docbal")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("EXCH_RATE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Indexno).HasColumnName("INDEXNO");

                entity.Property(e => e.Ref)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("REF");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");

                entity.Property(e => e.TransType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANS_TYPE");

                entity.Property(e => e.Unallocated)
                    .HasColumnName("UNALLOCATED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Cusbranch>(entity =>
            {
                entity.HasKey(e => new { e.Bcode, e.CusCode });

                entity.ToTable("CUSBRANCH");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Branchname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");
            });

            modelBuilder.Entity<Cuscheck2008>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("cuscheck2008");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");
            });

            modelBuilder.Entity<Cusstockprice>(entity =>
            {
                entity.HasKey(e => new { e.CusCode, e.InvCode });

                entity.ToTable("CUSSTOCKPRICE");

                entity.HasIndex(e => e.Stkpricenum, "IX_CUSSTOCKPRICE")
                    .IsUnique();

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Disable).HasColumnName("DISABLE");

                entity.Property(e => e.Enddate)
                    .HasColumnType("date")
                    .HasColumnName("ENDDATE");

                entity.Property(e => e.Expired).HasColumnName("EXPIRED");

                entity.Property(e => e.Pricecompare).HasColumnName("PRICECOMPARE");

                entity.Property(e => e.Startdate)
                    .HasColumnType("date")
                    .HasColumnName("STARTDATE");

                entity.Property(e => e.Stkprice)
                    .HasColumnName("STKPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stkpricediscount)
                    .HasColumnName("STKPRICEDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stkpricenum).HasColumnName("STKPRICENUM");
            });

            modelBuilder.Entity<CustCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CUST_CATEGORY");

                entity.HasIndex(e => e.Description, "DESCRIPTION")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CategoryCode)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Notregister)
                    .HasColumnName("NOTREGISTER")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<CustDiscount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CUST_DISCOUNTS");

                entity.HasIndex(e => new { e.CusCode, e.DiscountCode, e.Worthqty }, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Expirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRYDATE");

                entity.Property(e => e.Worthqty).HasColumnName("WORTHQTY");
            });

            modelBuilder.Entity<CustItemdiscount>(entity =>
            {
                entity.HasKey(e => new { e.CusCode, e.InvCode });

                entity.ToTable("CUST_ITEMDISCOUNT");

                entity.HasIndex(e => new { e.CusCode, e.InvCode }, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CusCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_code");

                entity.Property(e => e.CashDiscount).HasColumnName("CASH_DISCOUNT");

                entity.Property(e => e.CashinvoiceDiscount)
                    .HasColumnName("cashinvoice_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Discount).HasColumnName("DISCOUNT");

                entity.Property(e => e.Expiry)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY");

                entity.Property(e => e.InvoiceDiscount).HasColumnName("INVOICE_DISCOUNT");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.HasKey(e => e.CusCode)
                    .HasName("IX_CUSTOMER_CRUD");

                entity.ToTable("CUSTOMER");

                entity.HasIndex(e => e.CategoryCode, "ndxCategoryCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CreditCode, "ndxCreditCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Currencycode, "ndxCurrencyCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Paytermcode, "ndxPaytermCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TownCode, "ndxTownCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Address)
                    .HasMaxLength(150)
                    .HasColumnName("ADDRESS")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Attachanymemberonsale)
                    .HasColumnName("attachanymemberonsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blocked)
                    .HasColumnName("BLOCKED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchdata)
                    .HasColumnName("BRANCHDATA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CategoryCode).HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.Cbrow)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CBROW");

                entity.Property(e => e.Cellcountry)
                    .HasMaxLength(255)
                    .HasColumnName("cellcountry")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cellname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cellname")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cellnumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cellnumber")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Choose)
                    .HasColumnName("choose")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Companyfax)
                    .HasMaxLength(50)
                    .HasColumnName("COMPANYFAX")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Contact)
                    .HasMaxLength(50)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Copayperc)
                    .HasColumnName("COPAYPERC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Credccode)
                    .HasColumnName("credccode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Creddiscounts)
                    .HasColumnName("CREDDISCOUNTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasColumnName("CREDIT_CODE");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.CscatgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_CODE");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(50)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode0)
                    .HasMaxLength(50)
                    .HasColumnName("CUS_CODE0");

                entity.Property(e => e.CusDesc)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Cusbcodelist)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSBCODELIST")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cusbcodenamelist)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CUSBCODENAMELIST")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cusmemberno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSMEMBERNO");

                entity.Property(e => e.Cuspoints)
                    .HasColumnName("CUSPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Customermargin)
                    .HasColumnName("customermargin")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Defcashinvoice)
                    .HasColumnName("defcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Defcustominvoice)
                    .HasColumnName("defcustominvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("email")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.EnforceTerms)
                    .HasColumnName("ENFORCE_TERMS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .HasColumnName("FAX")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Forcemember)
                    .HasColumnName("forcemember")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forcesmart)
                    .HasColumnName("forcesmart")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IgnoreMemberCopayLimitSettings).HasDefaultValueSql("((0))");

                entity.Property(e => e.Issmart)
                    .HasColumnName("issmart")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Issmartbalancecash)
                    .HasColumnName("ISSMARTBALANCECASH")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Issmartcopay)
                    .HasColumnName("ISSMARTCOPAY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastrptamount).HasColumnName("LASTRPTAMOUNT");

                entity.Property(e => e.Lastrptdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTRPTDATE");

                entity.Property(e => e.Membercopayexcess)
                    .HasColumnName("membercopayexcess")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Membercopayvoucher)
                    .HasColumnName("membercopayvoucher")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Membercorpcashexists)
                    .HasColumnName("membercorpcashexists")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberlimitamt)
                    .HasColumnName("memberlimitamt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberlimitcumulate)
                    .HasColumnName("memberlimitcumulate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberlimitdayamt)
                    .HasColumnName("memberlimitdayamt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberlimitdaymonth)
                    .HasColumnName("memberlimitdaymonth")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberlimitmonthamt)
                    .HasColumnName("memberlimitmonthamt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberlimitmonthend)
                    .HasColumnName("memberlimitmonthend")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Memberlimitmonthstart)
                    .HasColumnName("memberlimitmonthstart")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Memberlimitpercamt)
                    .HasColumnName("memberlimitpercamt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberlimitsaleperc)
                    .HasColumnName("memberlimitsaleperc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberlimittrack)
                    .HasColumnName("memberlimittrack")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ninetydays)
                    .HasColumnName("NINETYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Noalloc)
                    .HasColumnName("noalloc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nonregistered)
                    .HasColumnName("nonregistered")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Oldaccount)
                    .HasMaxLength(50)
                    .HasColumnName("oldaccount");

                entity.Property(e => e.Onetwenty)
                    .HasColumnName("ONETWENTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Openingbal)
                    .HasColumnName("openingbal")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OverAppliedBalance).HasColumnName("OverAPPLIED_BALANCE");

                entity.Property(e => e.Overapplied).HasColumnName("overapplied");

                entity.Property(e => e.Paytermcode).HasColumnName("PAYTERMCODE");

                entity.Property(e => e.Pdcheques)
                    .HasColumnName("PDCHEQUES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Phone)
                    .HasMaxLength(150)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(150)
                    .HasColumnName("PHYSICALADD")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Pin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIN")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.PrintStatement).HasDefaultValueSql("((0))");

                entity.Property(e => e.Redeemed)
                    .HasColumnName("REDEEMED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Routecode).HasColumnName("routecode");

                entity.Property(e => e.Salebelowlcost)
                    .HasColumnName("salebelowlcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Salebelowmin)
                    .HasColumnName("salebelowmin")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Salebelowminlastset)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("salebelowminlastset")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sce)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SCE")
                    .HasDefaultValueSql("('C')")
                    .IsFixedLength(true);

                entity.Property(e => e.Sixtydays)
                    .HasColumnName("SIXTYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Smscontact)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SMSCONTACT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Smscontactname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SMSCONTACTNAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StatementCurrentbal).HasColumnName("STATEMENT_CURRENTBAL");

                entity.Property(e => e.TempCreditlimit).HasColumnName("TEMP_CREDITLIMIT");

                entity.Property(e => e.TemporaryCustomer)
                    .HasColumnName("TEMPORARY_CUSTOMER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thirtydays)
                    .HasColumnName("THIRTYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thisperiod)
                    .HasColumnName("THISPERIOD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalSales).HasColumnName("TOTAL_SALES");

                entity.Property(e => e.Town)
                    .HasMaxLength(150)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TownCode).HasColumnName("town_code");

                entity.Property(e => e.Unapplied).HasColumnName("unapplied");

                entity.Property(e => e.UnappliedBalance).HasColumnName("UNAPPLIED_BALANCE");

                entity.Property(e => e.Used).HasColumnName("USED");

                entity.Property(e => e.Used2).HasColumnName("USED2");

                entity.Property(e => e.Using).HasColumnName("using");

                entity.Property(e => e.Using2).HasColumnName("using2");

                entity.Property(e => e.Vat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VAT")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Xblocked).HasColumnName("XBLOCKED");

                entity.Property(e => e.Xdaybalance)
                    .HasColumnName("xdaybalance")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CustomerMember>(entity =>
            {
                entity.HasKey(e => new { e.Memberno, e.Kahtocode })
                    .HasName("PK_CUSTOMER_MEMBERS_1");

                entity.ToTable("CUSTOMER_MEMBERS");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNO");

                entity.Property(e => e.Kahtocode).HasColumnName("kahtocode");

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Allergies)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ALLERGIES")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.Cellcountry)
                    .HasMaxLength(255)
                    .HasColumnName("cellcountry")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cellname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cellname")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cellnumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cellnumber")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cellphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CELLPHONE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contact)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contactphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTPHONE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Cuspoints)
                    .HasColumnName("cuspoints")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.Doctor)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCTOR")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Doctorphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DOCTORPHONE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("email")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Email1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FNAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Issmart)
                    .HasColumnName("issmart")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LNAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Loyalty)
                    .HasColumnName("loyalty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberdob)
                    .HasColumnType("datetime")
                    .HasColumnName("MEMBERDOB")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Membername)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNAME");

                entity.Property(e => e.Memidno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MEMIDNO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mempointsbal)
                    .HasColumnName("MEMPOINTSBAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mempointsbuy)
                    .HasColumnName("MEMPOINTSBUY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mempointsredeem)
                    .HasColumnName("MEMPOINTSREDEEM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MextraNum)
                    .HasColumnName("MEXTRA_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("mobile")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NoCopayLimit).HasDefaultValueSql("((0))");

                entity.Property(e => e.Notes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAYMODE")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.RecurrCode).HasColumnName("recurr_code");

                entity.Property(e => e.Redeemed)
                    .HasColumnName("redeemed")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SaluteCode).HasColumnName("SALUTE_CODE");

                entity.Property(e => e.Sce)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SCE")
                    .HasDefaultValueSql("('C')")
                    .IsFixedLength(true);

                entity.Property(e => e.Smartbalance)
                    .HasColumnName("smartbalance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TELEPHONE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Totalpoints)
                    .HasColumnName("totalpoints")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TownCode).HasColumnName("TOWN_CODE");

                entity.Property(e => e.Visitid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VISITID");
            });

            modelBuilder.Entity<CustomerStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CUSTOMER_STATEMENT");

                entity.HasIndex(e => new { e.Username, e.CusCode }, "ndxCusCode")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Username, "ndxuser");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.Credccode)
                    .HasColumnName("credccode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Credcname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("credcname")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Credit).HasColumnName("CREDIT");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.Cstype)
                    .HasMaxLength(255)
                    .HasColumnName("cstype");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(255)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .HasMaxLength(255)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Debit).HasColumnName("DEBIT");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Display)
                    .HasColumnName("display")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Docbal)
                    .HasColumnName("docbal")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("EXCH_RATE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Id1)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID1");

                entity.Property(e => e.Lastrptdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTRPTDATE");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Onetwenty).HasColumnName("onetwenty");

                entity.Property(e => e.Postcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("POSTCODE");

                entity.Property(e => e.ProvinceCode)
                    .HasMaxLength(255)
                    .HasColumnName("PROVINCE_CODE");

                entity.Property(e => e.Ref)
                    .HasMaxLength(255)
                    .HasColumnName("REF");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(255)
                    .HasColumnName("SALES_CODE");

                entity.Property(e => e.Showbalance).HasColumnName("SHOWBALANCE");

                entity.Property(e => e.Showcredit).HasColumnName("SHOWCREDIT");

                entity.Property(e => e.Showdebit).HasColumnName("SHOWDEBIT");

                entity.Property(e => e.Showunallocated).HasColumnName("SHOWUNALLOCATED");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.StatementCurrentbal).HasColumnName("STATEMENT_CURRENTBAL");

                entity.Property(e => e.Status)
                    .HasMaxLength(255)
                    .HasColumnName("STATUS");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TotalSales).HasColumnName("TOTAL_SALES");

                entity.Property(e => e.Town)
                    .HasMaxLength(255)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");

                entity.Property(e => e.TransType)
                    .HasMaxLength(255)
                    .HasColumnName("TRANS_TYPE");

                entity.Property(e => e.UnappliedBalance).HasColumnName("UNAPPLIED_BALANCE");

                entity.Property(e => e.Uptothirty).HasColumnName("uptothirty");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Customeraged>(entity =>
            {
                entity.HasKey(e => e.Entryno);

                entity.ToTable("CUSTOMERAGED");

                entity.Property(e => e.Entryno).HasColumnName("entryno");

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Creditlimit)
                    .HasColumnName("CREDITLIMIT")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Debcred)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DEBCRED");

                entity.Property(e => e.Docamount)
                    .HasColumnName("DOCAMOUNT")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Ninetyage)
                    .HasColumnName("NINETYAGE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Onetwentyage)
                    .HasColumnName("ONETWENTYAGE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Outstanding)
                    .HasColumnName("OUTSTANDING")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Phone)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Showpos)
                    .HasColumnName("showpos")
                    .HasDefaultValueSql("(2)");

                entity.Property(e => e.Sixtyage)
                    .HasColumnName("SIXTYAGE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Thirtyage)
                    .HasColumnName("THIRTYAGE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Town)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOWN");

                entity.Property(e => e.Transdate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSDATE");

                entity.Property(e => e.Transdesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSDESC");

                entity.Property(e => e.Transno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSNO");

                entity.Property(e => e.Transtype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSTYPE");

                entity.Property(e => e.Turnover)
                    .HasColumnName("TURNOVER")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Zeroage)
                    .HasColumnName("ZEROAGE")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<Customerledger>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CUSTOMERLEDGER");

                entity.HasIndex(e => e.CusCode, "XCUSCODE")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Batched).HasColumnName("BATCHED");

                entity.Property(e => e.Creditamount).HasColumnName("CREDITAMOUNT");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Dcn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DCN");

                entity.Property(e => e.Debitamount).HasColumnName("DEBITAMOUNT");

                entity.Property(e => e.Outstanding).HasColumnName("OUTSTANDING");

                entity.Property(e => e.Transdate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSDATE");

                entity.Property(e => e.Transdesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSDESC");

                entity.Property(e => e.Transno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSNO");

                entity.Property(e => e.Transtype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSTYPE");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Customerroute>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("customerroute");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .HasColumnName("CODE");

                entity.Property(e => e.Customer)
                    .HasMaxLength(255)
                    .HasColumnName("CUSTOMER");

                entity.Property(e => e.Route)
                    .HasMaxLength(255)
                    .HasColumnName("ROUTE");
            });

            modelBuilder.Entity<DatesTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DATES_TABLE");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");
            });

            modelBuilder.Entity<Deletelog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DELETELOG");

                entity.Property(e => e.Deletedate)
                    .HasColumnType("datetime")
                    .HasColumnName("DELETEDATE");

                entity.Property(e => e.Deletereason)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DELETEREASON");

                entity.Property(e => e.Deleteuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELETEUSER");

                entity.Property(e => e.Docname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DOCNAME");

                entity.Property(e => e.Docnum).HasColumnName("DOCNUM");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.Transtime)
                    .HasColumnType("datetime")
                    .HasColumnName("transtime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Deliverymode>(entity =>
            {
                entity.HasKey(e => e.DelCode);

                entity.ToTable("DELIVERYMODE");

                entity.Property(e => e.DelCode)
                    .ValueGeneratedNever()
                    .HasColumnName("DEL_CODE");

                entity.Property(e => e.DelName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEL_NAME");
            });

            modelBuilder.Entity<Deliverystatus>(entity =>
            {
                entity.HasKey(e => e.DstatCode);

                entity.ToTable("DELIVERYSTATUS");

                entity.Property(e => e.DstatCode)
                    .ValueGeneratedNever()
                    .HasColumnName("DSTAT_CODE");

                entity.Property(e => e.DstatName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DSTAT_NAME");
            });

            modelBuilder.Entity<Denomination>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DENOMINATIONS");

                entity.HasIndex(e => e.DenominationCode, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DenominationCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DENOMINATION_CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Valu).HasColumnName("VALU_");
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.HasKey(e => e.DeptCode);

                entity.ToTable("DEPARTMENTS");

                entity.Property(e => e.DeptCode)
                    .ValueGeneratedNever()
                    .HasColumnName("DEPT_CODE");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEPT_NAME");
            });

            modelBuilder.Entity<Dependant>(entity =>
            {
                entity.HasKey(e => new { e.CusCode, e.Memberno, e.DependNo });

                entity.ToTable("DEPENDANTS");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNO");

                entity.Property(e => e.DependNo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DEPEND_NO");

                entity.Property(e => e.DependAddr)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DEPEND_ADDR");

                entity.Property(e => e.DependDob)
                    .HasColumnType("datetime")
                    .HasColumnName("DEPEND_DOB");

                entity.Property(e => e.DependName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEPEND_NAME");

                entity.Property(e => e.DependPhone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DEPEND_PHONE");

                entity.Property(e => e.DependRef)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DEPEND_REF");

                entity.Property(e => e.DependSex)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("DEPEND_SEX");
            });

            modelBuilder.Entity<Diagnosis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DIAGNOSIS");

                entity.HasIndex(e => new { e.DiagName, e.DiagCode }, "IX_DIAGNOSIS");

                entity.HasIndex(e => e.DiagDesc, "IX_DIAGNOSIS_1");

                entity.Property(e => e.Clinicode)
                    .HasColumnName("CLINICODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DiagCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DIAG_CODE");

                entity.Property(e => e.DiagDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIAG_DESC");

                entity.Property(e => e.DiagName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIAG_NAME");

                entity.Property(e => e.DiagNum).HasColumnName("DIAG_NUM");
            });

            modelBuilder.Entity<Dip2020A>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Dip2020A");

                entity.Property(e => e.Avgcost).HasColumnName("AVGCOST");

                entity.Property(e => e.Itemcode)
                    .HasMaxLength(255)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(255)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Stockqty).HasColumnName("STOCKQTY");

                entity.Property(e => e.Stockvalue).HasColumnName("STOCKVALUE");
            });

            modelBuilder.Entity<Dip2020B>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dip2020B");

                entity.Property(e => e.Avgcost).HasColumnName("AVGCOST");

                entity.Property(e => e.Itemcode)
                    .HasMaxLength(255)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(255)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Stockqty).HasColumnName("STOCKQTY");

                entity.Property(e => e.Stockvalue).HasColumnName("STOCKVALUE");
            });

            modelBuilder.Entity<Dip2020FixA>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Dip2020FixA");

                entity.Property(e => e.Avgcost).HasColumnName("AVGCOST");

                entity.Property(e => e.Itemcode)
                    .HasMaxLength(255)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(255)
                    .HasColumnName("ITEMNAME");
            });

            modelBuilder.Entity<Discounttype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("discounttypes");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");
            });

            modelBuilder.Entity<DispenseDt>(entity =>
            {
                entity.HasKey(e => e.DispenseDetNum)
                    .IsClustered(false);

                entity.ToTable("DISPENSE_DT");

                entity.Property(e => e.DispenseDetNum)
                    .ValueGeneratedNever()
                    .HasColumnName("DISPENSE_DET_NUM");

                entity.Property(e => e.AdultChild)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("adult_child")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Authorisecode)
                    .HasColumnName("authorisecode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bill)
                    .HasColumnName("bill")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonus)
                    .HasColumnName("bonus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Cashallow)
                    .HasColumnName("cashallow")
                    .HasDefaultValueSql("((3))");

                entity.Property(e => e.Clcoredoc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CLCOREDOC")
                    .HasDefaultValueSql("('PHM')")
                    .IsFixedLength(true);

                entity.Property(e => e.Clvisit)
                    .HasColumnName("CLVISIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Costofsale)
                    .HasColumnName("costofsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.D1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d1");

                entity.Property(e => e.D2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d2");

                entity.Property(e => e.D3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d3");

                entity.Property(e => e.DeliveryNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERY_NO");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.DispenseNum).HasColumnName("DISPENSE_NUM");

                entity.Property(e => e.Drugtentryno)
                    .HasColumnName("DRUGTENTRYNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EmpNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EMP_NUM");

                entity.Property(e => e.Excise)
                    .HasColumnName("excise")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Expiry)
                    .HasColumnType("datetime")
                    .HasColumnName("expiry");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.Labt)
                    .HasColumnName("labt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.ManufC)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("manufC");

                entity.Property(e => e.ModuleCode)
                    .HasColumnName("Module_Code")
                    .HasDefaultValueSql("((4))");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Newprice).HasColumnName("NEWPRICE");

                entity.Property(e => e.Newtotalcost).HasColumnName("NEWTOTALCOST");

                entity.Property(e => e.OrdQuantity)
                    .HasColumnName("ord_quantity")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PreGrn)
                    .IsRequired()
                    .HasColumnName("Pre_GRN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.ProcCode)
                    .HasColumnName("PROC_CODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyLeft).HasColumnName("Qty_Left");

                entity.Property(e => e.QtyOrdered).HasColumnName("QTY_ORDERED");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Returned)
                    .HasColumnName("returned")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SaleinvNum)
                    .HasColumnName("saleinv_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SoDetNum)
                    .HasColumnName("SO_DET_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Taken)
                    .HasColumnName("taken")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxAmt).HasColumnName("TAX_AMT");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Theatret)
                    .HasColumnName("theatret")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.Property(e => e.W1).HasColumnName("w1");

                entity.Property(e => e.W2).HasColumnName("w2");

                entity.Property(e => e.Xpaid)
                    .HasColumnName("xpaid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Xrayt)
                    .HasColumnName("xrayt")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<DispenseHd>(entity =>
            {
                entity.HasKey(e => e.DispenseNum)
                    .IsClustered(false);

                entity.ToTable("DISPENSE_HD");

                entity.Property(e => e.DispenseNum)
                    .ValueGeneratedNever()
                    .HasColumnName("DISPENSE_NUM");

                entity.Property(e => e.Amounttopay).HasColumnName("AMOUNTTOPAY");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Authorisedby)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("authorisedby");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BranchCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_CODE");

                entity.Property(e => e.Cashsaleinvoice)
                    .HasColumnName("cashsaleinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Clcoreclosed)
                    .HasColumnName("CLCORECLOSED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Clcoreclosedate)
                    .HasColumnType("datetime")
                    .HasColumnName("CLCORECLOSEDATE");

                entity.Property(e => e.Clcoredoc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CLCOREDOC")
                    .HasDefaultValueSql("('PHM')")
                    .IsFixedLength(true);

                entity.Property(e => e.Clcoredocnum)
                    .HasColumnName("clcoredocnum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Clinic)
                    .HasColumnName("CLINIC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Clvisit)
                    .HasColumnName("CLVISIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Comments)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.Cuspoints)
                    .HasColumnName("CUSPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DependNo)
                    .HasColumnName("DEPEND_NO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DispenseD).HasColumnName("DISPENSE_D");

                entity.Property(e => e.DispenseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISPENSE_DATE");

                entity.Property(e => e.DispenseExcise)
                    .HasColumnName("DISPENSE_excise")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DispenseNet).HasColumnName("DISPENSE_NET");

                entity.Property(e => e.DispenseNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("DISPENSE_number");

                entity.Property(e => e.DispenseRef)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DISPENSE_REF");

                entity.Property(e => e.DispenseTotal).HasColumnName("DISPENSE_TOTAL");

                entity.Property(e => e.DispenseVat).HasColumnName("DISPENSE_VAT");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.Drugt).HasColumnName("DRUGT");

                entity.Property(e => e.EmpNum)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMP_NUM");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("EXCH_RATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.GlTradeaccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_TRADEACCOUNT");

                entity.Property(e => e.Insure).HasColumnName("insure");

                entity.Property(e => e.Invoicetype)
                    .HasColumnName("invoicetype")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Invtrack)
                    .HasColumnName("invtrack")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemselectionDone).HasColumnName("ITEMSELECTION_DONE");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTUPDATE");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNO");

                entity.Property(e => e.MiscCharges).HasColumnName("MISC_CHARGES");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Paying).HasColumnName("paying");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Phamacore)
                    .HasColumnName("phamacore")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Printcopy).HasColumnName("PRINTCOPY");

                entity.Property(e => e.Redeemed)
                    .HasColumnName("REDEEMED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RemndNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REMND_NUMBER");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales_Code");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.Testcomplete)
                    .HasColumnName("testcomplete")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillno)
                    .HasColumnName("TILLNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillsessno)
                    .HasColumnName("TILLSESSNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.TranspCharge).HasColumnName("transp_charge");

                entity.Property(e => e.TranspCode).HasColumnName("transp_code");

                entity.Property(e => e.TransportVat).HasColumnName("TRANSPORT_VAT");

                entity.Property(e => e.TtlWeight)
                    .HasColumnName("ttl_weight")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Urgent)
                    .HasColumnName("urgent")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Visitentrynum)
                    .HasColumnName("VISITENTRYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Visitid)
                    .HasColumnName("VISITID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<DnoteDt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DNOTE_DT");

                entity.HasIndex(e => e.DnoteDetNum, "CNOTE_DET_NUM")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DnoteNum, "ndxDnoteNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Adjustment).HasColumnName("adjustment");

                entity.Property(e => e.Applic).HasColumnName("APPLIC");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Dbatched).HasColumnName("dbatched");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.DnoteDetNum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DNOTE_DET_NUM");

                entity.Property(e => e.DnoteNum).HasColumnName("DNOTE_NUM");

                entity.Property(e => e.Expiry)
                    .HasColumnType("datetime")
                    .HasColumnName("expiry");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Oldprice).HasColumnName("OLDPRICE");

                entity.Property(e => e.Oldtotalcost).HasColumnName("OLDTOTALCOST");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.SaleinvDetNum).HasColumnName("saleinv_det_num");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<DnoteHd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DNOTE_HD");

                entity.HasIndex(e => e.DnoteNum, "CNOTE_NUM")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DnoteDate, "ndxDNoteDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DnoteNum, "ndxDnoteNum")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DnoteD).HasColumnName("DNOTE_D");

                entity.Property(e => e.DnoteDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DNOTE_DATE");

                entity.Property(e => e.DnoteNet).HasColumnName("DNOTE_NET");

                entity.Property(e => e.DnoteNum).HasColumnName("DNOTE_NUM");

                entity.Property(e => e.DnoteNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Dnote_number");

                entity.Property(e => e.DnoteTotal).HasColumnName("DNOTE_TOTAL");

                entity.Property(e => e.DnoteVat).HasColumnName("DNOTE_VAT");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Docpriority>(entity =>
            {
                entity.HasKey(e => new { e.DocNumber, e.ModuleCode });

                entity.ToTable("DOCPRIORITY");

                entity.Property(e => e.DocNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleCode).HasColumnName("Module_code");

                entity.Property(e => e.CurrentUser)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Priorityno)
                    .HasColumnName("priorityno")
                    .HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<Docselector>(entity =>
            {
                entity.HasKey(e => new { e.Modcode, e.Docdetnum, e.Docbcode, e.Docuser });

                entity.ToTable("DOCSELECTOR");

                entity.HasIndex(e => new { e.Modcode, e.Docuser }, "IX_DELUSER");

                entity.Property(e => e.Modcode).HasColumnName("MODCODE");

                entity.Property(e => e.Docdetnum).HasColumnName("DOCDETNUM");

                entity.Property(e => e.Docbcode).HasColumnName("DOCBCODE");

                entity.Property(e => e.Docuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCUSER");

                entity.Property(e => e.Adjcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("adjcode")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adjdate)
                    .HasColumnType("datetime")
                    .HasColumnName("adjdate");

                entity.Property(e => e.Adjname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("adjname")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Docsel)
                    .HasColumnName("DOCSEL")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Dosage>(entity =>
            {
                entity.HasKey(e => e.Dirno);

                entity.ToTable("DOSAGES");

                entity.HasIndex(e => e.Dircode, "IX_DOSAGES")
                    .IsUnique();

                entity.Property(e => e.Dirno)
                    .ValueGeneratedNever()
                    .HasColumnName("DIRNO");

                entity.Property(e => e.Dircode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DIRCODE");

                entity.Property(e => e.Dirtext)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DIRTEXT");
            });

            modelBuilder.Entity<DrugCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("drug_category");

                entity.HasIndex(e => e.CategoryCode, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("category_code");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Drugentry>(entity =>
            {
                entity.HasKey(e => new { e.Drugt, e.Drugtentryno });

                entity.ToTable("DRUGENTRY");

                entity.Property(e => e.Drugt).HasColumnName("DRUGT");

                entity.Property(e => e.Drugtentryno)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DRUGTENTRYNO");

                entity.Property(e => e.Bill)
                    .HasColumnName("bill")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashallow)
                    .HasColumnName("cashallow")
                    .HasDefaultValueSql("((3))");

                entity.Property(e => e.Cdocnum)
                    .HasColumnName("CDOCNUM")
                    .HasDefaultValueSql("((3))");

                entity.Property(e => e.CsaleNum)
                    .HasColumnName("CSALE_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.D1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d1");

                entity.Property(e => e.D2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d2");

                entity.Property(e => e.D3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d3");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Docdosage)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("docdosage");

                entity.Property(e => e.Docstop)
                    .HasColumnName("docstop")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Doctype)
                    .HasColumnName("doctype")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Drugdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DRUGDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmpNum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMP_NUM");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Phamadisp)
                    .HasColumnName("phamadisp")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Returncomment)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("returncomment");

                entity.Property(e => e.Returned)
                    .HasColumnName("returned")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SaleinvNum)
                    .HasColumnName("SALEINV_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxAmt).HasColumnName("TAX_AMT");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Testcomplete)
                    .HasColumnName("TESTCOMPLETE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.Visitentrynum).HasColumnName("VISITENTRYNUM");

                entity.Property(e => e.W1).HasColumnName("w1");

                entity.Property(e => e.W2).HasColumnName("w2");

                entity.Property(e => e.Xpaid)
                    .HasColumnName("xpaid")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Educoredb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("educoredb");

                entity.Property(e => e.Area).HasMaxLength(200);

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Bonus).HasColumnName("bonus");

                entity.Property(e => e.Docname)
                    .IsRequired()
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("docname");

                entity.Property(e => e.Docnumber)
                    .HasMaxLength(100)
                    .HasColumnName("docnumber");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.ModuleCode).HasColumnName("Module_Code");

                entity.Property(e => e.Partquantity).HasColumnName("PARTQUANTITY");

                entity.Property(e => e.QtyIn).HasColumnName("QTY_IN");

                entity.Property(e => e.QtyOut).HasColumnName("QTY_OUT");

                entity.Property(e => e.Searchcode).HasColumnName("searchcode");

                entity.Property(e => e.Sortord).HasColumnName("SORTORD");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransNo).HasColumnName("Trans_No");

                entity.Property(e => e.Transdate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSDATE");
            });

            modelBuilder.Entity<Empbank>(entity =>
            {
                entity.HasKey(e => e.BnkCode);

                entity.ToTable("EMPBANKS");

                entity.Property(e => e.BnkCode).HasColumnName("BNK_CODE");

                entity.Property(e => e.BnkName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BNK_NAME");
            });

            modelBuilder.Entity<Empbankbranch>(entity =>
            {
                entity.HasKey(e => new { e.BnkCode, e.BrnchCode });

                entity.ToTable("EMPBANKBRANCH");

                entity.Property(e => e.BnkCode).HasColumnName("BNK_CODE");

                entity.Property(e => e.BrnchCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRNCH_CODE");

                entity.Property(e => e.BrnchName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRNCH_NAME");

                entity.Property(e => e.Brnchdet)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BRNCHDET");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasKey(e => e.EmpNum);

                entity.ToTable("EMPLOYEE");

                entity.HasIndex(e => e.EeNum, "EE_NUM")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.EmpNum, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.EmpNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EMP_NUM");

                entity.Property(e => e.Acctname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCTNAME");

                entity.Property(e => e.Acctno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCTNO");

                entity.Property(e => e.Active)
                    .HasColumnName("ACTIVE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Bankbranch)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKBRANCH");

                entity.Property(e => e.Bankname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKNAME");

                entity.Property(e => e.Blocked)
                    .HasColumnName("BLOCKED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BnkCode).HasColumnName("BNK_CODE");

                entity.Property(e => e.BrnchCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRNCH_CODE");

                entity.Property(e => e.Cellphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CELLPHONE");

                entity.Property(e => e.ContactCall).HasColumnName("CONTACT_CALL");

                entity.Property(e => e.Contactaddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTADDRESS");

                entity.Property(e => e.Contactemail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTEMAIL");

                entity.Property(e => e.Contactmobile)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTMOBILE");

                entity.Property(e => e.Contactname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTNAME");

                entity.Property(e => e.Contactnotes)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTNOTES");

                entity.Property(e => e.Contactphone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTPHONE");

                entity.Property(e => e.Datebirth)
                    .HasColumnType("datetime")
                    .HasColumnName("DATEBIRTH");

                entity.Property(e => e.Datejoin)
                    .HasColumnType("datetime")
                    .HasColumnName("DATEJOIN");

                entity.Property(e => e.Dateleave)
                    .HasColumnType("datetime")
                    .HasColumnName("DATELEAVE");

                entity.Property(e => e.Deceased)
                    .HasColumnName("DECEASED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DepCode).HasColumnName("DEP_CODE");

                entity.Property(e => e.Docnurse)
                    .HasColumnName("DOCNURSE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EeNum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EE_NUM");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENTRYDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EtCode).HasColumnName("ET_CODE");

                entity.Property(e => e.Fax)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.Fname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FNAME");

                entity.Property(e => e.Idno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDNO");

                entity.Property(e => e.JgCode).HasColumnName("JG_CODE");

                entity.Property(e => e.Jobtitle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JOBTITLE");

                entity.Property(e => e.JtCode).HasColumnName("JT_CODE");

                entity.Property(e => e.Lastpaydate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTPAYDATE");

                entity.Property(e => e.Lastpayperiod)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("LASTPAYPERIOD");

                entity.Property(e => e.Lastprdnum)
                    .HasColumnName("LASTPRDNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LNAME");

                entity.Property(e => e.Married)
                    .HasColumnName("MARRIED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nhifno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NHIFNO");

                entity.Property(e => e.Notes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Nssfno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NSSFNO");

                entity.Property(e => e.Overtime)
                    .HasColumnName("OVERTIME")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Passportno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PASSPORTNO");

                entity.Property(e => e.Paynhif)
                    .HasColumnName("PAYNHIF")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Paynssf)
                    .HasColumnName("PAYNSSF")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Paypaye)
                    .HasColumnName("PAYPAYE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Paypension)
                    .HasColumnName("PAYPENSION")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Phyaddress)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PHYADDRESS");

                entity.Property(e => e.Pinno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PINNO");

                entity.Property(e => e.PmCode).HasColumnName("PM_CODE");

                entity.Property(e => e.PmNum)
                    .HasColumnName("PM_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Relationship)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RELATIONSHIP");

                entity.Property(e => e.SaluteCode).HasColumnName("SALUTE_CODE");

                entity.Property(e => e.Sel)
                    .HasColumnName("sel")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SexCode).HasColumnName("SEX_CODE");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TELEPHONE");

                entity.Property(e => e.TownCode).HasColumnName("TOWN_CODE");
            });

            modelBuilder.Entity<Employer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EMPLOYER");

                entity.Property(e => e.Acctname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCTNAME");

                entity.Property(e => e.Acctno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCTNO");

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.AdvanceGl)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ADVANCE_GL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANK_ACCT");

                entity.Property(e => e.BankDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANK_DESC");

                entity.Property(e => e.Bankaddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKADDRESS");

                entity.Property(e => e.Bankbranch)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKBRANCH");

                entity.Property(e => e.Bankfax)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKFAX");

                entity.Property(e => e.Bankname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKNAME");

                entity.Property(e => e.Bankphone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKPHONE");

                entity.Property(e => e.Bankphysical)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKPHYSICAL");

                entity.Property(e => e.Company)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COMPANY");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.FringeGl)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FRINGE_GL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GrossGl)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GROSS_GL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HelbGl)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("HELB_GL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NettGl)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NETT_GL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NhifGl)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NHIF_GL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nhifno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NHIFNO");

                entity.Property(e => e.NssfGl)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NSSF_GL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nssfno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NSSFNO");

                entity.Property(e => e.Nssfrate)
                    .HasColumnName("NSSFRATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Otrate)
                    .HasColumnName("OTRATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PayeGl)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PAYE_GL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Payslipmessage)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAYSLIPMESSAGE");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladdress)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHYSICALADDRESS");

                entity.Property(e => e.Pinno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PINNO");

                entity.Property(e => e.Regno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REGNO");

                entity.Property(e => e.Taxrelief)
                    .HasColumnName("TAXRELIEF")
                    .HasDefaultValueSql("((1162))");

                entity.Property(e => e.Town)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TOWN");
            });

            modelBuilder.Entity<Emptype>(entity =>
            {
                entity.HasKey(e => e.EtCode);

                entity.ToTable("EMPTYPE");

                entity.Property(e => e.EtCode).HasColumnName("ET_CODE");

                entity.Property(e => e.EtName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ET_NAME");
            });

            modelBuilder.Entity<Entity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ENTITY");

                entity.HasIndex(e => e.Entity1, "ENTITY")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Des)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Entity1)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ENTITY");
            });

            modelBuilder.Entity<Event>(entity =>
            {
                entity.HasKey(e => e.EventCode);

                entity.ToTable("EVENTS");

                entity.Property(e => e.EventCode).HasColumnName("EVENT_CODE");

                entity.Property(e => e.EventName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EVENT_NAME");
            });

            modelBuilder.Entity<Eventcalendar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EVENTCALENDAR");

                entity.Property(e => e.Chkcomplete)
                    .HasColumnName("chkcomplete")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Completenotes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("completenotes");

                entity.Property(e => e.Enddate)
                    .HasColumnType("datetime")
                    .HasColumnName("enddate");

                entity.Property(e => e.Endtime)
                    .HasColumnType("datetime")
                    .HasColumnName("endtime");

                entity.Property(e => e.Endtimecaption)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("endtimecaption");

                entity.Property(e => e.EventCode).HasColumnName("event_code");

                entity.Property(e => e.EventNum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("event_num");

                entity.Property(e => e.EventNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("event_number");

                entity.Property(e => e.Eventnotes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("eventnotes");

                entity.Property(e => e.OrigEvent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("orig_event");

                entity.Property(e => e.RecurrCode).HasColumnName("recurr_code");

                entity.Property(e => e.ReminderCode).HasColumnName("reminder_code");

                entity.Property(e => e.Startdate)
                    .HasColumnType("datetime")
                    .HasColumnName("startdate");

                entity.Property(e => e.Starttime)
                    .HasColumnType("datetime")
                    .HasColumnName("starttime");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Eventcontact>(entity =>
            {
                entity.HasKey(e => new { e.EventNumber, e.ContactNum });

                entity.ToTable("EVENTCONTACTS");

                entity.Property(e => e.EventNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("event_number");

                entity.Property(e => e.ContactNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("contact_num");

                entity.Property(e => e.Chkcomplete)
                    .HasColumnName("chkcomplete")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Completenotes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("completenotes");

                entity.Property(e => e.Entrynum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("entrynum");
            });

            modelBuilder.Entity<Eventreminder>(entity =>
            {
                entity.HasKey(e => new { e.EventNumber, e.ReminderCode });

                entity.ToTable("EVENTREMINDER");

                entity.Property(e => e.EventNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("event_number");

                entity.Property(e => e.ReminderCode).HasColumnName("reminder_code");

                entity.Property(e => e.Dismiss)
                    .HasColumnName("dismiss")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Entrynum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("entrynum");

                entity.Property(e => e.RecurrCode).HasColumnName("recurr_code");

                entity.Property(e => e.RemDate)
                    .HasColumnType("datetime")
                    .HasColumnName("REM_DATE");

                entity.Property(e => e.RemTime)
                    .HasColumnType("datetime")
                    .HasColumnName("REM_TIME");
            });

            modelBuilder.Entity<ExemptTable>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.Tablename, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Tablename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TABLENAME");
            });

            modelBuilder.Entity<ExpBranch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("expBranch");

                entity.HasIndex(e => e.Bcode, "IX_BRANCH")
                    .IsUnique()
                    .IsClustered();

                entity.HasIndex(e => e.Branchcode, "IX_expBranch")
                    .IsUnique();

                entity.HasIndex(e => e.BranchName, "IX_expBranch_1");

                entity.Property(e => e.Acct)
                    .HasColumnName("acct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Blockbranchorder)
                    .HasColumnName("blockbranchorder")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockbranchreceipt)
                    .HasColumnName("blockbranchreceipt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockbranchtransfer)
                    .HasColumnName("blockbranchtransfer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockcashinvoice)
                    .HasColumnName("blockcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockcashsale)
                    .HasColumnName("blockcashsale")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockcnote)
                    .HasColumnName("blockcnote")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockcustomer)
                    .HasColumnName("blockcustomer")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockgret)
                    .HasColumnName("blockgret")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockgrn)
                    .HasColumnName("blockgrn")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockinventory)
                    .HasColumnName("blockinventory")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockinvjournals)
                    .HasColumnName("blockinvjournals")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockporder)
                    .HasColumnName("blockporder")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockquotation)
                    .HasColumnName("blockquotation")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blocksalesinvoice)
                    .HasColumnName("blocksalesinvoice")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blocksuppinvoice)
                    .HasColumnName("blocksuppinvoice")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blocksupplier)
                    .HasColumnName("blocksupplier")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Bmtprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("BMTPREFIX");

                entity.Property(e => e.BranchIp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_IP");

                entity.Property(e => e.BranchName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_NAME");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchcostacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCOSTACCT");

                entity.Property(e => e.Branchdirect)
                    .HasColumnName("branchdirect")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchexport)
                    .HasColumnName("branchexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchgoodsacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHGOODSACCT");

                entity.Property(e => e.Branchorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("branchorderprefix");

                entity.Property(e => e.Branchreceiptprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("branchreceiptprefix")
                    .HasDefaultValueSql("('ARN')");

                entity.Property(e => e.Branchserverpath)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHSERVERPATH");

                entity.Property(e => e.Branchtransferprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("branchtransferprefix");

                entity.Property(e => e.Cashinvoiceprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cashinvoiceprefix");

                entity.Property(e => e.Cashsaleprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cashsaleprefix")
                    .HasDefaultValueSql("('CS')");

                entity.Property(e => e.Creditnoteprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("creditnoteprefix");

                entity.Property(e => e.Cstctr)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CSTCTR")
                    .IsFixedLength(true);

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Custexport)
                    .HasColumnName("custexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Databasename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DATABASENAME");

                entity.Property(e => e.Datasourcename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("datasourcename");

                entity.Property(e => e.DefLoc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DEF_LOC");

                entity.Property(e => e.Defpricingmode)
                    .HasColumnName("defpricingmode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Defpricingmodecash)
                    .HasColumnName("defpricingmodecash")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Enabled)
                    .HasColumnName("ENABLED")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Glexport)
                    .HasColumnName("glexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Goodsreceivedprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("goodsreceivedprefix");

                entity.Property(e => e.Goodsreturnedprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("goodsreturnedprefix");

                entity.Property(e => e.Importprices)
                    .HasColumnName("importprices")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Importpricesavgcost)
                    .HasColumnName("importpricesavgcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Importpriceslstcost)
                    .HasColumnName("importpriceslstcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Integrated)
                    .HasColumnName("integrated")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Invexport)
                    .HasColumnName("invexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invoicepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("invoicepartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Journalpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("journalpartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Kahawadirect)
                    .HasColumnName("kahawadirect")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahawalink)
                    .HasColumnName("kahawalink")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahbranch)
                    .HasColumnName("kahbranch")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahcustomer)
                    .HasColumnName("kahcustomer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahgl)
                    .HasColumnName("kahgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahinventory)
                    .HasColumnName("kahinventory")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahprices)
                    .HasColumnName("kahprices")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahsupplier)
                    .HasColumnName("kahsupplier")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Locationtransferprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("locationtransferprefix")
                    .HasDefaultValueSql("('ALT')");

                entity.Property(e => e.Lockdefpricingmode)
                    .HasColumnName("lockdefpricingmode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholeinvoice)
                    .HasColumnName("lockpartwholeinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholejournal)
                    .HasColumnName("lockpartwholejournal")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholesale)
                    .HasColumnName("lockpartwholesale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholestocktake)
                    .HasColumnName("lockpartwholestocktake")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mainbranch).HasColumnName("MAINBRANCH");

                entity.Property(e => e.Mnfprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MNFPREFIX");

                entity.Property(e => e.NextBmtNum)
                    .HasColumnName("nextBMT_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextMnfNum)
                    .HasColumnName("nextMNF_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextbmrdet)
                    .HasColumnName("nextbmrdet")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextbomdet)
                    .HasColumnName("nextbomdet")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextborderNum)
                    .HasColumnName("nextborder_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbrepNum)
                    .HasColumnName("nextbrep_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbrnNum)
                    .HasColumnName("nextbrn_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbtransNum)
                    .HasColumnName("nextbtrans_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcinvNum)
                    .HasColumnName("nextcinv_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcnoteNum)
                    .HasColumnName("nextcnote_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcsaleNum)
                    .HasColumnName("NEXTCSALE_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextgretNum)
                    .HasColumnName("NEXTGRET_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextgrnNum)
                    .HasColumnName("NEXTGRN_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextibiNum)
                    .HasColumnName("NEXTIBI_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextijrnnum)
                    .HasColumnName("NEXTIJRNNUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextinvjNum)
                    .HasColumnName("NEXTINVJ_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextjournNum)
                    .HasColumnName("NEXTJOURN_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextporderNum)
                    .HasColumnName("NEXTPORDER_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextquoNum)
                    .HasColumnName("NEXTQUO_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextreqNum)
                    .HasColumnName("NEXTreq_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsaleinvNum)
                    .HasColumnName("nextsaleinv_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsinvNum)
                    .HasColumnName("NEXTSINV_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsoNum)
                    .HasColumnName("NEXTSO_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Openstock)
                    .HasColumnName("openstock")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Priceexport)
                    .HasColumnName("priceexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Purchaseorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("purchaseorderprefix");

                entity.Property(e => e.Quotationprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("quotationprefix");

                entity.Property(e => e.Reqprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("reqprefix")
                    .HasDefaultValueSql("('ARQ')");

                entity.Property(e => e.Saleinvoiceprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("saleinvoiceprefix");

                entity.Property(e => e.Salepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("salepartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Salesorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("salesorderprefix");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stocktakepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("stocktakepartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("supp_code");

                entity.Property(e => e.Suppexport)
                    .HasColumnName("suppexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Supplierinvoiceprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("supplierinvoiceprefix");

                entity.Property(e => e.Transferpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("transferpartwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ExpBranchAuto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("expBranchAUTO");

                entity.HasIndex(e => e.Bcode, "IX_expBranchAUTO");

                entity.HasIndex(e => e.BranchName, "IX_expBranchAUTO_1");

                entity.Property(e => e.Acct)
                    .HasColumnName("acct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Blockbranchorder)
                    .HasColumnName("blockbranchorder")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockbranchreceipt)
                    .HasColumnName("blockbranchreceipt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockbranchtransfer)
                    .HasColumnName("blockbranchtransfer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockcashinvoice)
                    .HasColumnName("blockcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockcashsale)
                    .HasColumnName("blockcashsale")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockcnote)
                    .HasColumnName("blockcnote")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockcustomer)
                    .HasColumnName("blockcustomer")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockgret)
                    .HasColumnName("blockgret")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockgrn)
                    .HasColumnName("blockgrn")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockinventory)
                    .HasColumnName("blockinventory")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockinvjournals)
                    .HasColumnName("blockinvjournals")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockporder)
                    .HasColumnName("blockporder")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockquotation)
                    .HasColumnName("blockquotation")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blocksalesinvoice)
                    .HasColumnName("blocksalesinvoice")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blocksuppinvoice)
                    .HasColumnName("blocksuppinvoice")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blocksupplier)
                    .HasColumnName("blocksupplier")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Bmtprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("BMTPREFIX");

                entity.Property(e => e.BranchIp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_IP");

                entity.Property(e => e.BranchName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_NAME");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchcostacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCOSTACCT");

                entity.Property(e => e.Branchdirect)
                    .HasColumnName("branchdirect")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchexport)
                    .HasColumnName("branchexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchgoodsacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHGOODSACCT");

                entity.Property(e => e.Branchorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("branchorderprefix");

                entity.Property(e => e.Branchreceiptprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("branchreceiptprefix")
                    .HasDefaultValueSql("('ARN')");

                entity.Property(e => e.Branchserverpath)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHSERVERPATH");

                entity.Property(e => e.Branchtransferprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("branchtransferprefix");

                entity.Property(e => e.Cashinvoiceprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cashinvoiceprefix");

                entity.Property(e => e.Cashsaleprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cashsaleprefix")
                    .HasDefaultValueSql("('CS')");

                entity.Property(e => e.Creditnoteprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("creditnoteprefix");

                entity.Property(e => e.Cstctr)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CSTCTR")
                    .IsFixedLength(true);

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Custexport)
                    .HasColumnName("custexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Databasename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DATABASENAME");

                entity.Property(e => e.Datasourcename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("datasourcename");

                entity.Property(e => e.DefLoc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DEF_LOC");

                entity.Property(e => e.Defpricingmode)
                    .HasColumnName("defpricingmode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Defpricingmodecash)
                    .HasColumnName("defpricingmodecash")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Enabled)
                    .HasColumnName("ENABLED")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Expbcode)
                    .HasColumnName("EXPBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Glexport)
                    .HasColumnName("glexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Goodsreceivedprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("goodsreceivedprefix");

                entity.Property(e => e.Goodsreturnedprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("goodsreturnedprefix");

                entity.Property(e => e.Importprices)
                    .HasColumnName("importprices")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Importpricesavgcost)
                    .HasColumnName("importpricesavgcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Importpriceslstcost)
                    .HasColumnName("importpriceslstcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Integrated)
                    .HasColumnName("integrated")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Invexport)
                    .HasColumnName("invexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invoicepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("invoicepartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Journalpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("journalpartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Kahawadirect)
                    .HasColumnName("kahawadirect")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahawalink)
                    .HasColumnName("kahawalink")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahbranch)
                    .HasColumnName("kahbranch")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahcashprice)
                    .HasColumnName("kahcashprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahcashpricepromo)
                    .HasColumnName("kahcashpricepromo")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahcustomer)
                    .HasColumnName("kahcustomer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahgl)
                    .HasColumnName("kahgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahinventory)
                    .HasColumnName("kahinventory")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahmembers)
                    .HasColumnName("kahmembers")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahprices)
                    .HasColumnName("kahprices")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahspprice)
                    .HasColumnName("kahspprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahsupplier)
                    .HasColumnName("kahsupplier")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Locationtransferprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("locationtransferprefix")
                    .HasDefaultValueSql("('ALT')");

                entity.Property(e => e.Lockdefpricingmode)
                    .HasColumnName("lockdefpricingmode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholeinvoice)
                    .HasColumnName("lockpartwholeinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholejournal)
                    .HasColumnName("lockpartwholejournal")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholesale)
                    .HasColumnName("lockpartwholesale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholestocktake)
                    .HasColumnName("lockpartwholestocktake")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mainbranch).HasColumnName("MAINBRANCH");

                entity.Property(e => e.Mnfprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MNFPREFIX");

                entity.Property(e => e.NextBmtNum)
                    .HasColumnName("nextBMT_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextMnfNum)
                    .HasColumnName("nextMNF_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextbmrdet)
                    .HasColumnName("nextbmrdet")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextbomdet)
                    .HasColumnName("nextbomdet")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextborderNum)
                    .HasColumnName("nextborder_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbrepNum)
                    .HasColumnName("nextbrep_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbrnNum)
                    .HasColumnName("nextbrn_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbtransNum)
                    .HasColumnName("nextbtrans_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcinvNum)
                    .HasColumnName("nextcinv_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcnoteNum)
                    .HasColumnName("nextcnote_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcsaleNum)
                    .HasColumnName("NEXTCSALE_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextgretNum)
                    .HasColumnName("NEXTGRET_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextgrnNum)
                    .HasColumnName("NEXTGRN_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextibiNum)
                    .HasColumnName("NEXTIBI_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextijrnnum)
                    .HasColumnName("NEXTIJRNNUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextinvjNum)
                    .HasColumnName("NEXTINVJ_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextjournNum)
                    .HasColumnName("NEXTJOURN_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextporderNum)
                    .HasColumnName("NEXTPORDER_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextquoNum)
                    .HasColumnName("NEXTQUO_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextreqNum)
                    .HasColumnName("NEXTreq_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsaleinvNum)
                    .HasColumnName("nextsaleinv_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsinvNum)
                    .HasColumnName("NEXTSINV_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsoNum)
                    .HasColumnName("NEXTSO_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Openstock)
                    .HasColumnName("openstock")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Priceexport)
                    .HasColumnName("priceexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Purchaseorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("purchaseorderprefix");

                entity.Property(e => e.Quotationprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("quotationprefix");

                entity.Property(e => e.Reqprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("reqprefix")
                    .HasDefaultValueSql("('ARQ')");

                entity.Property(e => e.Saleinvoiceprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("saleinvoiceprefix");

                entity.Property(e => e.Salepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("salepartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Salesorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("salesorderprefix");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stocktakepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("stocktakepartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("supp_code");

                entity.Property(e => e.Suppexport)
                    .HasColumnName("suppexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Supplierinvoiceprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("supplierinvoiceprefix");

                entity.Property(e => e.Transferpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("transferpartwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ExpCustDiscount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EXP_CUST_DISCOUNTS");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Crudmode).HasColumnName("crudmode");

                entity.Property(e => e.Crudorder)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("crudorder");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Expirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRYDATE");

                entity.Property(e => e.Kahtocode).HasColumnName("kahtocode");

                entity.Property(e => e.Worthqty).HasColumnName("WORTHQTY");
            });

            modelBuilder.Entity<ExpCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EXP_CUSTOMER");

                entity.Property(e => e.Address)
                    .HasMaxLength(150)
                    .HasColumnName("ADDRESS")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Blocked)
                    .HasColumnName("BLOCKED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchdata)
                    .HasColumnName("BRANCHDATA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CategoryCode).HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.Cellcountry)
                    .HasMaxLength(255)
                    .HasColumnName("cellcountry")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cellname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cellname")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cellnumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cellnumber")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Choose)
                    .HasColumnName("choose")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Companyfax)
                    .HasMaxLength(50)
                    .HasColumnName("COMPANYFAX")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Contact)
                    .HasMaxLength(50)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Credccode)
                    .HasColumnName("credccode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Creddiscounts)
                    .HasColumnName("CREDDISCOUNTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasColumnName("CREDIT_CODE");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.CscatgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_CODE");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(50)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusCode0)
                    .HasMaxLength(50)
                    .HasColumnName("CUS_CODE0");

                entity.Property(e => e.CusDesc)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Cusmemberno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSMEMBERNO");

                entity.Property(e => e.Cuspoints)
                    .HasColumnName("CUSPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Defcashinvoice)
                    .HasColumnName("defcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Defcustominvoice)
                    .HasColumnName("defcustominvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("email")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.EnforceTerms)
                    .HasColumnName("ENFORCE_TERMS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ExpCustomermargin)
                    .HasColumnName("EXP_CUSTOMERmargin")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .HasColumnName("FAX")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Forcemember)
                    .HasColumnName("forcemember")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Issmart)
                    .HasColumnName("issmart")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastrptamount).HasColumnName("LASTRPTAMOUNT");

                entity.Property(e => e.Lastrptdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTRPTDATE");

                entity.Property(e => e.Ninetydays)
                    .HasColumnName("NINETYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Noalloc)
                    .HasColumnName("noalloc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nonregistered)
                    .HasColumnName("nonregistered")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Oldaccount)
                    .HasMaxLength(50)
                    .HasColumnName("oldaccount");

                entity.Property(e => e.Onetwenty)
                    .HasColumnName("ONETWENTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Openingbal)
                    .HasColumnName("openingbal")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OverAppliedBalance).HasColumnName("OverAPPLIED_BALANCE");

                entity.Property(e => e.Overapplied).HasColumnName("overapplied");

                entity.Property(e => e.Paytermcode).HasColumnName("PAYTERMCODE");

                entity.Property(e => e.Pdcheques)
                    .HasColumnName("PDCHEQUES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Phone)
                    .HasMaxLength(150)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(150)
                    .HasColumnName("PHYSICALADD")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Pin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIN")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.PrintStatement).HasDefaultValueSql("((0))");

                entity.Property(e => e.Redeemed)
                    .HasColumnName("REDEEMED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Routecode).HasColumnName("routecode");

                entity.Property(e => e.Sce)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SCE")
                    .HasDefaultValueSql("('C')")
                    .IsFixedLength(true);

                entity.Property(e => e.Sixtydays)
                    .HasColumnName("SIXTYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Smscontact)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SMSCONTACT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Smscontactname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SMSCONTACTNAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StatementCurrentbal).HasColumnName("STATEMENT_CURRENTBAL");

                entity.Property(e => e.TempCreditlimit).HasColumnName("TEMP_CREDITLIMIT");

                entity.Property(e => e.TemporaryCustomer)
                    .HasColumnName("TEMPORARY_CUSTOMER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thirtydays)
                    .HasColumnName("THIRTYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thisperiod)
                    .HasColumnName("THISPERIOD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalSales).HasColumnName("TOTAL_SALES");

                entity.Property(e => e.Town)
                    .HasMaxLength(150)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TownCode).HasColumnName("town_code");

                entity.Property(e => e.Unapplied).HasColumnName("unapplied");

                entity.Property(e => e.UnappliedBalance).HasColumnName("UNAPPLIED_BALANCE");

                entity.Property(e => e.Used).HasColumnName("USED");

                entity.Property(e => e.Used2).HasColumnName("USED2");

                entity.Property(e => e.Using).HasColumnName("using");

                entity.Property(e => e.Using2).HasColumnName("using2");

                entity.Property(e => e.Vat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VAT")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Xblocked).HasColumnName("XBLOCKED");

                entity.Property(e => e.Xdaybalance)
                    .HasColumnName("xdaybalance")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Expacct>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("expacct");

                entity.HasIndex(e => e.Des, "IX_expacct")
                    .IsClustered();

                entity.Property(e => e.Acct)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Acctcatgcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCTCATGCODE");

                entity.Property(e => e.Acctcatgname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCTCATGNAME");

                entity.Property(e => e.Acctendacct).HasColumnName("ACCTENDACCT");

                entity.Property(e => e.Acctstartacct).HasColumnName("ACCTSTARTACCT");

                entity.Property(e => e.Bank)
                    .HasColumnName("bank")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bdgtcat)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("BDGTCAT");

                entity.Property(e => e.Class)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CLASS");

                entity.Property(e => e.Classname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CLASSNAME");

                entity.Property(e => e.Controlacct)
                    .HasColumnName("CONTROLACCT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Des)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Hassubacct)
                    .HasColumnName("hassubacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Motheracct)
                    .HasColumnName("motheracct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mthacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mthacct");

                entity.Property(e => e.Oldacct)
                    .HasColumnName("oldacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rptcat)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RPTCAT");

                entity.Property(e => e.Rptdescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RPTDESCRIPTION");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Subacct)
                    .HasColumnName("subacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Systemacct)
                    .HasColumnName("systemacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillgl)
                    .HasColumnName("tillgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Type)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");

                entity.Property(e => e.Typename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");
            });

            modelBuilder.Entity<Expacctauto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("expacctauto");

                entity.HasIndex(e => e.Des, "IX_expacctauto")
                    .IsClustered();

                entity.Property(e => e.Acct)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Acctcatgcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCTCATGCODE");

                entity.Property(e => e.Acctcatgname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCTCATGNAME");

                entity.Property(e => e.Acctendacct).HasColumnName("ACCTENDACCT");

                entity.Property(e => e.Acctstartacct).HasColumnName("ACCTSTARTACCT");

                entity.Property(e => e.Bank)
                    .HasColumnName("bank")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bdgtcat)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("BDGTCAT");

                entity.Property(e => e.Class)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CLASS");

                entity.Property(e => e.Classname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CLASSNAME");

                entity.Property(e => e.Controlacct)
                    .HasColumnName("CONTROLACCT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Des)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Hassubacct)
                    .HasColumnName("hassubacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Motheracct)
                    .HasColumnName("motheracct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mthacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mthacct");

                entity.Property(e => e.Oldacct)
                    .HasColumnName("oldacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rptcat)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RPTCAT");

                entity.Property(e => e.Rptdescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RPTDESCRIPTION");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Subacct)
                    .HasColumnName("subacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Systemacct)
                    .HasColumnName("systemacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillgl)
                    .HasColumnName("tillgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Type)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");

                entity.Property(e => e.Typename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");
            });

            modelBuilder.Entity<Expcashprice>(entity =>
            {
                entity.HasKey(e => new { e.CusCode, e.InvCode })
                    .HasName("PK_EXPCASHPRICE_1");

                entity.ToTable("EXPCASHPRICE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Bonus).HasColumnName("BONUS");

                entity.Property(e => e.Bonus1).HasColumnName("BONUS1");

                entity.Property(e => e.Bonus2).HasColumnName("BONUS2");

                entity.Property(e => e.Bonus3).HasColumnName("BONUS3");

                entity.Property(e => e.Bonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW");

                entity.Property(e => e.Bonuspw1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW1");

                entity.Property(e => e.Bonuspw2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW2");

                entity.Property(e => e.Bonuspw3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW3");

                entity.Property(e => e.Cashpriceamt)
                    .HasColumnName("CASHPRICEAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpriceapply)
                    .HasColumnName("CASHPRICEAPPLY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpriceentrynum)
                    .HasColumnName("CASHPRICEENTRYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Discexpirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYDATE");

                entity.Property(e => e.Discexpirytime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYTIME");

                entity.Property(e => e.Discmode)
                    .HasColumnName("DISCMODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Discstartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTDATE");

                entity.Property(e => e.Discstarttime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTTIME");

                entity.Property(e => e.Disctype)
                    .HasColumnName("DISCTYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvCode1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE1");

                entity.Property(e => e.InvCode2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE2");

                entity.Property(e => e.InvCode3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE3");

                entity.Property(e => e.InvCode4)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE4");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty1)
                    .HasColumnName("PWQTY1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty2)
                    .HasColumnName("PWQTY2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty3)
                    .HasColumnName("PWQTY3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Retailprice)
                    .HasColumnName("RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spbonus).HasColumnName("SPBONUS");

                entity.Property(e => e.Spbonus1).HasColumnName("SPBONUS1");

                entity.Property(e => e.Spbonus2).HasColumnName("SPBONUS2");

                entity.Property(e => e.Spbonus3).HasColumnName("SPBONUS3");

                entity.Property(e => e.Spbonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW");

                entity.Property(e => e.Spbonuspw1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW1");

                entity.Property(e => e.Spbonuspw2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW2");

                entity.Property(e => e.Spbonuspw3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW3");

                entity.Property(e => e.Spdiscount)
                    .HasColumnName("SPDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty)
                    .HasColumnName("SPPWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty1)
                    .HasColumnName("SPPWQTY1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty2)
                    .HasColumnName("SPPWQTY2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty3)
                    .HasColumnName("SPPWQTY3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tradeprice)
                    .HasColumnName("TRADEPRICE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Expcashpriceauto>(entity =>
            {
                entity.HasKey(e => new { e.CusCode, e.InvCode })
                    .HasName("PK_EXPCASHPRICEauto_1");

                entity.ToTable("EXPCASHPRICEauto");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonus).HasColumnName("BONUS");

                entity.Property(e => e.Bonus1).HasColumnName("BONUS1");

                entity.Property(e => e.Bonus2).HasColumnName("BONUS2");

                entity.Property(e => e.Bonus3).HasColumnName("BONUS3");

                entity.Property(e => e.Bonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW");

                entity.Property(e => e.Bonuspw1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW1");

                entity.Property(e => e.Bonuspw2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW2");

                entity.Property(e => e.Bonuspw3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW3");

                entity.Property(e => e.Cashpriceamt)
                    .HasColumnName("CASHPRICEAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpriceapply)
                    .HasColumnName("CASHPRICEAPPLY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpriceentrynum)
                    .HasColumnName("CASHPRICEENTRYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Discexpirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYDATE");

                entity.Property(e => e.Discexpirytime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYTIME");

                entity.Property(e => e.Discmode)
                    .HasColumnName("DISCMODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Discstartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTDATE");

                entity.Property(e => e.Discstarttime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTTIME");

                entity.Property(e => e.Disctype)
                    .HasColumnName("DISCTYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvCode1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE1");

                entity.Property(e => e.InvCode2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE2");

                entity.Property(e => e.InvCode3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE3");

                entity.Property(e => e.InvCode4)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE4");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty1)
                    .HasColumnName("PWQTY1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty2)
                    .HasColumnName("PWQTY2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty3)
                    .HasColumnName("PWQTY3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Retailprice)
                    .HasColumnName("RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spbonus).HasColumnName("SPBONUS");

                entity.Property(e => e.Spbonus1).HasColumnName("SPBONUS1");

                entity.Property(e => e.Spbonus2).HasColumnName("SPBONUS2");

                entity.Property(e => e.Spbonus3).HasColumnName("SPBONUS3");

                entity.Property(e => e.Spbonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW");

                entity.Property(e => e.Spbonuspw1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW1");

                entity.Property(e => e.Spbonuspw2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW2");

                entity.Property(e => e.Spbonuspw3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW3");

                entity.Property(e => e.Spdiscount)
                    .HasColumnName("SPDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty)
                    .HasColumnName("SPPWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty1)
                    .HasColumnName("SPPWQTY1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty2)
                    .HasColumnName("SPPWQTY2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty3)
                    .HasColumnName("SPPWQTY3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tradeprice)
                    .HasColumnName("TRADEPRICE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Expcashpricepromo>(entity =>
            {
                entity.HasKey(e => new { e.CusCode, e.InvCode })
                    .HasName("PK_EXPCASHPRICEPROMO_1");

                entity.ToTable("EXPCASHPRICEPROMO");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Cashpricepromoamt)
                    .HasColumnName("CASHPRICEPROMOAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpricepromoapply)
                    .HasColumnName("CASHPRICEPROMOAPPLY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpricepromoentrynum)
                    .HasColumnName("CASHPRICEPROMOENTRYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Discexpirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYDATE");

                entity.Property(e => e.Discexpirytime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYTIME");

                entity.Property(e => e.Discstartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTDATE");

                entity.Property(e => e.Discstarttime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTTIME");

                entity.Property(e => e.Disctype)
                    .HasColumnName("DISCTYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvCode1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE1");

                entity.Property(e => e.InvCode2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE2");

                entity.Property(e => e.InvCode3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE3");

                entity.Property(e => e.InvCode4)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE4");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Retailprice)
                    .HasColumnName("RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spbonus).HasColumnName("SPBONUS");

                entity.Property(e => e.Spbonus1).HasColumnName("SPBONUS1");

                entity.Property(e => e.Spbonus2).HasColumnName("SPBONUS2");

                entity.Property(e => e.Spbonus3).HasColumnName("SPBONUS3");

                entity.Property(e => e.Spbonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW");

                entity.Property(e => e.Spbonuspw1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW1");

                entity.Property(e => e.Spbonuspw2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW2");

                entity.Property(e => e.Spbonuspw3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW3");

                entity.Property(e => e.Spdiscount)
                    .HasColumnName("SPDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty).HasColumnName("SPPWQTY");

                entity.Property(e => e.Sppwqty1)
                    .HasColumnName("SPPWQTY1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty2)
                    .HasColumnName("SPPWQTY2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty3)
                    .HasColumnName("SPPWQTY3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice)
                    .HasColumnName("TOTALSPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice1)
                    .HasColumnName("TOTALSPRICE1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice2)
                    .HasColumnName("TOTALSPRICE2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice3)
                    .HasColumnName("TOTALSPRICE3")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Expcashpricepromoauto>(entity =>
            {
                entity.HasKey(e => new { e.CusCode, e.InvCode })
                    .HasName("PK_EXPCASHPRICEPROMOauto_1");

                entity.ToTable("EXPCASHPRICEPROMOauto");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpricepromoamt)
                    .HasColumnName("CASHPRICEPROMOAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpricepromoapply)
                    .HasColumnName("CASHPRICEPROMOAPPLY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpricepromoentrynum)
                    .HasColumnName("CASHPRICEPROMOENTRYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Discexpirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYDATE");

                entity.Property(e => e.Discexpirytime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYTIME");

                entity.Property(e => e.Discstartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTDATE");

                entity.Property(e => e.Discstarttime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTTIME");

                entity.Property(e => e.Disctype)
                    .HasColumnName("DISCTYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvCode1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE1");

                entity.Property(e => e.InvCode2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE2");

                entity.Property(e => e.InvCode3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE3");

                entity.Property(e => e.InvCode4)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE4");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Retailprice)
                    .HasColumnName("RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spbonus).HasColumnName("SPBONUS");

                entity.Property(e => e.Spbonus1).HasColumnName("SPBONUS1");

                entity.Property(e => e.Spbonus2).HasColumnName("SPBONUS2");

                entity.Property(e => e.Spbonus3).HasColumnName("SPBONUS3");

                entity.Property(e => e.Spbonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW");

                entity.Property(e => e.Spbonuspw1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW1");

                entity.Property(e => e.Spbonuspw2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW2");

                entity.Property(e => e.Spbonuspw3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW3");

                entity.Property(e => e.Spdiscount)
                    .HasColumnName("SPDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty).HasColumnName("SPPWQTY");

                entity.Property(e => e.Sppwqty1)
                    .HasColumnName("SPPWQTY1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty2)
                    .HasColumnName("SPPWQTY2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty3)
                    .HasColumnName("SPPWQTY3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice)
                    .HasColumnName("TOTALSPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice1)
                    .HasColumnName("TOTALSPRICE1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice2)
                    .HasColumnName("TOTALSPRICE2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice3)
                    .HasColumnName("TOTALSPRICE3")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Expcustomer1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("expcustomer");

                entity.HasIndex(e => e.CusDesc, "IX_expcustomer")
                    .IsClustered();

                entity.Property(e => e.Address)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.CategoryCode).HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.Catgdescription)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CATGDESCRIPTION");

                entity.Property(e => e.Catgnotregister).HasColumnName("CATGNOTREGISTER");

                entity.Property(e => e.Companyfax)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COMPANYFAX")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Contact)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Crdawardpoints)
                    .HasColumnName("CRDAWARDPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Crddescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CRDDESCRIPTION");

                entity.Property(e => e.Crddiscount)
                    .HasColumnName("CRDDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CrdexpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CRDEXPIRY_DATE");

                entity.Property(e => e.Crdpricemarkup)
                    .HasColumnName("CRDPRICEMARKUP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CrdtradeDiscount)
                    .HasColumnName("CRDTRADE_DISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREDIT_CODE");

                entity.Property(e => e.Creditlimit)
                    .HasColumnName("CREDITLIMIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CscatgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_CODE");

                entity.Property(e => e.CscatgGl)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_GL");

                entity.Property(e => e.CscatgName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_NAME");

                entity.Property(e => e.Curdescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURDESCRIPTION");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Cursymbol)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURSYMBOL");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Defcashinvoice)
                    .HasColumnName("defcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Defcustominvoice)
                    .HasColumnName("defcustominvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("email")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.EnforceTerms)
                    .HasColumnName("ENFORCE_TERMS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forcemember)
                    .HasColumnName("forcemember")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Nonregistered)
                    .HasColumnName("nonregistered")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Paytermcode).HasColumnName("PAYTERMCODE");

                entity.Property(e => e.Phone)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PHYSICALADD")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Pin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIN")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.PtchargableAfter)
                    .HasColumnName("PTCHARGABLE_AFTER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ptdescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PTDESCRIPTION");

                entity.Property(e => e.Ptdiscount)
                    .HasColumnName("PTDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PtdiscountedDays)
                    .HasColumnName("PTDISCOUNTED_DAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PtinterestRate)
                    .HasColumnName("PTINTEREST_RATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ptnumdays)
                    .HasColumnName("PTNUMDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Routecode).HasColumnName("routecode");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TempCreditlimit)
                    .HasColumnName("TEMP_CREDITLIMIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Town)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TownCode).HasColumnName("town_code");

                entity.Property(e => e.Twnprovince)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE");

                entity.Property(e => e.TwnprovinceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE_CODE");

                entity.Property(e => e.Twntown)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNTOWN");

                entity.Property(e => e.Vat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VAT")
                    .HasDefaultValueSql("('-')");
            });

            modelBuilder.Entity<ExpcustomerMember>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EXPCUSTOMER_MEMBERS");

                entity.HasIndex(e => e.Membername, "IX_EXPCUSTOMER_MEMBERS")
                    .IsClustered();

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Allergies)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ALLERGIES");

                entity.Property(e => e.CategoryCode).HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.Catgdescription)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CATGDESCRIPTION");

                entity.Property(e => e.Cellphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CELLPHONE");

                entity.Property(e => e.Contact)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Contactphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTPHONE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .HasMaxLength(100)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Defcashinvoice)
                    .HasColumnName("defcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Doctor)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCTOR");

                entity.Property(e => e.Doctorphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DOCTORPHONE");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("email")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Fname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FNAME");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Lname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LNAME");

                entity.Property(e => e.Loyalty)
                    .HasColumnName("loyalty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberdob)
                    .HasColumnType("datetime")
                    .HasColumnName("MEMBERDOB")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Membername)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNAME");

                entity.Property(e => e.Memberno)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNO");

                entity.Property(e => e.MextraNum)
                    .HasColumnName("MEXTRA_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("mobile")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Mxemail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MXEMAIL");

                entity.Property(e => e.Mxemail1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MXEMAIL1");

                entity.Property(e => e.Notes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAYMODE")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.RecurrCode).HasColumnName("recurr_code");

                entity.Property(e => e.Salutation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SALUTATION");

                entity.Property(e => e.SaluteCode).HasColumnName("SALUTE_CODE");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TELEPHONE");

                entity.Property(e => e.TownCode).HasColumnName("TOWN_CODE");

                entity.Property(e => e.Twnprovince)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE");

                entity.Property(e => e.TwnprovinceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE_CODE");

                entity.Property(e => e.Twntown)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNTOWN");
            });

            modelBuilder.Entity<ExpcustomerMembersauto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EXPCUSTOMER_MEMBERSauto");

                entity.HasIndex(e => e.Membername, "IX_EXPCUSTOMER_MEMBERSauto")
                    .IsClustered();

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Allergies)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ALLERGIES");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blocked)
                    .HasColumnName("blocked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CategoryCode).HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.Catgdescription)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CATGDESCRIPTION");

                entity.Property(e => e.Cellphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CELLPHONE");

                entity.Property(e => e.Contact)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Contactphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTPHONE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .HasMaxLength(100)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Defcashinvoice)
                    .HasColumnName("defcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Doctor)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCTOR");

                entity.Property(e => e.Doctorphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DOCTORPHONE");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("email")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Fname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FNAME");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Lname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LNAME");

                entity.Property(e => e.Loyalty)
                    .HasColumnName("loyalty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberdob)
                    .HasColumnType("datetime")
                    .HasColumnName("MEMBERDOB")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Membername)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNAME");

                entity.Property(e => e.Memberno)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNO");

                entity.Property(e => e.MextraNum)
                    .HasColumnName("MEXTRA_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("mobile")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Mxemail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MXEMAIL");

                entity.Property(e => e.Mxemail1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MXEMAIL1");

                entity.Property(e => e.Notes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAYMODE")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.RecurrCode).HasColumnName("recurr_code");

                entity.Property(e => e.Salutation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SALUTATION");

                entity.Property(e => e.SaluteCode).HasColumnName("SALUTE_CODE");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TELEPHONE");

                entity.Property(e => e.TownCode).HasColumnName("TOWN_CODE");

                entity.Property(e => e.Twnprovince)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE");

                entity.Property(e => e.TwnprovinceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE_CODE");

                entity.Property(e => e.Twntown)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNTOWN");
            });

            modelBuilder.Entity<Expcustomerauto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("expcustomerauto");

                entity.HasIndex(e => e.CusDesc, "IX_expcustomerauto")
                    .IsClustered();

                entity.Property(e => e.Address)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blocked)
                    .HasColumnName("blocked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CategoryCode).HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.Catgdescription)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CATGDESCRIPTION");

                entity.Property(e => e.Catgnotregister).HasColumnName("CATGNOTREGISTER");

                entity.Property(e => e.Companyfax)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COMPANYFAX")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Contact)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Crdawardpoints)
                    .HasColumnName("CRDAWARDPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Crddescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CRDDESCRIPTION");

                entity.Property(e => e.Crddiscount)
                    .HasColumnName("CRDDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CrdexpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CRDEXPIRY_DATE");

                entity.Property(e => e.Crdpricemarkup)
                    .HasColumnName("CRDPRICEMARKUP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CrdtradeDiscount)
                    .HasColumnName("CRDTRADE_DISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREDIT_CODE");

                entity.Property(e => e.Creditlimit)
                    .HasColumnName("CREDITLIMIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CscatgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_CODE");

                entity.Property(e => e.CscatgGl)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_GL");

                entity.Property(e => e.CscatgName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_NAME");

                entity.Property(e => e.Curdescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURDESCRIPTION");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Cursymbol)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURSYMBOL");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Defcashinvoice)
                    .HasColumnName("defcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Defcustominvoice)
                    .HasColumnName("defcustominvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("email")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.EnforceTerms)
                    .HasColumnName("ENFORCE_TERMS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forcemember)
                    .HasColumnName("forcemember")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Nonregistered)
                    .HasColumnName("nonregistered")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Paytermcode).HasColumnName("PAYTERMCODE");

                entity.Property(e => e.Phone)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PHYSICALADD")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Pin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIN")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.PtchargableAfter)
                    .HasColumnName("PTCHARGABLE_AFTER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ptdescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PTDESCRIPTION");

                entity.Property(e => e.Ptdiscount)
                    .HasColumnName("PTDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PtdiscountedDays)
                    .HasColumnName("PTDISCOUNTED_DAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PtinterestRate)
                    .HasColumnName("PTINTEREST_RATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ptnumdays)
                    .HasColumnName("PTNUMDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Routecode).HasColumnName("routecode");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TempCreditlimit)
                    .HasColumnName("TEMP_CREDITLIMIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Town)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TownCode).HasColumnName("town_code");

                entity.Property(e => e.Twnprovince)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE");

                entity.Property(e => e.TwnprovinceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE_CODE");

                entity.Property(e => e.Twntown)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNTOWN");

                entity.Property(e => e.Vat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VAT")
                    .HasDefaultValueSql("('-')");
            });

            modelBuilder.Entity<Expinvdesc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("expinvdesc");

                entity.HasIndex(e => e.Invuser, "IX_expinvdesc");

                entity.HasIndex(e => e.Description, "IX_expinvdesc_1")
                    .IsClustered();

                entity.Property(e => e.ActiveIngredient)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_INGREDIENT");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BARCODE");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.CostofsalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COSTOFSALES_GL");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Forpackalter)
                    .HasColumnName("forpackalter")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forpackalterused)
                    .HasColumnName("forpackalterused")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gpcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GPCODE");

                entity.Property(e => e.Gpisacct)
                    .HasColumnName("GPisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gpname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GPNAME");

                entity.Property(e => e.InvBrandgeneric).HasColumnName("INV_BRANDGENERIC");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvItemcontents)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_ITEMCONTENTS");

                entity.Property(e => e.InvNotes)
                    .HasMaxLength(500)
                    .HasColumnName("inv_notes");

                entity.Property(e => e.InvPhysicalitem)
                    .IsRequired()
                    .HasColumnName("INV_PHYSICALITEM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.InvadjustmentGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INVADJUSTMENT_GL");

                entity.Property(e => e.InventoryGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inventory_gl");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Kisimax)
                    .HasColumnName("kisimax")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.Mnfcountry)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFCOUNTRY");

                entity.Property(e => e.Mnfintial)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MNFINTIAL");

                entity.Property(e => e.Mnfname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFNAME");

                entity.Property(e => e.Noexpiry).HasColumnName("noexpiry");

                entity.Property(e => e.PackQty)
                    .HasColumnName("PACK_QTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGE_CODE");

                entity.Property(e => e.PackinvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("packinv_code")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PackinvName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("packinv_name")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Pkgname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PKGNAME");

                entity.Property(e => e.Rawmaterial)
                    .HasColumnName("rawmaterial")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALES_GL");

                entity.Property(e => e.Sbggl)
                    .HasColumnName("SBGGL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgisacct)
                    .HasColumnName("SBGisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SBGNAME");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitQty).HasColumnName("UNIT_QTY");
            });

            modelBuilder.Entity<Expinventory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("expinventory");

                entity.HasIndex(e => e.Invuser, "IX_expinventory");

                entity.HasIndex(e => e.Description, "IX_expinventory_1")
                    .IsClustered();

                entity.Property(e => e.ActiveIngredient)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_INGREDIENT");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BARCODE");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.CashDiscount)
                    .HasColumnName("cash_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Contsub)
                    .HasColumnName("contsub")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostofsalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COSTOFSALES_GL");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Fastmoving)
                    .HasColumnName("fastmoving")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forrefill)
                    .HasColumnName("forrefill")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Glitem)
                    .HasColumnName("glitem")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gpcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GPCODE");

                entity.Property(e => e.Gpisacct)
                    .HasColumnName("GPisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gpname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GPNAME");

                entity.Property(e => e.Highvalue)
                    .HasColumnName("highvalue")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inclusive).HasColumnName("inclusive");

                entity.Property(e => e.InvAvgcost)
                    .HasColumnName("INV_AVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAvgsellcost)
                    .HasColumnName("INV_AVGSELLCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvBrandgeneric).HasColumnName("INV_BRANDGENERIC");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvCostprice)
                    .HasColumnName("INV_COSTPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvItemcontents)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_ITEMCONTENTS");

                entity.Property(e => e.InvLastunitcost)
                    .HasColumnName("INV_LASTUNITCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMaxprice)
                    .HasColumnName("INV_MAXPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinprice)
                    .HasColumnName("INV_MINPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvNotes)
                    .HasMaxLength(500)
                    .HasColumnName("inv_notes");

                entity.Property(e => e.InvPhysicalitem)
                    .IsRequired()
                    .HasColumnName("INV_PHYSICALITEM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvRetailprice)
                    .HasColumnName("INV_RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSpecialprice)
                    .HasColumnName("INV_SPECIALPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvTradeprice)
                    .HasColumnName("INV_TRADEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.InvWsaleprice)
                    .HasColumnName("INV_WSALEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvadjustmentGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INVADJUSTMENT_GL");

                entity.Property(e => e.InventoryGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inventory_gl");

                entity.Property(e => e.InvoiceDiscount)
                    .HasColumnName("invoice_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Iscontainer)
                    .HasColumnName("iscontainer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ismother)
                    .HasColumnName("ismother")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kisimax)
                    .HasColumnName("kisimax")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LocCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Lockprice)
                    .HasColumnName("lockprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.Mnfcountry)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFCOUNTRY");

                entity.Property(e => e.Mnfintial)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MNFINTIAL");

                entity.Property(e => e.Mnfname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFNAME");

                entity.Property(e => e.MotherinvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("motherinv_code");

                entity.Property(e => e.Noexpiry).HasColumnName("noexpiry");

                entity.Property(e => e.Notforsale)
                    .HasColumnName("notforsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PackQty)
                    .HasColumnName("PACK_QTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGE_CODE");

                entity.Property(e => e.Pkgname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PKGNAME");

                entity.Property(e => e.Prodclass)
                    .HasColumnName("prodclass")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Proditem)
                    .HasColumnName("proditem")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rawmaterial)
                    .HasColumnName("rawmaterial")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALES_GL");

                entity.Property(e => e.Sbggl)
                    .HasColumnName("SBGGL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgisacct)
                    .HasColumnName("SBGisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SBGNAME");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitQty).HasColumnName("UNIT_QTY");

                entity.Property(e => e.Yeszeroprice)
                    .HasColumnName("yeszeroprice")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Expinventoryauto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("expinventoryauto");

                entity.HasIndex(e => e.Invuser, "IX_expinventoryauto");

                entity.HasIndex(e => e.Description, "IX_expinventoryauto_1")
                    .IsClustered();

                entity.Property(e => e.ActiveIngredient)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_INGREDIENT");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BARCODE");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.CashDiscount)
                    .HasColumnName("cash_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Contsub)
                    .HasColumnName("contsub")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostofsalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COSTOFSALES_GL");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Fastmoving)
                    .HasColumnName("fastmoving")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forrefill)
                    .HasColumnName("forrefill")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Glitem)
                    .HasColumnName("glitem")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gpcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GPCODE");

                entity.Property(e => e.Gpisacct)
                    .HasColumnName("GPisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gpname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GPNAME");

                entity.Property(e => e.Highvalue)
                    .HasColumnName("highvalue")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inclusive).HasColumnName("inclusive");

                entity.Property(e => e.InvAvgcost)
                    .HasColumnName("INV_AVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAvgsellcost)
                    .HasColumnName("INV_AVGSELLCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvBrandgeneric).HasColumnName("INV_BRANDGENERIC");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvCostprice)
                    .HasColumnName("INV_COSTPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvItemcontents)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_ITEMCONTENTS");

                entity.Property(e => e.InvLastunitcost)
                    .HasColumnName("INV_LASTUNITCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMaxprice)
                    .HasColumnName("INV_MAXPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinprice)
                    .HasColumnName("INV_MINPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvNotes)
                    .HasMaxLength(500)
                    .HasColumnName("inv_notes");

                entity.Property(e => e.InvPhysicalitem)
                    .IsRequired()
                    .HasColumnName("INV_PHYSICALITEM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvRetailprice)
                    .HasColumnName("INV_RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSpecialprice)
                    .HasColumnName("INV_SPECIALPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvTradeprice)
                    .HasColumnName("INV_TRADEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.InvWsaleprice)
                    .HasColumnName("INV_WSALEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvadjustmentGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INVADJUSTMENT_GL");

                entity.Property(e => e.InventoryGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inventory_gl");

                entity.Property(e => e.InvoiceDiscount)
                    .HasColumnName("invoice_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Iscontainer)
                    .HasColumnName("iscontainer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ismother)
                    .HasColumnName("ismother")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kisimax)
                    .HasColumnName("kisimax")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Lockprice)
                    .HasColumnName("lockprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.Mnfcountry)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFCOUNTRY");

                entity.Property(e => e.Mnfintial)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MNFINTIAL");

                entity.Property(e => e.Mnfname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFNAME");

                entity.Property(e => e.MotherinvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("motherinv_code");

                entity.Property(e => e.Noexpiry).HasColumnName("noexpiry");

                entity.Property(e => e.Notforsale)
                    .HasColumnName("notforsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PackQty)
                    .HasColumnName("PACK_QTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGE_CODE");

                entity.Property(e => e.Pkgname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PKGNAME");

                entity.Property(e => e.Prodclass)
                    .HasColumnName("prodclass")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Proditem)
                    .HasColumnName("proditem")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rawmaterial)
                    .HasColumnName("rawmaterial")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALES_GL");

                entity.Property(e => e.Sbggl)
                    .HasColumnName("SBGGL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgisacct)
                    .HasColumnName("SBGisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SBGNAME");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitQty).HasColumnName("UNIT_QTY");

                entity.Property(e => e.Yeszeroprice)
                    .HasColumnName("yeszeroprice")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Expinvprice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("expinvprice");

                entity.HasIndex(e => e.Invuser, "IX_expinvprice");

                entity.HasIndex(e => e.Description, "IX_expinvprice_1")
                    .IsClustered();

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("barcode")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Blocked)
                    .HasColumnName("blocked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CashDiscount)
                    .HasColumnName("cash_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostofsalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COSTOFSALES_GL");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Gpcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GPCODE");

                entity.Property(e => e.Gpisacct)
                    .HasColumnName("GPisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gpname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GPNAME");

                entity.Property(e => e.Inclusive).HasColumnName("inclusive");

                entity.Property(e => e.InvAvgcost)
                    .HasColumnName("INV_AVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAvgsellcost)
                    .HasColumnName("INV_AVGSELLCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvCostprice)
                    .HasColumnName("INV_COSTPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvLastunitcost)
                    .HasColumnName("INV_LASTUNITCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMaxprice)
                    .HasColumnName("INV_MAXPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinprice)
                    .HasColumnName("INV_MINPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvPhysicalitem)
                    .IsRequired()
                    .HasColumnName("INV_PHYSICALITEM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvRetailprice)
                    .HasColumnName("INV_RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSpecialprice)
                    .HasColumnName("INV_SPECIALPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvTradeprice)
                    .HasColumnName("INV_TRADEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvWsaleprice)
                    .HasColumnName("INV_WSALEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvadjustmentGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INVADJUSTMENT_GL");

                entity.Property(e => e.InventoryGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inventory_gl");

                entity.Property(e => e.InvoiceDiscount)
                    .HasColumnName("invoice_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Kisimax)
                    .HasColumnName("kisimax")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockprice)
                    .HasColumnName("lockprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.Mnfcountry)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFCOUNTRY");

                entity.Property(e => e.Mnfintial)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MNFINTIAL");

                entity.Property(e => e.Mnfname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFNAME");

                entity.Property(e => e.PackQty)
                    .HasColumnName("PACK_QTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALES_GL");

                entity.Property(e => e.Sbggl)
                    .HasColumnName("SBGGL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgisacct)
                    .HasColumnName("SBGisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SBGNAME");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show1)
                    .HasColumnName("show1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show2)
                    .HasColumnName("show2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show3)
                    .HasColumnName("show3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show4)
                    .HasColumnName("show4")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show5)
                    .HasColumnName("show5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show6)
                    .HasColumnName("show6")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show7)
                    .HasColumnName("show7")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show8)
                    .HasColumnName("show8")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show9)
                    .HasColumnName("show9")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Yeszeroprice)
                    .HasColumnName("yeszeroprice")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Expspprice>(entity =>
            {
                entity.HasKey(e => new { e.SuppCode, e.InvCode })
                    .HasName("PK_EXPSPPRICE_1");

                entity.ToTable("EXPSPPRICE");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Bonus).HasColumnName("BONUS");

                entity.Property(e => e.Bonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW");

                entity.Property(e => e.Discexpirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYDATE");

                entity.Property(e => e.Discmode)
                    .HasColumnName("DISCMODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Disctype)
                    .HasColumnName("DISCTYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spbonus).HasColumnName("SPBONUS");

                entity.Property(e => e.Spbonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW");

                entity.Property(e => e.Spdiscount)
                    .HasColumnName("SPDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppriceamt)
                    .HasColumnName("SPPRICEAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppriceapply)
                    .HasColumnName("SPPRICEAPPLY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppriceentrynum)
                    .HasColumnName("SPPRICEENTRYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty)
                    .HasColumnName("SPPWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tradeprice)
                    .HasColumnName("TRADEPRICE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Expsppriceauto>(entity =>
            {
                entity.HasKey(e => new { e.SuppCode, e.InvCode })
                    .HasName("PK_EXPSPPRICEAUTO_1");

                entity.ToTable("EXPSPPRICEAUTO");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonus).HasColumnName("BONUS");

                entity.Property(e => e.Bonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW");

                entity.Property(e => e.Discexpirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYDATE");

                entity.Property(e => e.Discmode)
                    .HasColumnName("DISCMODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Disctype)
                    .HasColumnName("DISCTYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spbonus).HasColumnName("SPBONUS");

                entity.Property(e => e.Spbonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW");

                entity.Property(e => e.Spdiscount)
                    .HasColumnName("SPDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppriceamt)
                    .HasColumnName("SPPRICEAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppriceapply)
                    .HasColumnName("SPPRICEAPPLY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppriceentrynum)
                    .HasColumnName("SPPRICEENTRYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty)
                    .HasColumnName("SPPWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tradeprice)
                    .HasColumnName("TRADEPRICE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Expsupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EXPSUPPLIER");

                entity.HasIndex(e => e.SuppDesc, "IX_EXPSUPPLIER")
                    .IsClustered();

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.Curdescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURDESCRIPTION");

                entity.Property(e => e.Currencycode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Cursymbol)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURSYMBOL");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Fax)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Phone)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHYSICALADD");

                entity.Property(e => e.Pinno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PINNO");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SpcatgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_CODE");

                entity.Property(e => e.SpcatgGl)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_GL");

                entity.Property(e => e.SpcatgName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_NAME");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_DESC");

                entity.Property(e => e.Terms)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TERMS");

                entity.Property(e => e.Town)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TownCode).HasColumnName("town_code");

                entity.Property(e => e.Twnprovince)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE");

                entity.Property(e => e.TwnprovinceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE_CODE");

                entity.Property(e => e.Twntown)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNTOWN");

                entity.Property(e => e.Vatno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VATNO");
            });

            modelBuilder.Entity<Expsupplierauto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EXPSUPPLIERAUTO");

                entity.HasIndex(e => e.SuppDesc, "IX_EXPSUPPLIERAUTO")
                    .IsClustered();

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blocked)
                    .HasColumnName("blocked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.Curdescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURDESCRIPTION");

                entity.Property(e => e.Currencycode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Cursymbol)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURSYMBOL");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Fax)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Phone)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHYSICALADD");

                entity.Property(e => e.Pinno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PINNO");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SpcatgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_CODE");

                entity.Property(e => e.SpcatgGl)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_GL");

                entity.Property(e => e.SpcatgName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_NAME");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_DESC");

                entity.Property(e => e.Terms)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TERMS");

                entity.Property(e => e.Town)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TownCode).HasColumnName("town_code");

                entity.Property(e => e.Twnprovince)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE");

                entity.Property(e => e.TwnprovinceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE_CODE");

                entity.Property(e => e.Twntown)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNTOWN");

                entity.Property(e => e.Vatno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VATNO");
            });

            modelBuilder.Entity<Expsupplierkah>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("expsupplierkah");

                entity.HasIndex(e => e.SuppDesc, "IX_expsupplierkah")
                    .IsClustered();

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.Curdescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURDESCRIPTION");

                entity.Property(e => e.Currencycode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Cursymbol)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURSYMBOL");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Fax)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Phone)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHYSICALADD");

                entity.Property(e => e.Pinno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PINNO");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SpcatgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_CODE");

                entity.Property(e => e.SpcatgGl)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_GL");

                entity.Property(e => e.SpcatgName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_NAME");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_DESC");

                entity.Property(e => e.Terms)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TERMS");

                entity.Property(e => e.Town)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TownCode).HasColumnName("town_code");

                entity.Property(e => e.Twnprovince)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE");

                entity.Property(e => e.TwnprovinceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE_CODE");

                entity.Property(e => e.Twntown)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNTOWN");

                entity.Property(e => e.Vatno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VATNO");
            });

            modelBuilder.Entity<Fa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Fa");

                entity.HasIndex(e => e.Barcode, "BARCODE")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Acqdate)
                    .HasColumnType("datetime")
                    .HasColumnName("ACQDATE");

                entity.Property(e => e.Acumdepr).HasColumnName("ACUMDEPR");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("BARCODE");

                entity.Property(e => e.Basis).HasColumnName("BASIS");

                entity.Property(e => e.Cost).HasColumnName("COST");

                entity.Property(e => e.Depracct)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("DEPRACCT");

                entity.Property(e => e.Depramount).HasColumnName("DEPRAMOUNT");

                entity.Property(e => e.Deprexp)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("DEPREXP");

                entity.Property(e => e.Des)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Item)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("ITEM");

                entity.Property(e => e.Life).HasColumnName("LIFE");

                entity.Property(e => e.Method)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("METHOD");

                entity.Property(e => e.Retdate)
                    .HasColumnType("datetime")
                    .HasColumnName("RETDATE");

                entity.Property(e => e.Salvage).HasColumnName("SALVAGE");

                entity.Property(e => e.Tabl)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TABL_");

                entity.Property(e => e.Vertex)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("VERTEX");
            });

            modelBuilder.Entity<Facat>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FACAT");

                entity.HasIndex(e => e.Category, "FACAT")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Category)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CATEGORY");

                entity.Property(e => e.Depracct)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("DEPRACCT");

                entity.Property(e => e.Deprexp)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("DEPREXP");

                entity.Property(e => e.Des)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Life).HasColumnName("LIFE");

                entity.Property(e => e.Method)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("METHOD");

                entity.Property(e => e.Tabl)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TABL_");
            });

            modelBuilder.Entity<Fatable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FATABLES");

                entity.HasIndex(e => e.Tabl, "FATABLES")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Tabl)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TABL_");

                entity.Property(e => e.Year1).HasColumnName("YEAR1");

                entity.Property(e => e.Year10).HasColumnName("YEAR10");

                entity.Property(e => e.Year11).HasColumnName("YEAR11");

                entity.Property(e => e.Year12).HasColumnName("YEAR12");

                entity.Property(e => e.Year13).HasColumnName("YEAR13");

                entity.Property(e => e.Year14).HasColumnName("YEAR14");

                entity.Property(e => e.Year15).HasColumnName("YEAR15");

                entity.Property(e => e.Year16).HasColumnName("YEAR16");

                entity.Property(e => e.Year17).HasColumnName("YEAR17");

                entity.Property(e => e.Year18).HasColumnName("YEAR18");

                entity.Property(e => e.Year19).HasColumnName("YEAR19");

                entity.Property(e => e.Year2).HasColumnName("YEAR2");

                entity.Property(e => e.Year20).HasColumnName("YEAR20");

                entity.Property(e => e.Year21).HasColumnName("YEAR21");

                entity.Property(e => e.Year22).HasColumnName("YEAR22");

                entity.Property(e => e.Year23).HasColumnName("YEAR23");

                entity.Property(e => e.Year24).HasColumnName("YEAR24");

                entity.Property(e => e.Year25).HasColumnName("YEAR25");

                entity.Property(e => e.Year26).HasColumnName("YEAR26");

                entity.Property(e => e.Year27).HasColumnName("YEAR27");

                entity.Property(e => e.Year28).HasColumnName("YEAR28");

                entity.Property(e => e.Year29).HasColumnName("YEAR29");

                entity.Property(e => e.Year3).HasColumnName("YEAR3");

                entity.Property(e => e.Year30).HasColumnName("YEAR30");

                entity.Property(e => e.Year31).HasColumnName("YEAR31");

                entity.Property(e => e.Year32).HasColumnName("YEAR32");

                entity.Property(e => e.Year33).HasColumnName("YEAR33");

                entity.Property(e => e.Year34).HasColumnName("YEAR34");

                entity.Property(e => e.Year35).HasColumnName("YEAR35");

                entity.Property(e => e.Year36).HasColumnName("YEAR36");

                entity.Property(e => e.Year37).HasColumnName("YEAR37");

                entity.Property(e => e.Year38).HasColumnName("YEAR38");

                entity.Property(e => e.Year39).HasColumnName("YEAR39");

                entity.Property(e => e.Year4).HasColumnName("YEAR4");

                entity.Property(e => e.Year40).HasColumnName("YEAR40");

                entity.Property(e => e.Year5).HasColumnName("YEAR5");

                entity.Property(e => e.Year6).HasColumnName("YEAR6");

                entity.Property(e => e.Year7).HasColumnName("YEAR7");

                entity.Property(e => e.Year8).HasColumnName("YEAR8");

                entity.Property(e => e.Year9).HasColumnName("YEAR9");
            });

            modelBuilder.Entity<Finalmovement>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("finalmovement");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Instock)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("instock");

                entity.Property(e => e.InvInstockqty).HasColumnName("inv_instockqty");

                entity.Property(e => e.InvLastunitcost).HasColumnName("inv_lastunitcost");

                entity.Property(e => e.InvMinqty).HasColumnName("INV_MINQTY");

                entity.Property(e => e.Pqty).HasColumnName("PQTY");

                entity.Property(e => e.Spdisc).HasColumnName("spdisc");

                entity.Property(e => e.Spprice).HasColumnName("spprice");

                entity.Property(e => e.Stockcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("stockcode");

                entity.Property(e => e.Stockqty)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("stockqty");

                entity.Property(e => e.Wqty).HasColumnName("WQTY");

                entity.Property(e => e._201305).HasColumnName("201305");

                entity.Property(e => e._201306).HasColumnName("201306");

                entity.Property(e => e._201307).HasColumnName("201307");

                entity.Property(e => e._201308).HasColumnName("201308");

                entity.Property(e => e._201309).HasColumnName("201309");

                entity.Property(e => e._201310).HasColumnName("201310");

                entity.Property(e => e._201311).HasColumnName("201311");

                entity.Property(e => e._201312).HasColumnName("201312");

                entity.Property(e => e._201401).HasColumnName("201401");

                entity.Property(e => e._201402).HasColumnName("201402");

                entity.Property(e => e._201403).HasColumnName("201403");

                entity.Property(e => e._201404).HasColumnName("201404");
            });

            modelBuilder.Entity<Fyeka>(entity =>
            {
                entity.HasKey(e => e.Modcode);

                entity.ToTable("FYEKA");

                entity.Property(e => e.Modcode)
                    .ValueGeneratedNever()
                    .HasColumnName("MODCODE");

                entity.Property(e => e.Docname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCNAME");

                entity.Property(e => e.Panguza)
                    .HasColumnName("PANGUZA")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Gender>(entity =>
            {
                entity.HasKey(e => e.SexCode);

                entity.ToTable("GENDER");

                entity.Property(e => e.SexCode).HasColumnName("SEX_CODE");

                entity.Property(e => e.SexName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SEX_NAME");
            });

            modelBuilder.Entity<Gl>(entity =>
            {
                entity.HasKey(e => new { e.MyCounter, e.Bcode })
                    .IsClustered(false);

                entity.ToTable("GL");

                entity.HasIndex(e => e.CusCode, "NDXCUS");

                entity.HasIndex(e => new { e.ModuleCode, e.Bcode, e.Transno }, "NDXDELGLTRANSREP");

                entity.HasIndex(e => e.SuppCode, "NDXSUPP");

                entity.HasIndex(e => new { e.ModuleCode, e.Invc }, "NdxGlRepost");

                entity.HasIndex(e => new { e.ModuleCode, e.Transno }, "NdxGlRepost2");

                entity.HasIndex(e => new { e.Period, e.Acct }, "gl_pd")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.Acct, e.Period }, "ndxACCT");

                entity.HasIndex(e => e.Dat, "ndxdat")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Dat, e.Period, e.Acct }, "ndxdate")
                    .IsClustered();

                entity.HasIndex(e => new { e.ModuleCode, e.Invc, e.Bcode }, "ndxdelglinvcrep");

                entity.HasIndex(e => e.Acct, "ndxglACCT")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.Systemgl, "ndxsysgl");

                entity.HasIndex(e => e.Period, "ndxtheperiod");

                entity.Property(e => e.MyCounter).ValueGeneratedOnAdd();

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Acct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Affected).HasColumnName("AFFECTED");

                entity.Property(e => e.Astbooknum)
                    .HasColumnName("astbooknum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Astcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("astcode")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Batch)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("BATCH");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Closing).HasColumnName("CLOSING");

                entity.Property(e => e.Credit)
                    .HasColumnType("money")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Dat)
                    .HasColumnType("datetime")
                    .HasColumnName("DAT_");

                entity.Property(e => e.Debit)
                    .HasColumnType("money")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Des)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Invc)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("INVC");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.Period)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Systemgl)
                    .HasColumnName("systemgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transno).HasColumnName("TRANSNO");
            });

            modelBuilder.Entity<Gl2010>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GL2010");

                entity.Property(e => e.Acct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Affected).HasColumnName("AFFECTED");

                entity.Property(e => e.Batch)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("BATCH");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Bposted).HasColumnName("bposted");

                entity.Property(e => e.Closing).HasColumnName("CLOSING");

                entity.Property(e => e.Credit)
                    .HasColumnType("money")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Dat)
                    .HasColumnType("datetime")
                    .HasColumnName("DAT_");

                entity.Property(e => e.Debit)
                    .HasColumnType("money")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Des)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Invc)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("INVC");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.Period)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Systemgl).HasColumnName("systemgl");

                entity.Property(e => e.Transno).HasColumnName("TRANSNO");
            });

            modelBuilder.Entity<GlTran>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GL_TRANS");

                entity.Property(e => e.Account)
                    .HasColumnType("text")
                    .HasColumnName("ACCOUNT");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_NAME");

                entity.Property(e => e.Basis)
                    .HasColumnType("text")
                    .HasColumnName("BASIS");

                entity.Property(e => e.Code)
                    .HasColumnType("text")
                    .HasColumnName("CODE");

                entity.Property(e => e.Contra)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONTRA");

                entity.Property(e => e.ContraName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONTRA_NAME");

                entity.Property(e => e.Credit).HasColumnName("CREDIT");

                entity.Property(e => e.Debit).HasColumnName("DEBIT");

                entity.Property(e => e.Documenttype)
                    .HasColumnType("text")
                    .HasColumnName("DOCUMENTTYPE");

                entity.Property(e => e.Name)
                    .HasColumnType("text")
                    .HasColumnName("NAME");

                entity.Property(e => e.Ref)
                    .HasColumnType("text")
                    .HasColumnName("REF");

                entity.Property(e => e.Transdate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSDATE");
            });

            modelBuilder.Entity<Glacct>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GLACCTS");

                entity.HasIndex(e => e.Acctno, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Acctdesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCTDESC");

                entity.Property(e => e.Acctno)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("ACCTNO");

                entity.Property(e => e.FincatCode).HasColumnName("FINCAT_CODE");

                entity.Property(e => e.Fincategory)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FINCATEGORY");
            });

            modelBuilder.Entity<Glbatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GLBATCH");

                entity.HasIndex(e => e.Batchid, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Batchid).HasColumnName("BATCHID");

                entity.Property(e => e.Description)
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Gdc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("GDC");

                entity.Property(e => e.JobCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("JOB_CODE");

                entity.Property(e => e.OpenitemType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OPENITEM_TYPE");

                entity.Property(e => e.Period).HasColumnName("PERIOD");

                entity.Property(e => e.Posted)
                    .IsRequired()
                    .HasColumnName("POSTED")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Posting).HasColumnName("POSTING");

                entity.Property(e => e.Reference)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCE");

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.TaxAmount).HasColumnName("TAX_AMOUNT");

                entity.Property(e => e.TaxType).HasColumnName("TAX_TYPE");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");
            });

            modelBuilder.Entity<Glbook>(entity =>
            {
                entity.HasKey(e => e.Entryno)
                    .HasName("PK_GLDOCS");

                entity.ToTable("GLBOOKS");

                entity.HasIndex(e => e.Username, "IX_GLBOOKS");

                entity.Property(e => e.Entryno).HasColumnName("ENTRYNO");

                entity.Property(e => e.Acct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Acctname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCTNAME");

                entity.Property(e => e.Custsup)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTSUP");

                entity.Property(e => e.Docacc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DOCACC");

                entity.Property(e => e.Docname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCNAME");

                entity.Property(e => e.Doctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DOCTYPE");

                entity.Property(e => e.Glcredit)
                    .HasColumnName("GLCREDIT")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Gldate)
                    .HasColumnType("datetime")
                    .HasColumnName("GLDATE");

                entity.Property(e => e.Gldebit)
                    .HasColumnName("GLDEBIT")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Gldesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GLDESC");

                entity.Property(e => e.Glpos).HasColumnName("GLPOS");

                entity.Property(e => e.Glref)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GLREF");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Glbudget>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GLBudget");

                entity.Property(e => e.Acct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Affected).HasColumnName("AFFECTED");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dat)
                    .HasColumnType("datetime")
                    .HasColumnName("DAT_");

                entity.Property(e => e.Debitcredit)
                    .HasColumnType("money")
                    .HasColumnName("DEBITCREDIT");

                entity.Property(e => e.Des)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Invc)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("INVC");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.MyBudgCounter).ValueGeneratedOnAdd();

                entity.Property(e => e.Period)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Systemgl)
                    .HasColumnName("systemgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transno).HasColumnName("TRANSNO");
            });

            modelBuilder.Entity<Glcore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GLCORE");

                entity.Property(e => e.Acct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Affected).HasColumnName("AFFECTED");

                entity.Property(e => e.Batch)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("BATCH");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Bposted).HasColumnName("bposted");

                entity.Property(e => e.Closing).HasColumnName("CLOSING");

                entity.Property(e => e.Credit)
                    .HasColumnType("money")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Dat)
                    .HasColumnType("datetime")
                    .HasColumnName("DAT_");

                entity.Property(e => e.Debit)
                    .HasColumnType("money")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Des)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Invc)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("INVC");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.MyCounter).ValueGeneratedOnAdd();

                entity.Property(e => e.Period)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Systemgl).HasColumnName("systemgl");

                entity.Property(e => e.Transno).HasColumnName("TRANSNO");
            });

            modelBuilder.Entity<Glhist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GLHIST");

                entity.HasIndex(e => new { e.Period, e.Acct }, "GLH_PD")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Acct, "ndxAcct")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Period, "ndxPeriod")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Acct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Curcr).HasColumnName("CURCR");

                entity.Property(e => e.Curdr).HasColumnName("CURDR");

                entity.Property(e => e.Oldcr).HasColumnName("OLDCR");

                entity.Property(e => e.Olddr).HasColumnName("OLDDR");

                entity.Property(e => e.Period)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");
            });

            modelBuilder.Entity<Gljrnbatch>(entity =>
            {
                entity.HasKey(e => e.Gljrnnum);

                entity.ToTable("GLJRNBATCH");

                entity.Property(e => e.Gljrnnum)
                    .ValueGeneratedNever()
                    .HasColumnName("GLJRNNUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Companyid)
                    .HasColumnName("companyid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Frompayroll)
                    .HasColumnName("frompayroll")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gljrndate)
                    .HasColumnType("date")
                    .HasColumnName("GLJRNDATE");

                entity.Property(e => e.Gljrndesc)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("GLJRNDESC");

                entity.Property(e => e.Gljrnref)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("GLJRNREF");

                entity.Property(e => e.Glposted)
                    .HasColumnName("GLPOSTED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<Glopen>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GLOPEN");

                entity.Property(e => e.Acct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Affected).HasColumnName("AFFECTED");

                entity.Property(e => e.Batch)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("BATCH");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Bposted).HasColumnName("bposted");

                entity.Property(e => e.Closing).HasColumnName("CLOSING");

                entity.Property(e => e.Credit)
                    .HasColumnType("money")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Dat)
                    .HasColumnType("datetime")
                    .HasColumnName("DAT_");

                entity.Property(e => e.Debit)
                    .HasColumnType("money")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Des)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate");

                entity.Property(e => e.Id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Invc)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("INVC");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.Period)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Systemgl).HasColumnName("systemgl");

                entity.Property(e => e.Transno).HasColumnName("TRANSNO");
            });

            modelBuilder.Entity<Glref>(entity =>
            {
                entity.HasKey(e => e.Glrefcode);

                entity.ToTable("GLREF");

                entity.HasIndex(e => e.Glrefname, "UniqueName")
                    .IsUnique();

                entity.Property(e => e.Glrefcode).HasColumnName("GLREFCODE");

                entity.Property(e => e.Glrefname)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("GLREFNAME");
            });

            modelBuilder.Entity<Glrep>(entity =>
            {
                entity.HasKey(e => new { e.MyCounter, e.Bcode })
                    .IsClustered(false);

                entity.ToTable("GLREP");

                entity.HasIndex(e => new { e.Period, e.Acct }, "GLREP_pd")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.CusCode, "NDXCUS");

                entity.HasIndex(e => e.SuppCode, "NDXSUPP");

                entity.HasIndex(e => new { e.Invc, e.ModuleCode, e.Bcode }, "invc");

                entity.HasIndex(e => new { e.Acct, e.Period }, "ndxACCT");

                entity.HasIndex(e => e.Acct, "ndxGLREPACCT")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.Dat, "ndxdat")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Dat, e.Period, e.Acct }, "ndxdate")
                    .IsClustered();

                entity.HasIndex(e => e.SystemGl, "ndxsysGLREP");

                entity.HasIndex(e => e.Period, "ndxtheperiod");

                entity.HasIndex(e => new { e.ModuleCode, e.Transno }, "xtrans");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Acct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Affected).HasColumnName("AFFECTED");

                entity.Property(e => e.Batch)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("BATCH");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Closing).HasColumnName("CLOSING");

                entity.Property(e => e.Credit)
                    .HasColumnType("money")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Dat)
                    .HasColumnType("datetime")
                    .HasColumnName("DAT_");

                entity.Property(e => e.Debit)
                    .HasColumnType("money")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Des)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Invc)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("INVC");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.Period)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SystemGl)
                    .HasColumnName("systemGL")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Transno).HasColumnName("TRANSNO");
            });

            modelBuilder.Entity<Glstock>(entity =>
            {
                entity.HasKey(e => e.Theyear);

                entity.ToTable("GLSTOCK");

                entity.Property(e => e.Theyear)
                    .ValueGeneratedNever()
                    .HasColumnName("THEYEAR");

                entity.Property(e => e.Closingstock)
                    .HasColumnName("CLOSINGSTOCK")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Openingstock)
                    .HasColumnName("OPENINGSTOCK")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<Glsystem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GLSYSTEM");

                entity.HasIndex(e => new { e.Period, e.Acct }, "gl_pd")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.Acct, e.Period }, "ndxACCT");

                entity.HasIndex(e => e.Dat, "ndxdat")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Dat, e.Period, e.Acct }, "ndxdate")
                    .IsClustered();

                entity.HasIndex(e => e.Acct, "ndxglACCT")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.Systemgl, "ndxsysgl");

                entity.Property(e => e.Acct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Affected).HasColumnName("AFFECTED");

                entity.Property(e => e.Batch)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("BATCH");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Closing).HasColumnName("CLOSING");

                entity.Property(e => e.Credit)
                    .HasColumnType("money")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Dat)
                    .HasColumnType("datetime")
                    .HasColumnName("DAT_");

                entity.Property(e => e.Debit)
                    .HasColumnType("money")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Des)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Invc)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("INVC");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.MyCounter).ValueGeneratedOnAdd();

                entity.Property(e => e.Period)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Systemgl)
                    .HasColumnName("systemgl")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Transno).HasColumnName("TRANSNO");
            });

            modelBuilder.Entity<Goldfinger>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GOLDFINGER");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Docnum).HasColumnName("docnum");

                entity.Property(e => e.Docnumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("docnumber");

                entity.Property(e => e.Glcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("glcode");

                entity.Property(e => e.ModuleCode).HasColumnName("module_code");

                entity.Property(e => e.Notequal)
                    .HasColumnName("notequal")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Notingl)
                    .HasColumnName("notingl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("supp_code");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Xratenet)
                    .HasColumnName("xratenet")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Goldgl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("goldgl");

                entity.HasIndex(e => new { e.Dat, e.ModuleCode }, "IX_goldgl");

                entity.Property(e => e.Acct)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Affected)
                    .HasColumnName("AFFECTED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Batch)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("BATCH");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Closing).HasColumnName("CLOSING");

                entity.Property(e => e.Credit)
                    .HasColumnType("money")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Dat)
                    .HasColumnType("datetime")
                    .HasColumnName("DAT_");

                entity.Property(e => e.Debit)
                    .HasColumnType("money")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.Des)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Invc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INVC");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.Period)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Systemgl)
                    .HasColumnName("systemgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transno).HasColumnName("TRANSNO");
            });

            modelBuilder.Entity<Gp1>(entity =>
            {
                entity.HasKey(e => e.Gp1code);

                entity.ToTable("GP1");

                entity.Property(e => e.Gp1code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GP1CODE");

                entity.Property(e => e.Gp1name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GP1NAME");
            });

            modelBuilder.Entity<Gp2>(entity =>
            {
                entity.HasKey(e => new { e.Gp1code, e.Gp2code });

                entity.ToTable("GP2");

                entity.Property(e => e.Gp1code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GP1CODE");

                entity.Property(e => e.Gp2code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GP2CODE");

                entity.Property(e => e.Gp2name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GP2NAME");
            });

            modelBuilder.Entity<Gp3>(entity =>
            {
                entity.HasKey(e => new { e.Gp3code, e.Gp2code });

                entity.ToTable("GP3");

                entity.Property(e => e.Gp3code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GP3CODE");

                entity.Property(e => e.Gp2code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GP2CODE");

                entity.Property(e => e.Gp3name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GP3NAME");
            });

            modelBuilder.Entity<Gp4>(entity =>
            {
                entity.HasKey(e => new { e.Gp3code, e.Gp4code });

                entity.ToTable("GP4");

                entity.Property(e => e.Gp3code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GP3CODE");

                entity.Property(e => e.Gp4code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GP4CODE");

                entity.Property(e => e.Gp4name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GP4NAME");
            });

            modelBuilder.Entity<GretC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("gret_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<GretDt>(entity =>
            {
                entity.HasKey(e => new { e.GretNum, e.GretDetNum, e.Bcode })
                    .HasName("IX_GRET_DT_CRUD");

                entity.ToTable("GRET_DT");

                entity.HasIndex(e => e.GretNum, "ndxGretNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.GretNum).HasColumnName("GRET_NUM");

                entity.Property(e => e.GretDetNum).HasColumnName("GRET_DET_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Bonus).HasColumnName("bonus");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Costfactor)
                    .HasColumnName("COSTFACTOR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DeptCode)
                    .HasColumnName("dept_code")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Excise)
                    .HasColumnName("excise")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Expiry)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY");

                entity.Property(e => e.InstkNum).HasColumnName("INSTK_NUM");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Mylineno).HasColumnName("mylineno");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity)
                    .HasColumnName("QUANTITY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SinvDetNum).HasColumnName("SINV_DET_NUM");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransNumber).HasColumnName("TRANS_NUMBER");

                entity.Property(e => e.Txperc)
                    .HasColumnName("TXPERC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Txtype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TXTYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<GretDtrep>(entity =>
            {
                entity.HasKey(e => new { e.GretNum, e.GretDetNum });

                entity.ToTable("GRET_DTREP");

                entity.HasIndex(e => e.GretDetNum, "CNOTE_DET_NUM")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.GretNum, "ndxGretNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.GretNum).HasColumnName("GRET_NUM");

                entity.Property(e => e.GretDetNum).HasColumnName("GRET_DET_NUM");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bonus).HasColumnName("bonus");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Expiry)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY");

                entity.Property(e => e.InstkNum).HasColumnName("INSTK_NUM");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Mylineno).HasColumnName("mylineno");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.SinvDetNum).HasColumnName("SINV_DET_NUM");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransNumber).HasColumnName("TRANS_NUMBER");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<GretHd>(entity =>
            {
                entity.HasKey(e => new { e.GretNum, e.Bcode })
                    .HasName("IX_GRET_HD_CRUD");

                entity.ToTable("GRET_HD");

                entity.HasIndex(e => e.Currencycode, "ndxCurrency")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.GretDate, "ndxGretDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.GretNumber, "ndxGretNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SuppCode, "ndxSuppCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.GretNum).HasColumnName("GRET_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.ContNum).HasColumnName("CONT_NUM");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("EXCH_RATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Existingitems).HasColumnName("existingitems");

                entity.Property(e => e.Fromgrn).HasColumnName("FROMGRN");

                entity.Property(e => e.GretD).HasColumnName("GRET_D");

                entity.Property(e => e.GretDate)
                    .HasColumnType("datetime")
                    .HasColumnName("GRET_DATE");

                entity.Property(e => e.GretExcise)
                    .HasColumnName("gret_excise")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GretNet).HasColumnName("GRET_NET");

                entity.Property(e => e.GretNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GRET_number");

                entity.Property(e => e.GretTotal).HasColumnName("GRET_TOTAL");

                entity.Property(e => e.GretVat).HasColumnName("GRET_VAT");

                entity.Property(e => e.Lastlineno).HasColumnName("lastlineno");

                entity.Property(e => e.ModuleCode).HasColumnName("module_code");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("printcopy")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.SinvNum).HasColumnName("SINV_NUM");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_REF");

                entity.Property(e => e.SuppRefG)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_REF_G");

                entity.Property(e => e.Suppcleared)
                    .HasColumnName("SUPPCLEARED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Suppclearingdate)
                    .HasColumnType("datetime")
                    .HasColumnName("SUPPCLEARINGDATE");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Whvat)
                    .HasColumnName("whvat")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Whvatamt)
                    .HasColumnName("whvatamt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Whvatcode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("whvatcode")
                    .HasDefaultValueSql("('00')")
                    .IsFixedLength(true);

                entity.Property(e => e.Whvatperc)
                    .HasColumnName("whvatperc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<GretHdrep>(entity =>
            {
                entity.HasKey(e => e.GretNum);

                entity.ToTable("GRET_HDREP");

                entity.HasIndex(e => e.GretNum, "CNOTE_NUM")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Currencycode, "ndxCurrency")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.GretDate, "ndxGretDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.GretNumber, "ndxGretNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SuppCode, "ndxSuppCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.GretNum)
                    .ValueGeneratedNever()
                    .HasColumnName("GRET_NUM");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.ContNum).HasColumnName("CONT_NUM");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("EXCH_RATE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Existingitems).HasColumnName("existingitems");

                entity.Property(e => e.Fromgrn).HasColumnName("FROMGRN");

                entity.Property(e => e.GretD).HasColumnName("GRET_D");

                entity.Property(e => e.GretDate)
                    .HasColumnType("datetime")
                    .HasColumnName("GRET_DATE");

                entity.Property(e => e.GretNet).HasColumnName("GRET_NET");

                entity.Property(e => e.GretNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GRET_number");

                entity.Property(e => e.GretTotal).HasColumnName("GRET_TOTAL");

                entity.Property(e => e.GretVat).HasColumnName("GRET_VAT");

                entity.Property(e => e.Lastlineno).HasColumnName("lastlineno");

                entity.Property(e => e.ModuleCode).HasColumnName("module_code");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("printcopy")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.SinvNum).HasColumnName("SINV_NUM");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_REF");

                entity.Property(e => e.SuppRefG)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_REF_G");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<Grettrack>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GRETTRACK");

                entity.Property(e => e.Gtrack)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("gtrack");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inv_code");

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.Taken).HasColumnName("taken");
            });

            modelBuilder.Entity<Grn001>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GRN001");
            });

            modelBuilder.Entity<Grn002>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GRN002");
            });

            modelBuilder.Entity<GrnC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("grn_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<GrnDt>(entity =>
            {
                entity.HasKey(e => new { e.GrnNum, e.GrnDetNum, e.Bcode })
                    .HasName("IX_GRN_DT_CRUD");

                entity.ToTable("GRN_DT");

                entity.HasIndex(e => e.GrnNum, "ndxGrnNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCode, "ndxTaxCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.GrnNum).HasColumnName("GRN_NUM");

                entity.Property(e => e.GrnDetNum).HasColumnName("GRN_DET_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Bonus).HasColumnName("BONUS");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Expiry)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Metquantity).HasColumnName("metquantity");

                entity.Property(e => e.ModuleCode)
                    .HasColumnName("Module_Code")
                    .HasDefaultValueSql("((11))");

                entity.Property(e => e.Mylineno).HasColumnName("mylineno");

                entity.Property(e => e.OrdQuantity).HasColumnName("ord_quantity");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PorderDetNum).HasColumnName("PORDER_DET_NUM");

                entity.Property(e => e.PreGrn)
                    .IsRequired()
                    .HasColumnName("Pre_GRN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Prov).HasColumnName("prov");

                entity.Property(e => e.ProvisionCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PROVISION_CODE");

                entity.Property(e => e.ProvisionDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PROVISION_DESC");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyLeft).HasColumnName("Qty_Left");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Remquantity).HasColumnName("remquantity");

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.SinvDetNum).HasColumnName("sinv_det_num");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Tcost).HasColumnName("tcost");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransNumber).HasColumnName("trans_number");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<GrnHd>(entity =>
            {
                entity.HasKey(e => new { e.GrnNum, e.Bcode })
                    .HasName("IX_GRN_HD_CRUD");

                entity.ToTable("GRN_HD");

                entity.HasIndex(e => e.Currencycode, "ndxCurrencyCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.GrnDate, "ndxGrnDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.GrnNumber, "ndxGrnNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SuppCode, "ndxSuppCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.GrnNum).HasColumnName("GRN_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Amounttopay).HasColumnName("AMOUNTTOPAY");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.ContNum).HasColumnName("cont_num");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.GrnD).HasColumnName("grn_D");

                entity.Property(e => e.GrnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("GRN_DATE");

                entity.Property(e => e.GrnNet).HasColumnName("grn_NET");

                entity.Property(e => e.GrnNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("grn_number");

                entity.Property(e => e.GrnTotal).HasColumnName("grn_total");

                entity.Property(e => e.GrnVat).HasColumnName("grn_VAT");

                entity.Property(e => e.Idfno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IDFNO");

                entity.Property(e => e.Lastlineno).HasColumnName("lastlineno");

                entity.Property(e => e.POrderNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("pORDER_NUMber");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Paying).HasColumnName("paying");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("printcopy")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_REF");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Usedup).HasColumnName("USEDUP");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Hrsource>(entity =>
            {
                entity.HasKey(e => e.Hrsid);

                entity.ToTable("HRSOURCE");

                entity.Property(e => e.Hrsid)
                    .ValueGeneratedNever()
                    .HasColumnName("HRSID");

                entity.Property(e => e.Cellcountry)
                    .HasMaxLength(255)
                    .HasColumnName("CELLCOUNTRY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cellname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CELLNAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cellnumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CELLNUMBER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Hrsdl)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HRSDL");

                entity.Property(e => e.Hrsemail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HRSEMAIL");

                entity.Property(e => e.Hrsfname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HRSFNAME");

                entity.Property(e => e.Hrsintext)
                    .HasColumnName("HRSINTEXT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Hrslname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HRSLNAME");

                entity.Property(e => e.Hrsnatid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HRSNATID");

                entity.Property(e => e.Indelivery)
                    .HasColumnName("INDELIVERY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indispatch)
                    .HasColumnName("INDISPATCH")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indriver)
                    .HasColumnName("INDRIVER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Instore).HasColumnName("INSTORE");

                entity.Property(e => e.Inverification)
                    .HasColumnName("INVERIFICATION")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<IbiC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("ibi_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<IbiDt>(entity =>
            {
                entity.HasKey(e => new { e.IbiNum, e.IbiDetNum, e.Bcode })
                    .HasName("IX_IBI_DT_CRUD");

                entity.ToTable("IBI_DT");

                entity.Property(e => e.IbiNum).HasColumnName("IBI_NUM");

                entity.Property(e => e.IbiDetNum).HasColumnName("IBI_DET_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Bcoderet)
                    .HasColumnName("bcoderet")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Delivered)
                    .HasColumnName("DELIVERED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Detpending)
                    .HasColumnName("detpending")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EntryDetnum).HasColumnName("entry_detnum");

                entity.Property(e => e.Ibireturn)
                    .HasColumnName("ibireturn")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InstkNum).HasColumnName("INSTK_NUM");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(15)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Metquantity).HasColumnName("METQUANTITY");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OrdQuantity)
                    .HasColumnName("ORD_QUANTITY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Remquantity).HasColumnName("REMQUANTITY");

                entity.Property(e => e.ReqDetNum)
                    .HasColumnName("req_det_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RetDetNum)
                    .HasColumnName("ret_det_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("trans_time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<IbiHd>(entity =>
            {
                entity.HasKey(e => new { e.IbiNum, e.Bcode })
                    .HasName("IX_IBI_HD_CRUD");

                entity.ToTable("IBI_HD");

                entity.Property(e => e.IbiNum).HasColumnName("IBI_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bcoderet)
                    .HasColumnName("bcoderet")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bincode1)
                    .HasColumnName("bincode1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bincode2)
                    .HasColumnName("bincode2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cancelled).HasColumnName("CANCELLED");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Comments)
                    .HasMaxLength(100)
                    .HasColumnName("comments");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(50)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cus_code1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CusCode2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cus_code2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cusname1)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("cusname1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cusname2)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("cusname2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.ExpDelivery)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EXP_DELIVERY");

                entity.Property(e => e.IbiD).HasColumnName("IBI_D");

                entity.Property(e => e.IbiDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("IBI_DATE");

                entity.Property(e => e.IbiNet).HasColumnName("IBI_NET");

                entity.Property(e => e.IbiNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("IBI_number");

                entity.Property(e => e.IbiRef)
                    .HasMaxLength(50)
                    .HasColumnName("IBI_REF");

                entity.Property(e => e.IbiTotal).HasColumnName("IBI_total");

                entity.Property(e => e.IbiVat).HasColumnName("IBI_VAT");

                entity.Property(e => e.Ibireturn)
                    .HasColumnName("ibireturn")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ibitype)
                    .HasColumnName("IBITYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IssueLoc)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("ISSUE_LOC");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pending).HasColumnName("pending");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("printcopy")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PrqNum).HasColumnName("PRQ_NUM");

                entity.Property(e => e.ReceivingLoc)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("RECEIVING_LOC");

                entity.Property(e => e.RetNum)
                    .HasColumnName("ret_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RetNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ret_number")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(50)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(10)
                    .HasColumnName("sales_code");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName).HasMaxLength(10);

                entity.Property(e => e.Usermodify).HasMaxLength(20);

                entity.Property(e => e.Wasbatched)
                    .HasColumnName("wasbatched")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Ibireference>(entity =>
            {
                entity.HasKey(e => e.Ibirefnumber);

                entity.ToTable("IBIREFERENCE");

                entity.Property(e => e.Ibirefnumber).HasColumnName("IBIREFNUMBER");

                entity.Property(e => e.Ibirefname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("IBIREFNAME");
            });

            modelBuilder.Entity<Ijrncode>(entity =>
            {
                entity.HasKey(e => e.Ijrntypenum);

                entity.ToTable("IJRNCODES");

                entity.Property(e => e.Ijrntypenum).HasColumnName("ijrntypenum");

                entity.Property(e => e.Attachgl)
                    .HasColumnName("attachgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Costofsalesacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("costofsalesacct");

                entity.Property(e => e.Expenseacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("expenseacct");

                entity.Property(e => e.Ijrndesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ijrndesc");

                entity.Property(e => e.Ijrnref)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ijrnref");

                entity.Property(e => e.Ijrntype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ijrntype");
            });

            modelBuilder.Entity<ImpBranch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("impBranch");

                entity.HasIndex(e => e.Bcode, "IX_BRANCH")
                    .IsUnique()
                    .IsClustered();

                entity.HasIndex(e => e.Branchcode, "IX_impBranch")
                    .IsUnique();

                entity.HasIndex(e => e.BranchName, "IX_impBranch_1");

                entity.Property(e => e.Acct)
                    .HasColumnName("acct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Blockbranchorder)
                    .HasColumnName("blockbranchorder")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockbranchreceipt)
                    .HasColumnName("blockbranchreceipt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockbranchtransfer)
                    .HasColumnName("blockbranchtransfer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockcashinvoice)
                    .HasColumnName("blockcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockcashsale)
                    .HasColumnName("blockcashsale")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockcnote)
                    .HasColumnName("blockcnote")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockcustomer)
                    .HasColumnName("blockcustomer")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockgret)
                    .HasColumnName("blockgret")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockgrn)
                    .HasColumnName("blockgrn")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockinventory)
                    .HasColumnName("blockinventory")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockinvjournals)
                    .HasColumnName("blockinvjournals")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockporder)
                    .HasColumnName("blockporder")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockquotation)
                    .HasColumnName("blockquotation")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blocksalesinvoice)
                    .HasColumnName("blocksalesinvoice")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blocksuppinvoice)
                    .HasColumnName("blocksuppinvoice")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blocksupplier)
                    .HasColumnName("blocksupplier")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Bmtprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("BMTPREFIX");

                entity.Property(e => e.BranchIp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_IP");

                entity.Property(e => e.BranchName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_NAME");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchcostacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCOSTACCT");

                entity.Property(e => e.Branchdirect)
                    .HasColumnName("branchdirect")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchexport)
                    .HasColumnName("branchexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchgoodsacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHGOODSACCT");

                entity.Property(e => e.Branchorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("branchorderprefix");

                entity.Property(e => e.Branchreceiptprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("branchreceiptprefix")
                    .HasDefaultValueSql("('ARN')");

                entity.Property(e => e.Branchserverpath)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHSERVERPATH");

                entity.Property(e => e.Branchtransferprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("branchtransferprefix");

                entity.Property(e => e.Brexpupdate)
                    .HasColumnName("brexpupdate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashinvoiceprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cashinvoiceprefix");

                entity.Property(e => e.Cashsaleprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cashsaleprefix")
                    .HasDefaultValueSql("('CS')");

                entity.Property(e => e.Creditnoteprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("creditnoteprefix");

                entity.Property(e => e.Cstctr)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CSTCTR")
                    .IsFixedLength(true);

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Custexport)
                    .HasColumnName("custexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Custexpupdate)
                    .HasColumnName("custexpupdate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Databasename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DATABASENAME");

                entity.Property(e => e.Datasourcename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("datasourcename");

                entity.Property(e => e.DefLoc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DEF_LOC");

                entity.Property(e => e.Defpricingmode)
                    .HasColumnName("defpricingmode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Defpricingmodecash)
                    .HasColumnName("defpricingmodecash")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Enabled)
                    .HasColumnName("ENABLED")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Glexport)
                    .HasColumnName("glexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Glexpupdate)
                    .HasColumnName("glexpupdate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Goodsreceivedprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("goodsreceivedprefix");

                entity.Property(e => e.Goodsreturnedprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("goodsreturnedprefix");

                entity.Property(e => e.Importprices)
                    .HasColumnName("importprices")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Importpricesavgcost)
                    .HasColumnName("importpricesavgcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Importpriceslstcost)
                    .HasColumnName("importpriceslstcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Integrated)
                    .HasColumnName("integrated")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Invexport)
                    .HasColumnName("invexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invexpupdate)
                    .HasColumnName("invexpupdate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invoicepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("invoicepartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Journalpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("journalpartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Kahawadirect)
                    .HasColumnName("kahawadirect")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahawalink)
                    .HasColumnName("kahawalink")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahbranch)
                    .HasColumnName("kahbranch")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahcustomer)
                    .HasColumnName("kahcustomer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahgl)
                    .HasColumnName("kahgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahinventory)
                    .HasColumnName("kahinventory")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahprices)
                    .HasColumnName("kahprices")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahsupplier)
                    .HasColumnName("kahsupplier")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Locationtransferprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("locationtransferprefix")
                    .HasDefaultValueSql("('ALT')");

                entity.Property(e => e.Lockdefpricingmode)
                    .HasColumnName("lockdefpricingmode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholeinvoice)
                    .HasColumnName("lockpartwholeinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholejournal)
                    .HasColumnName("lockpartwholejournal")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholesale)
                    .HasColumnName("lockpartwholesale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholestocktake)
                    .HasColumnName("lockpartwholestocktake")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mainbranch).HasColumnName("MAINBRANCH");

                entity.Property(e => e.Mnfprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MNFPREFIX");

                entity.Property(e => e.NextBmtNum)
                    .HasColumnName("nextBMT_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextMnfNum)
                    .HasColumnName("nextMNF_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextbmrdet)
                    .HasColumnName("nextbmrdet")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextbomdet)
                    .HasColumnName("nextbomdet")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextborderNum)
                    .HasColumnName("nextborder_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbrepNum)
                    .HasColumnName("nextbrep_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbrnNum)
                    .HasColumnName("nextbrn_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbtransNum)
                    .HasColumnName("nextbtrans_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcinvNum)
                    .HasColumnName("nextcinv_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcnoteNum)
                    .HasColumnName("nextcnote_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcsaleNum)
                    .HasColumnName("NEXTCSALE_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextgretNum)
                    .HasColumnName("NEXTGRET_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextgrnNum)
                    .HasColumnName("NEXTGRN_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextibiNum)
                    .HasColumnName("NEXTIBI_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextijrnnum)
                    .HasColumnName("NEXTIJRNNUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextinvjNum)
                    .HasColumnName("NEXTINVJ_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextjournNum)
                    .HasColumnName("NEXTJOURN_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextporderNum)
                    .HasColumnName("NEXTPORDER_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextquoNum)
                    .HasColumnName("NEXTQUO_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextreqNum)
                    .HasColumnName("NEXTreq_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsaleinvNum)
                    .HasColumnName("nextsaleinv_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsinvNum)
                    .HasColumnName("NEXTSINV_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsoNum)
                    .HasColumnName("NEXTSO_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Openstock)
                    .HasColumnName("openstock")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Priceexport)
                    .HasColumnName("priceexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Purchaseorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("purchaseorderprefix");

                entity.Property(e => e.Quotationprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("quotationprefix");

                entity.Property(e => e.Reqprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("reqprefix")
                    .HasDefaultValueSql("('ARQ')");

                entity.Property(e => e.Saleinvoiceprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("saleinvoiceprefix");

                entity.Property(e => e.Salepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("salepartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Salesorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("salesorderprefix");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stocktakepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("stocktakepartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("supp_code");

                entity.Property(e => e.Suppexport)
                    .HasColumnName("suppexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Suppexpupdate)
                    .HasColumnName("suppexpupdate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Supplierinvoiceprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("supplierinvoiceprefix");

                entity.Property(e => e.Transferpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("transferpartwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ImpBranchauto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("impBranchauto");

                entity.HasIndex(e => e.Bcode, "IX_BRANCH")
                    .IsClustered();

                entity.HasIndex(e => e.Branchcode, "IX_impBranchauto");

                entity.HasIndex(e => e.BranchName, "IX_impBranchauto_1");

                entity.Property(e => e.Acct)
                    .HasColumnName("acct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Blockbranchorder)
                    .HasColumnName("blockbranchorder")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockbranchreceipt)
                    .HasColumnName("blockbranchreceipt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockbranchtransfer)
                    .HasColumnName("blockbranchtransfer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockcashinvoice)
                    .HasColumnName("blockcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockcashsale)
                    .HasColumnName("blockcashsale")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockcnote)
                    .HasColumnName("blockcnote")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockcustomer)
                    .HasColumnName("blockcustomer")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockgret)
                    .HasColumnName("blockgret")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockgrn)
                    .HasColumnName("blockgrn")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockinventory)
                    .HasColumnName("blockinventory")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockinvjournals)
                    .HasColumnName("blockinvjournals")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockporder)
                    .HasColumnName("blockporder")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockquotation)
                    .HasColumnName("blockquotation")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blocksalesinvoice)
                    .HasColumnName("blocksalesinvoice")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blocksuppinvoice)
                    .HasColumnName("blocksuppinvoice")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blocksupplier)
                    .HasColumnName("blocksupplier")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Bmtprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("BMTPREFIX");

                entity.Property(e => e.BranchIp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_IP");

                entity.Property(e => e.BranchName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_NAME");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchcostacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCOSTACCT");

                entity.Property(e => e.Branchdirect)
                    .HasColumnName("branchdirect")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchexport)
                    .HasColumnName("branchexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchgoodsacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHGOODSACCT");

                entity.Property(e => e.Branchorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("branchorderprefix");

                entity.Property(e => e.Branchreceiptprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("branchreceiptprefix")
                    .HasDefaultValueSql("('ARN')");

                entity.Property(e => e.Branchserverpath)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHSERVERPATH");

                entity.Property(e => e.Branchtransferprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("branchtransferprefix");

                entity.Property(e => e.Brexpupdate)
                    .HasColumnName("brexpupdate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashinvoiceprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cashinvoiceprefix");

                entity.Property(e => e.Cashsaleprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cashsaleprefix")
                    .HasDefaultValueSql("('CS')");

                entity.Property(e => e.Creditnoteprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("creditnoteprefix");

                entity.Property(e => e.Cstctr)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CSTCTR")
                    .IsFixedLength(true);

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Custexport)
                    .HasColumnName("custexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Custexpupdate)
                    .HasColumnName("custexpupdate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Databasename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DATABASENAME");

                entity.Property(e => e.Datasourcename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("datasourcename");

                entity.Property(e => e.DefLoc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DEF_LOC");

                entity.Property(e => e.Defpricingmode)
                    .HasColumnName("defpricingmode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Defpricingmodecash)
                    .HasColumnName("defpricingmodecash")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Enabled)
                    .HasColumnName("ENABLED")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Expbcode)
                    .HasColumnName("EXPBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Glexport)
                    .HasColumnName("glexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Glexpupdate)
                    .HasColumnName("glexpupdate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Goodsreceivedprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("goodsreceivedprefix");

                entity.Property(e => e.Goodsreturnedprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("goodsreturnedprefix");

                entity.Property(e => e.Importprices)
                    .HasColumnName("importprices")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Importpricesavgcost)
                    .HasColumnName("importpricesavgcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Importpriceslstcost)
                    .HasColumnName("importpriceslstcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Integrated)
                    .HasColumnName("integrated")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Invexport)
                    .HasColumnName("invexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invexpupdate)
                    .HasColumnName("invexpupdate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invoicepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("invoicepartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Journalpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("journalpartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Kahawadirect)
                    .HasColumnName("kahawadirect")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahawalink)
                    .HasColumnName("kahawalink")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahbranch)
                    .HasColumnName("kahbranch")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahcashprice)
                    .HasColumnName("kahcashprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahcashpricepromo)
                    .HasColumnName("kahcashpricepromo")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahcustomer)
                    .HasColumnName("kahcustomer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahgl)
                    .HasColumnName("kahgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahinventory)
                    .HasColumnName("kahinventory")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahmembers)
                    .HasColumnName("kahmembers")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahprices)
                    .HasColumnName("kahprices")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahspprice)
                    .HasColumnName("kahspprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahsupplier)
                    .HasColumnName("kahsupplier")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Locationtransferprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("locationtransferprefix")
                    .HasDefaultValueSql("('ALT')");

                entity.Property(e => e.Lockdefpricingmode)
                    .HasColumnName("lockdefpricingmode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholeinvoice)
                    .HasColumnName("lockpartwholeinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholejournal)
                    .HasColumnName("lockpartwholejournal")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholesale)
                    .HasColumnName("lockpartwholesale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholestocktake)
                    .HasColumnName("lockpartwholestocktake")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mainbranch).HasColumnName("MAINBRANCH");

                entity.Property(e => e.Mnfprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MNFPREFIX");

                entity.Property(e => e.NextBmtNum)
                    .HasColumnName("nextBMT_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextMnfNum)
                    .HasColumnName("nextMNF_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextbmrdet)
                    .HasColumnName("nextbmrdet")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextbomdet)
                    .HasColumnName("nextbomdet")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextborderNum)
                    .HasColumnName("nextborder_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbrepNum)
                    .HasColumnName("nextbrep_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbrnNum)
                    .HasColumnName("nextbrn_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbtransNum)
                    .HasColumnName("nextbtrans_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcinvNum)
                    .HasColumnName("nextcinv_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcnoteNum)
                    .HasColumnName("nextcnote_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcsaleNum)
                    .HasColumnName("NEXTCSALE_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextgretNum)
                    .HasColumnName("NEXTGRET_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextgrnNum)
                    .HasColumnName("NEXTGRN_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextibiNum)
                    .HasColumnName("NEXTIBI_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextijrnnum)
                    .HasColumnName("NEXTIJRNNUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextinvjNum)
                    .HasColumnName("NEXTINVJ_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextjournNum)
                    .HasColumnName("NEXTJOURN_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextporderNum)
                    .HasColumnName("NEXTPORDER_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextquoNum)
                    .HasColumnName("NEXTQUO_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextreqNum)
                    .HasColumnName("NEXTreq_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsaleinvNum)
                    .HasColumnName("nextsaleinv_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsinvNum)
                    .HasColumnName("NEXTSINV_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsoNum)
                    .HasColumnName("NEXTSO_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Openstock)
                    .HasColumnName("openstock")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Priceexport)
                    .HasColumnName("priceexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Purchaseorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("purchaseorderprefix");

                entity.Property(e => e.Quotationprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("quotationprefix");

                entity.Property(e => e.Reqprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("reqprefix")
                    .HasDefaultValueSql("('ARQ')");

                entity.Property(e => e.Saleinvoiceprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("saleinvoiceprefix");

                entity.Property(e => e.Salepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("salepartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Salesorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("salesorderprefix");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stocktakepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("stocktakepartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("supp_code");

                entity.Property(e => e.Suppexport)
                    .HasColumnName("suppexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Suppexpupdate)
                    .HasColumnName("suppexpupdate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Supplierinvoiceprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("supplierinvoiceprefix");

                entity.Property(e => e.Transferpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("transferpartwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ImpBranchkah>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("impBranchkah");

                entity.HasIndex(e => e.Bcode, "IX_BRANCH")
                    .IsUnique()
                    .IsClustered();

                entity.HasIndex(e => e.Branchcode, "IX_impBranchkah")
                    .IsUnique();

                entity.HasIndex(e => e.BranchName, "IX_impBranchkah_1");

                entity.Property(e => e.Acct)
                    .HasColumnName("acct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Blockbranchorder)
                    .HasColumnName("blockbranchorder")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockbranchreceipt)
                    .HasColumnName("blockbranchreceipt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockbranchtransfer)
                    .HasColumnName("blockbranchtransfer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockcashinvoice)
                    .HasColumnName("blockcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockcashsale)
                    .HasColumnName("blockcashsale")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockcnote)
                    .HasColumnName("blockcnote")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockcustomer)
                    .HasColumnName("blockcustomer")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockgret)
                    .HasColumnName("blockgret")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockgrn)
                    .HasColumnName("blockgrn")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockinventory)
                    .HasColumnName("blockinventory")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockinvjournals)
                    .HasColumnName("blockinvjournals")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockporder)
                    .HasColumnName("blockporder")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockquotation)
                    .HasColumnName("blockquotation")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blocksalesinvoice)
                    .HasColumnName("blocksalesinvoice")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blocksuppinvoice)
                    .HasColumnName("blocksuppinvoice")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blocksupplier)
                    .HasColumnName("blocksupplier")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Bmtprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("BMTPREFIX");

                entity.Property(e => e.BranchIp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_IP");

                entity.Property(e => e.BranchName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_NAME");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchcostacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCOSTACCT");

                entity.Property(e => e.Branchdirect)
                    .HasColumnName("branchdirect")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchexport)
                    .HasColumnName("branchexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchgoodsacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHGOODSACCT");

                entity.Property(e => e.Branchorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("branchorderprefix");

                entity.Property(e => e.Branchreceiptprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("branchreceiptprefix")
                    .HasDefaultValueSql("('ARN')");

                entity.Property(e => e.Branchserverpath)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHSERVERPATH");

                entity.Property(e => e.Branchtransferprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("branchtransferprefix");

                entity.Property(e => e.Cashinvoiceprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cashinvoiceprefix");

                entity.Property(e => e.Cashsaleprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cashsaleprefix")
                    .HasDefaultValueSql("('CS')");

                entity.Property(e => e.Creditnoteprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("creditnoteprefix");

                entity.Property(e => e.Cstctr)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CSTCTR")
                    .IsFixedLength(true);

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Custexport)
                    .HasColumnName("custexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Databasename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DATABASENAME");

                entity.Property(e => e.Datasourcename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("datasourcename");

                entity.Property(e => e.DefLoc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DEF_LOC");

                entity.Property(e => e.Defpricingmode)
                    .HasColumnName("defpricingmode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Defpricingmodecash)
                    .HasColumnName("defpricingmodecash")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Enabled)
                    .HasColumnName("ENABLED")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Glexport)
                    .HasColumnName("glexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Goodsreceivedprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("goodsreceivedprefix");

                entity.Property(e => e.Goodsreturnedprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("goodsreturnedprefix");

                entity.Property(e => e.Importprices)
                    .HasColumnName("importprices")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Importpricesavgcost)
                    .HasColumnName("importpricesavgcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Importpriceslstcost)
                    .HasColumnName("importpriceslstcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Integrated)
                    .HasColumnName("integrated")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Invexport)
                    .HasColumnName("invexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invoicepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("invoicepartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Journalpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("journalpartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Kahawadirect)
                    .HasColumnName("kahawadirect")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahawalink)
                    .HasColumnName("kahawalink")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahbranch)
                    .HasColumnName("kahbranch")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahcustomer)
                    .HasColumnName("kahcustomer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahgl)
                    .HasColumnName("kahgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahinventory)
                    .HasColumnName("kahinventory")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahprices)
                    .HasColumnName("kahprices")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahsupplier)
                    .HasColumnName("kahsupplier")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Locationtransferprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("locationtransferprefix")
                    .HasDefaultValueSql("('ALT')");

                entity.Property(e => e.Lockdefpricingmode)
                    .HasColumnName("lockdefpricingmode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholeinvoice)
                    .HasColumnName("lockpartwholeinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholejournal)
                    .HasColumnName("lockpartwholejournal")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholesale)
                    .HasColumnName("lockpartwholesale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwholestocktake)
                    .HasColumnName("lockpartwholestocktake")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mainbranch).HasColumnName("MAINBRANCH");

                entity.Property(e => e.Mnfprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MNFPREFIX");

                entity.Property(e => e.NextBmtNum)
                    .HasColumnName("nextBMT_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextMnfNum)
                    .HasColumnName("nextMNF_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextbmrdet)
                    .HasColumnName("nextbmrdet")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextbomdet)
                    .HasColumnName("nextbomdet")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextborderNum)
                    .HasColumnName("nextborder_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbrepNum)
                    .HasColumnName("nextbrep_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbrnNum)
                    .HasColumnName("nextbrn_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbtransNum)
                    .HasColumnName("nextbtrans_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcinvNum)
                    .HasColumnName("nextcinv_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcnoteNum)
                    .HasColumnName("nextcnote_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcsaleNum)
                    .HasColumnName("NEXTCSALE_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextgretNum)
                    .HasColumnName("NEXTGRET_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextgrnNum)
                    .HasColumnName("NEXTGRN_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextibiNum)
                    .HasColumnName("NEXTIBI_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextijrnnum)
                    .HasColumnName("NEXTIJRNNUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextinvjNum)
                    .HasColumnName("NEXTINVJ_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextjournNum)
                    .HasColumnName("NEXTJOURN_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextporderNum)
                    .HasColumnName("NEXTPORDER_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextquoNum)
                    .HasColumnName("NEXTQUO_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextreqNum)
                    .HasColumnName("NEXTreq_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsaleinvNum)
                    .HasColumnName("nextsaleinv_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsinvNum)
                    .HasColumnName("NEXTSINV_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsoNum)
                    .HasColumnName("NEXTSO_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Openstock)
                    .HasColumnName("openstock")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Priceexport)
                    .HasColumnName("priceexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Purchaseorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("purchaseorderprefix");

                entity.Property(e => e.Quotationprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("quotationprefix");

                entity.Property(e => e.Reqprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("reqprefix")
                    .HasDefaultValueSql("('ARQ')");

                entity.Property(e => e.Saleinvoiceprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("saleinvoiceprefix");

                entity.Property(e => e.Salepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("salepartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Salesorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("salesorderprefix");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stocktakepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("stocktakepartwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("supp_code");

                entity.Property(e => e.Suppexport)
                    .HasColumnName("suppexport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Supplierinvoiceprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("supplierinvoiceprefix");

                entity.Property(e => e.Transferpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("transferpartwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ImpCustDiscount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IMP_CUST_DISCOUNTS");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Crudmode).HasColumnName("crudmode");

                entity.Property(e => e.Crudorder).HasColumnName("crudorder");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Expirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRYDATE");

                entity.Property(e => e.Kahtocode).HasColumnName("kahtocode");

                entity.Property(e => e.Worthqty).HasColumnName("WORTHQTY");
            });

            modelBuilder.Entity<ImpCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IMP_CUSTOMER");

                entity.Property(e => e.Address)
                    .HasMaxLength(150)
                    .HasColumnName("ADDRESS")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Blocked)
                    .HasColumnName("BLOCKED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchdata)
                    .HasColumnName("BRANCHDATA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CategoryCode).HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.Cellcountry)
                    .HasMaxLength(255)
                    .HasColumnName("cellcountry")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cellname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cellname")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cellnumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cellnumber")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Choose)
                    .HasColumnName("choose")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Companyfax)
                    .HasMaxLength(50)
                    .HasColumnName("COMPANYFAX")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Contact)
                    .HasMaxLength(50)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Credccode)
                    .HasColumnName("credccode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Creddiscounts)
                    .HasColumnName("CREDDISCOUNTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasColumnName("CREDIT_CODE");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.CscatgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_CODE");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(50)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusCode0)
                    .HasMaxLength(50)
                    .HasColumnName("CUS_CODE0");

                entity.Property(e => e.CusDesc)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Cusmemberno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSMEMBERNO");

                entity.Property(e => e.Cuspoints)
                    .HasColumnName("CUSPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Defcashinvoice)
                    .HasColumnName("defcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Defcustominvoice)
                    .HasColumnName("defcustominvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("email")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.EnforceTerms)
                    .HasColumnName("ENFORCE_TERMS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .HasColumnName("FAX")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Forcemember)
                    .HasColumnName("forcemember")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImpCustomermargin)
                    .HasColumnName("IMP_CUSTOMERmargin")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Issmart)
                    .HasColumnName("issmart")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastrptamount).HasColumnName("LASTRPTAMOUNT");

                entity.Property(e => e.Lastrptdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTRPTDATE");

                entity.Property(e => e.Ninetydays)
                    .HasColumnName("NINETYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Noalloc)
                    .HasColumnName("noalloc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nonregistered)
                    .HasColumnName("nonregistered")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Oldaccount)
                    .HasMaxLength(50)
                    .HasColumnName("oldaccount");

                entity.Property(e => e.Onetwenty)
                    .HasColumnName("ONETWENTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Openingbal)
                    .HasColumnName("openingbal")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OverAppliedBalance).HasColumnName("OverAPPLIED_BALANCE");

                entity.Property(e => e.Overapplied).HasColumnName("overapplied");

                entity.Property(e => e.Paytermcode).HasColumnName("PAYTERMCODE");

                entity.Property(e => e.Pdcheques)
                    .HasColumnName("PDCHEQUES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Phone)
                    .HasMaxLength(150)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(150)
                    .HasColumnName("PHYSICALADD")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Pin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIN")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.PrintStatement).HasDefaultValueSql("((0))");

                entity.Property(e => e.Redeemed)
                    .HasColumnName("REDEEMED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Routecode).HasColumnName("routecode");

                entity.Property(e => e.Sce)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SCE")
                    .HasDefaultValueSql("('C')")
                    .IsFixedLength(true);

                entity.Property(e => e.Sixtydays)
                    .HasColumnName("SIXTYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Smscontact)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SMSCONTACT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Smscontactname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SMSCONTACTNAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StatementCurrentbal).HasColumnName("STATEMENT_CURRENTBAL");

                entity.Property(e => e.TempCreditlimit).HasColumnName("TEMP_CREDITLIMIT");

                entity.Property(e => e.TemporaryCustomer)
                    .HasColumnName("TEMPORARY_CUSTOMER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thirtydays)
                    .HasColumnName("THIRTYDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thisperiod)
                    .HasColumnName("THISPERIOD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalSales).HasColumnName("TOTAL_SALES");

                entity.Property(e => e.Town)
                    .HasMaxLength(150)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TownCode).HasColumnName("town_code");

                entity.Property(e => e.Unapplied).HasColumnName("unapplied");

                entity.Property(e => e.UnappliedBalance).HasColumnName("UNAPPLIED_BALANCE");

                entity.Property(e => e.Used).HasColumnName("USED");

                entity.Property(e => e.Used2).HasColumnName("USED2");

                entity.Property(e => e.Using).HasColumnName("using");

                entity.Property(e => e.Using2).HasColumnName("using2");

                entity.Property(e => e.Vat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VAT")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Xblocked).HasColumnName("XBLOCKED");

                entity.Property(e => e.Xdaybalance)
                    .HasColumnName("xdaybalance")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ImpCustomerMember>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("impCUSTOMER_MEMBERS");

                entity.HasIndex(e => e.Membername, "IX_impCUSTOMER_MEMBERS")
                    .IsClustered();

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Allergies)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ALLERGIES");

                entity.Property(e => e.CategoryCode).HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.Catgdescription)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CATGDESCRIPTION");

                entity.Property(e => e.Cellphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CELLPHONE");

                entity.Property(e => e.Contact)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Contactphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTPHONE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .HasMaxLength(100)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Defcashinvoice)
                    .HasColumnName("defcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Doctor)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCTOR");

                entity.Property(e => e.Doctorphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DOCTORPHONE");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("email")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Fname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FNAME");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Lname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LNAME");

                entity.Property(e => e.Loyalty)
                    .HasColumnName("loyalty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberdob)
                    .HasColumnType("datetime")
                    .HasColumnName("MEMBERDOB")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Membername)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNAME");

                entity.Property(e => e.Memberno)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNO");

                entity.Property(e => e.MextraNum)
                    .HasColumnName("MEXTRA_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("mobile")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Mxemail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MXEMAIL");

                entity.Property(e => e.Mxemail1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MXEMAIL1");

                entity.Property(e => e.Notes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAYMODE")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.RecurrCode).HasColumnName("recurr_code");

                entity.Property(e => e.Salutation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SALUTATION");

                entity.Property(e => e.SaluteCode).HasColumnName("SALUTE_CODE");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TELEPHONE");

                entity.Property(e => e.TownCode).HasColumnName("TOWN_CODE");

                entity.Property(e => e.Twnprovince)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE");

                entity.Property(e => e.TwnprovinceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE_CODE");

                entity.Property(e => e.Twntown)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNTOWN");
            });

            modelBuilder.Entity<ImpCustomerMembersauto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("impCUSTOMER_MEMBERSauto");

                entity.HasIndex(e => e.Membername, "IX_impCUSTOMER_MEMBERSauto")
                    .IsClustered();

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Allergies)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ALLERGIES");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blocked)
                    .HasColumnName("blocked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CategoryCode).HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.Catgdescription)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CATGDESCRIPTION");

                entity.Property(e => e.Cellphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CELLPHONE");

                entity.Property(e => e.Contact)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Contactphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTPHONE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .HasMaxLength(100)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Defcashinvoice)
                    .HasColumnName("defcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Doctor)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCTOR");

                entity.Property(e => e.Doctorphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DOCTORPHONE");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("email")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Fname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FNAME");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Lname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LNAME");

                entity.Property(e => e.Loyalty)
                    .HasColumnName("loyalty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberdob)
                    .HasColumnType("datetime")
                    .HasColumnName("MEMBERDOB")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Membername)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNAME");

                entity.Property(e => e.Memberno)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNO");

                entity.Property(e => e.MextraNum)
                    .HasColumnName("MEXTRA_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("mobile")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Mxemail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MXEMAIL");

                entity.Property(e => e.Mxemail1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MXEMAIL1");

                entity.Property(e => e.Notes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAYMODE")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.RecurrCode).HasColumnName("recurr_code");

                entity.Property(e => e.Salutation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SALUTATION");

                entity.Property(e => e.SaluteCode).HasColumnName("SALUTE_CODE");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TELEPHONE");

                entity.Property(e => e.TownCode).HasColumnName("TOWN_CODE");

                entity.Property(e => e.Twnprovince)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE");

                entity.Property(e => e.TwnprovinceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE_CODE");

                entity.Property(e => e.Twntown)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNTOWN");
            });

            modelBuilder.Entity<ImpCustomerMemberskah>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("impCUSTOMER_MEMBERSKAH");

                entity.HasIndex(e => e.Membername, "IX_impCUSTOMER_MEMBERSKAH")
                    .IsClustered();

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Allergies)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ALLERGIES");

                entity.Property(e => e.CategoryCode).HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.Catgdescription)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CATGDESCRIPTION");

                entity.Property(e => e.Cellphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CELLPHONE");

                entity.Property(e => e.Contact)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Contactphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTPHONE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .HasMaxLength(100)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Defcashinvoice)
                    .HasColumnName("defcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Doctor)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCTOR");

                entity.Property(e => e.Doctorphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DOCTORPHONE");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("email")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Fname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FNAME");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Lname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LNAME");

                entity.Property(e => e.Loyalty)
                    .HasColumnName("loyalty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberdob)
                    .HasColumnType("datetime")
                    .HasColumnName("MEMBERDOB")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Membername)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNAME");

                entity.Property(e => e.Memberno)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNO");

                entity.Property(e => e.MextraNum)
                    .HasColumnName("MEXTRA_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("mobile")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Mxemail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MXEMAIL");

                entity.Property(e => e.Mxemail1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MXEMAIL1");

                entity.Property(e => e.Notes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAYMODE")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.RecurrCode).HasColumnName("recurr_code");

                entity.Property(e => e.Salutation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SALUTATION");

                entity.Property(e => e.SaluteCode).HasColumnName("SALUTE_CODE");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TELEPHONE");

                entity.Property(e => e.TownCode).HasColumnName("TOWN_CODE");

                entity.Property(e => e.Twnprovince)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE");

                entity.Property(e => e.TwnprovinceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE_CODE");

                entity.Property(e => e.Twntown)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNTOWN");
            });

            modelBuilder.Entity<Impacct>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("impacct");

                entity.HasIndex(e => e.Des, "IX_impacct")
                    .IsClustered();

                entity.Property(e => e.Acct)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Acctcatgcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCTCATGCODE");

                entity.Property(e => e.Acctcatgname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCTCATGNAME");

                entity.Property(e => e.Acctendacct).HasColumnName("ACCTENDACCT");

                entity.Property(e => e.Acctstartacct).HasColumnName("ACCTSTARTACCT");

                entity.Property(e => e.Bank)
                    .HasColumnName("bank")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bdgtcat)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("BDGTCAT");

                entity.Property(e => e.Class)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CLASS");

                entity.Property(e => e.Classname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CLASSNAME");

                entity.Property(e => e.Controlacct)
                    .HasColumnName("CONTROLACCT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Des)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Hassubacct)
                    .HasColumnName("hassubacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Motheracct)
                    .HasColumnName("motheracct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mthacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mthacct");

                entity.Property(e => e.Oldacct)
                    .HasColumnName("oldacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rptcat)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RPTCAT");

                entity.Property(e => e.Rptdescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RPTDESCRIPTION");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Subacct)
                    .HasColumnName("subacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Systemacct)
                    .HasColumnName("systemacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillgl)
                    .HasColumnName("tillgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Type)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");

                entity.Property(e => e.Typename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");
            });

            modelBuilder.Entity<Impacctauto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("impacctauto");

                entity.HasIndex(e => e.Des, "IX_impacctauto")
                    .IsClustered();

                entity.Property(e => e.Acct)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Acctcatgcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCTCATGCODE");

                entity.Property(e => e.Acctcatgname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCTCATGNAME");

                entity.Property(e => e.Acctendacct).HasColumnName("ACCTENDACCT");

                entity.Property(e => e.Acctstartacct).HasColumnName("ACCTSTARTACCT");

                entity.Property(e => e.Bank)
                    .HasColumnName("bank")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bdgtcat)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("BDGTCAT");

                entity.Property(e => e.Class)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CLASS");

                entity.Property(e => e.Classname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CLASSNAME");

                entity.Property(e => e.Controlacct)
                    .HasColumnName("CONTROLACCT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Des)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Hassubacct)
                    .HasColumnName("hassubacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Motheracct)
                    .HasColumnName("motheracct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mthacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mthacct");

                entity.Property(e => e.Oldacct)
                    .HasColumnName("oldacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rptcat)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RPTCAT");

                entity.Property(e => e.Rptdescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RPTDESCRIPTION");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Subacct)
                    .HasColumnName("subacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Systemacct)
                    .HasColumnName("systemacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillgl)
                    .HasColumnName("tillgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Type)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");

                entity.Property(e => e.Typename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");
            });

            modelBuilder.Entity<Impacctkah>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("impacctkah");

                entity.HasIndex(e => e.Des, "IX_impacctkah")
                    .IsClustered();

                entity.Property(e => e.Acct)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Acctcatgcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCTCATGCODE");

                entity.Property(e => e.Acctcatgname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCTCATGNAME");

                entity.Property(e => e.Acctendacct).HasColumnName("ACCTENDACCT");

                entity.Property(e => e.Acctstartacct).HasColumnName("ACCTSTARTACCT");

                entity.Property(e => e.Bank)
                    .HasColumnName("bank")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bdgtcat)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("BDGTCAT");

                entity.Property(e => e.Class)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CLASS");

                entity.Property(e => e.Classname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CLASSNAME");

                entity.Property(e => e.Controlacct)
                    .HasColumnName("CONTROLACCT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Des)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DES_");

                entity.Property(e => e.Hassubacct)
                    .HasColumnName("hassubacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Motheracct)
                    .HasColumnName("motheracct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mthacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mthacct");

                entity.Property(e => e.Oldacct)
                    .HasColumnName("oldacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rptcat)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RPTCAT");

                entity.Property(e => e.Rptdescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RPTDESCRIPTION");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Subacct)
                    .HasColumnName("subacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Systemacct)
                    .HasColumnName("systemacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillgl)
                    .HasColumnName("tillgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Type)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");

                entity.Property(e => e.Typename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");
            });

            modelBuilder.Entity<Impcashprice>(entity =>
            {
                entity.HasKey(e => new { e.CusCode, e.InvCode })
                    .HasName("PK_IMPCASHPRICE_1");

                entity.ToTable("IMPCASHPRICE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Bonus).HasColumnName("BONUS");

                entity.Property(e => e.Bonus1).HasColumnName("BONUS1");

                entity.Property(e => e.Bonus2).HasColumnName("BONUS2");

                entity.Property(e => e.Bonus3).HasColumnName("BONUS3");

                entity.Property(e => e.Bonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW");

                entity.Property(e => e.Bonuspw1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW1");

                entity.Property(e => e.Bonuspw2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW2");

                entity.Property(e => e.Bonuspw3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW3");

                entity.Property(e => e.Cashpriceamt)
                    .HasColumnName("CASHPRICEAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpriceapply)
                    .HasColumnName("CASHPRICEAPPLY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpriceentrynum)
                    .HasColumnName("CASHPRICEENTRYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Discexpirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYDATE");

                entity.Property(e => e.Discexpirytime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYTIME");

                entity.Property(e => e.Discmode)
                    .HasColumnName("DISCMODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Discstartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTDATE");

                entity.Property(e => e.Discstarttime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTTIME");

                entity.Property(e => e.Disctype)
                    .HasColumnName("DISCTYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvCode1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE1");

                entity.Property(e => e.InvCode2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE2");

                entity.Property(e => e.InvCode3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE3");

                entity.Property(e => e.InvCode4)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE4");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty1)
                    .HasColumnName("PWQTY1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty2)
                    .HasColumnName("PWQTY2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty3)
                    .HasColumnName("PWQTY3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Retailprice)
                    .HasColumnName("RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spbonus).HasColumnName("SPBONUS");

                entity.Property(e => e.Spbonus1).HasColumnName("SPBONUS1");

                entity.Property(e => e.Spbonus2).HasColumnName("SPBONUS2");

                entity.Property(e => e.Spbonus3).HasColumnName("SPBONUS3");

                entity.Property(e => e.Spbonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW");

                entity.Property(e => e.Spbonuspw1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW1");

                entity.Property(e => e.Spbonuspw2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW2");

                entity.Property(e => e.Spbonuspw3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW3");

                entity.Property(e => e.Spdiscount)
                    .HasColumnName("SPDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty)
                    .HasColumnName("SPPWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty1)
                    .HasColumnName("SPPWQTY1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty2)
                    .HasColumnName("SPPWQTY2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty3)
                    .HasColumnName("SPPWQTY3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tradeprice)
                    .HasColumnName("TRADEPRICE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Impcashpriceauto>(entity =>
            {
                entity.HasKey(e => new { e.CusCode, e.InvCode })
                    .HasName("PK_IMPCASHPRICEauto_1");

                entity.ToTable("IMPCASHPRICEauto");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonus).HasColumnName("BONUS");

                entity.Property(e => e.Bonus1).HasColumnName("BONUS1");

                entity.Property(e => e.Bonus2).HasColumnName("BONUS2");

                entity.Property(e => e.Bonus3).HasColumnName("BONUS3");

                entity.Property(e => e.Bonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW");

                entity.Property(e => e.Bonuspw1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW1");

                entity.Property(e => e.Bonuspw2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW2");

                entity.Property(e => e.Bonuspw3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW3");

                entity.Property(e => e.Cashpriceamt)
                    .HasColumnName("CASHPRICEAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpriceapply)
                    .HasColumnName("CASHPRICEAPPLY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpriceentrynum)
                    .HasColumnName("CASHPRICEENTRYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Discexpirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYDATE");

                entity.Property(e => e.Discexpirytime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYTIME");

                entity.Property(e => e.Discmode)
                    .HasColumnName("DISCMODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Discstartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTDATE");

                entity.Property(e => e.Discstarttime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTTIME");

                entity.Property(e => e.Disctype)
                    .HasColumnName("DISCTYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvCode1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE1");

                entity.Property(e => e.InvCode2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE2");

                entity.Property(e => e.InvCode3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE3");

                entity.Property(e => e.InvCode4)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE4");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty1)
                    .HasColumnName("PWQTY1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty2)
                    .HasColumnName("PWQTY2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty3)
                    .HasColumnName("PWQTY3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Retailprice)
                    .HasColumnName("RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spbonus).HasColumnName("SPBONUS");

                entity.Property(e => e.Spbonus1).HasColumnName("SPBONUS1");

                entity.Property(e => e.Spbonus2).HasColumnName("SPBONUS2");

                entity.Property(e => e.Spbonus3).HasColumnName("SPBONUS3");

                entity.Property(e => e.Spbonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW");

                entity.Property(e => e.Spbonuspw1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW1");

                entity.Property(e => e.Spbonuspw2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW2");

                entity.Property(e => e.Spbonuspw3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW3");

                entity.Property(e => e.Spdiscount)
                    .HasColumnName("SPDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty)
                    .HasColumnName("SPPWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty1)
                    .HasColumnName("SPPWQTY1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty2)
                    .HasColumnName("SPPWQTY2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty3)
                    .HasColumnName("SPPWQTY3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tradeprice)
                    .HasColumnName("TRADEPRICE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Impcashpricepromo>(entity =>
            {
                entity.HasKey(e => new { e.CusCode, e.InvCode })
                    .HasName("PK_IMPCASHPRICEPROMO_1");

                entity.ToTable("IMPCASHPRICEPROMO");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Cashpricepromoamt)
                    .HasColumnName("CASHPRICEPROMOAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpricepromoapply)
                    .HasColumnName("CASHPRICEPROMOAPPLY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpricepromoentrynum)
                    .HasColumnName("CASHPRICEPROMOENTRYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Discexpirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYDATE");

                entity.Property(e => e.Discexpirytime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYTIME");

                entity.Property(e => e.Discstartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTDATE");

                entity.Property(e => e.Discstarttime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTTIME");

                entity.Property(e => e.Disctype)
                    .HasColumnName("DISCTYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvCode1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE1");

                entity.Property(e => e.InvCode2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE2");

                entity.Property(e => e.InvCode3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE3");

                entity.Property(e => e.InvCode4)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE4");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Retailprice)
                    .HasColumnName("RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spbonus).HasColumnName("SPBONUS");

                entity.Property(e => e.Spbonus1).HasColumnName("SPBONUS1");

                entity.Property(e => e.Spbonus2).HasColumnName("SPBONUS2");

                entity.Property(e => e.Spbonus3).HasColumnName("SPBONUS3");

                entity.Property(e => e.Spbonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW");

                entity.Property(e => e.Spbonuspw1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW1");

                entity.Property(e => e.Spbonuspw2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW2");

                entity.Property(e => e.Spbonuspw3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW3");

                entity.Property(e => e.Spdiscount)
                    .HasColumnName("SPDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty).HasColumnName("SPPWQTY");

                entity.Property(e => e.Sppwqty1)
                    .HasColumnName("SPPWQTY1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty2)
                    .HasColumnName("SPPWQTY2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty3)
                    .HasColumnName("SPPWQTY3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice)
                    .HasColumnName("TOTALSPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice1)
                    .HasColumnName("TOTALSPRICE1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice2)
                    .HasColumnName("TOTALSPRICE2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice3)
                    .HasColumnName("TOTALSPRICE3")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Impcashpricepromoauto>(entity =>
            {
                entity.HasKey(e => new { e.CusCode, e.InvCode })
                    .HasName("PK_IMPCASHPRICEPROMOauto_1");

                entity.ToTable("IMPCASHPRICEPROMOauto");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpricepromoamt)
                    .HasColumnName("CASHPRICEPROMOAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpricepromoapply)
                    .HasColumnName("CASHPRICEPROMOAPPLY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpricepromoentrynum)
                    .HasColumnName("CASHPRICEPROMOENTRYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Discexpirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYDATE");

                entity.Property(e => e.Discexpirytime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYTIME");

                entity.Property(e => e.Discstartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTDATE");

                entity.Property(e => e.Discstarttime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCSTARTTIME");

                entity.Property(e => e.Disctype)
                    .HasColumnName("DISCTYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvCode1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE1");

                entity.Property(e => e.InvCode2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE2");

                entity.Property(e => e.InvCode3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE3");

                entity.Property(e => e.InvCode4)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE4");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Retailprice)
                    .HasColumnName("RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spbonus).HasColumnName("SPBONUS");

                entity.Property(e => e.Spbonus1).HasColumnName("SPBONUS1");

                entity.Property(e => e.Spbonus2).HasColumnName("SPBONUS2");

                entity.Property(e => e.Spbonus3).HasColumnName("SPBONUS3");

                entity.Property(e => e.Spbonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW");

                entity.Property(e => e.Spbonuspw1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW1");

                entity.Property(e => e.Spbonuspw2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW2");

                entity.Property(e => e.Spbonuspw3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW3");

                entity.Property(e => e.Spdiscount)
                    .HasColumnName("SPDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty).HasColumnName("SPPWQTY");

                entity.Property(e => e.Sppwqty1)
                    .HasColumnName("SPPWQTY1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty2)
                    .HasColumnName("SPPWQTY2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty3)
                    .HasColumnName("SPPWQTY3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice)
                    .HasColumnName("TOTALSPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice1)
                    .HasColumnName("TOTALSPRICE1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice2)
                    .HasColumnName("TOTALSPRICE2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsprice3)
                    .HasColumnName("TOTALSPRICE3")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Impcustomer1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IMPcustomer");

                entity.HasIndex(e => e.CusDesc, "IX_IMPcustomer")
                    .IsClustered();

                entity.Property(e => e.Address)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.CategoryCode).HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.Catgdescription)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CATGDESCRIPTION");

                entity.Property(e => e.Catgnotregister).HasColumnName("CATGNOTREGISTER");

                entity.Property(e => e.Companyfax)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COMPANYFAX")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Contact)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Crdawardpoints)
                    .HasColumnName("CRDAWARDPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Crddescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CRDDESCRIPTION");

                entity.Property(e => e.Crddiscount)
                    .HasColumnName("CRDDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CrdexpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CRDEXPIRY_DATE");

                entity.Property(e => e.Crdpricemarkup)
                    .HasColumnName("CRDPRICEMARKUP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CrdtradeDiscount)
                    .HasColumnName("CRDTRADE_DISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREDIT_CODE");

                entity.Property(e => e.Creditlimit)
                    .HasColumnName("CREDITLIMIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CscatgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_CODE");

                entity.Property(e => e.CscatgGl)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_GL");

                entity.Property(e => e.CscatgName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_NAME");

                entity.Property(e => e.Curdescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURDESCRIPTION");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Cursymbol)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURSYMBOL");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Defcashinvoice)
                    .HasColumnName("defcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Defcustominvoice)
                    .HasColumnName("defcustominvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("email")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.EnforceTerms)
                    .HasColumnName("ENFORCE_TERMS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forcemember)
                    .HasColumnName("forcemember")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Nonregistered)
                    .HasColumnName("nonregistered")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Paytermcode).HasColumnName("PAYTERMCODE");

                entity.Property(e => e.Phone)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PHYSICALADD")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Pin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIN")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.PtchargableAfter)
                    .HasColumnName("PTCHARGABLE_AFTER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ptdescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PTDESCRIPTION");

                entity.Property(e => e.Ptdiscount)
                    .HasColumnName("PTDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PtdiscountedDays)
                    .HasColumnName("PTDISCOUNTED_DAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PtinterestRate)
                    .HasColumnName("PTINTEREST_RATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ptnumdays)
                    .HasColumnName("PTNUMDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Routecode).HasColumnName("routecode");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TempCreditlimit)
                    .HasColumnName("TEMP_CREDITLIMIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Town)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TownCode).HasColumnName("town_code");

                entity.Property(e => e.Twnprovince)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE");

                entity.Property(e => e.TwnprovinceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE_CODE");

                entity.Property(e => e.Twntown)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNTOWN");

                entity.Property(e => e.Vat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VAT")
                    .HasDefaultValueSql("('-')");
            });

            modelBuilder.Entity<ImpcustomerKah>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IMPcustomerKAH");

                entity.HasIndex(e => e.CusDesc, "IX_IMPcustomerKAH")
                    .IsClustered();

                entity.Property(e => e.Address)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.CategoryCode).HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.Catgdescription)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CATGDESCRIPTION");

                entity.Property(e => e.Catgnotregister).HasColumnName("CATGNOTREGISTER");

                entity.Property(e => e.Companyfax)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COMPANYFAX")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Contact)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Crdawardpoints)
                    .HasColumnName("CRDAWARDPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Crddescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CRDDESCRIPTION");

                entity.Property(e => e.Crddiscount)
                    .HasColumnName("CRDDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CrdexpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CRDEXPIRY_DATE");

                entity.Property(e => e.Crdpricemarkup)
                    .HasColumnName("CRDPRICEMARKUP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CrdtradeDiscount)
                    .HasColumnName("CRDTRADE_DISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREDIT_CODE");

                entity.Property(e => e.Creditlimit)
                    .HasColumnName("CREDITLIMIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CscatgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_CODE");

                entity.Property(e => e.CscatgGl)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_GL");

                entity.Property(e => e.CscatgName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_NAME");

                entity.Property(e => e.Curdescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURDESCRIPTION");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Cursymbol)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURSYMBOL");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Defcashinvoice)
                    .HasColumnName("defcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Defcustominvoice)
                    .HasColumnName("defcustominvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("email")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.EnforceTerms)
                    .HasColumnName("ENFORCE_TERMS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forcemember)
                    .HasColumnName("forcemember")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Nonregistered)
                    .HasColumnName("nonregistered")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Paytermcode).HasColumnName("PAYTERMCODE");

                entity.Property(e => e.Phone)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PHYSICALADD")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Pin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIN")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.PtchargableAfter)
                    .HasColumnName("PTCHARGABLE_AFTER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ptdescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PTDESCRIPTION");

                entity.Property(e => e.Ptdiscount)
                    .HasColumnName("PTDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PtdiscountedDays)
                    .HasColumnName("PTDISCOUNTED_DAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PtinterestRate)
                    .HasColumnName("PTINTEREST_RATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ptnumdays)
                    .HasColumnName("PTNUMDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Routecode).HasColumnName("routecode");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TempCreditlimit)
                    .HasColumnName("TEMP_CREDITLIMIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Town)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TownCode).HasColumnName("town_code");

                entity.Property(e => e.Twnprovince)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE");

                entity.Property(e => e.TwnprovinceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE_CODE");

                entity.Property(e => e.Twntown)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNTOWN");

                entity.Property(e => e.Vat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VAT")
                    .HasDefaultValueSql("('-')");
            });

            modelBuilder.Entity<Impcustomerauto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IMPcustomerauto");

                entity.HasIndex(e => e.CusDesc, "IX_IMPcustomerauto")
                    .IsClustered();

                entity.Property(e => e.Address)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blocked)
                    .HasColumnName("blocked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CategoryCode).HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.Catgdescription)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CATGDESCRIPTION");

                entity.Property(e => e.Catgnotregister).HasColumnName("CATGNOTREGISTER");

                entity.Property(e => e.Companyfax)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COMPANYFAX")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Contact)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Crdawardpoints)
                    .HasColumnName("CRDAWARDPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Crddescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CRDDESCRIPTION");

                entity.Property(e => e.Crddiscount)
                    .HasColumnName("CRDDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CrdexpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CRDEXPIRY_DATE");

                entity.Property(e => e.Crdpricemarkup)
                    .HasColumnName("CRDPRICEMARKUP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CrdtradeDiscount)
                    .HasColumnName("CRDTRADE_DISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREDIT_CODE");

                entity.Property(e => e.Creditlimit)
                    .HasColumnName("CREDITLIMIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CscatgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_CODE");

                entity.Property(e => e.CscatgGl)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_GL");

                entity.Property(e => e.CscatgName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_NAME");

                entity.Property(e => e.Curdescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURDESCRIPTION");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Cursymbol)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURSYMBOL");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Defcashinvoice)
                    .HasColumnName("defcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Defcustominvoice)
                    .HasColumnName("defcustominvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("email")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.EnforceTerms)
                    .HasColumnName("ENFORCE_TERMS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forcemember)
                    .HasColumnName("forcemember")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Nonregistered)
                    .HasColumnName("nonregistered")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Paytermcode).HasColumnName("PAYTERMCODE");

                entity.Property(e => e.Phone)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PHYSICALADD")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Pin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIN")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.PtchargableAfter)
                    .HasColumnName("PTCHARGABLE_AFTER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ptdescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PTDESCRIPTION");

                entity.Property(e => e.Ptdiscount)
                    .HasColumnName("PTDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PtdiscountedDays)
                    .HasColumnName("PTDISCOUNTED_DAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PtinterestRate)
                    .HasColumnName("PTINTEREST_RATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ptnumdays)
                    .HasColumnName("PTNUMDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Routecode).HasColumnName("routecode");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TempCreditlimit)
                    .HasColumnName("TEMP_CREDITLIMIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Town)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TownCode).HasColumnName("town_code");

                entity.Property(e => e.Twnprovince)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE");

                entity.Property(e => e.TwnprovinceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE_CODE");

                entity.Property(e => e.Twntown)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNTOWN");

                entity.Property(e => e.Vat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VAT")
                    .HasDefaultValueSql("('-')");
            });

            modelBuilder.Entity<Impinv2020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IMPINV2020");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvAvgcost).HasColumnName("INV_AVGCOST");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvLastunitcost).HasColumnName("INV_LASTUNITCOST");

                entity.Property(e => e.InvRetailprice).HasColumnName("INV_RETAILPRICE");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvSubgroupname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPNAME");

                entity.Property(e => e.InvTradeprice).HasColumnName("INV_TRADEPRICE");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.PackQty)
                    .HasColumnName("PACK_QTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TaxCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE")
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.Userid).HasColumnName("USERID");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Impinvdesc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("impinvdesc");

                entity.HasIndex(e => e.Invuser, "IX_impinvdesc");

                entity.HasIndex(e => e.Description, "IX_impinvdesc_1")
                    .IsClustered();

                entity.Property(e => e.ActiveIngredient)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_INGREDIENT");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BARCODE");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.CostofsalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COSTOFSALES_GL");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Forpackalter)
                    .HasColumnName("forpackalter")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forpackalterused)
                    .HasColumnName("forpackalterused")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gpcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GPCODE");

                entity.Property(e => e.Gpisacct)
                    .HasColumnName("GPisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gpname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GPNAME");

                entity.Property(e => e.InvBrandgeneric).HasColumnName("INV_BRANDGENERIC");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvItemcontents)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_ITEMCONTENTS");

                entity.Property(e => e.InvNotes)
                    .HasMaxLength(500)
                    .HasColumnName("inv_notes");

                entity.Property(e => e.InvPhysicalitem)
                    .IsRequired()
                    .HasColumnName("INV_PHYSICALITEM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.InvadjustmentGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INVADJUSTMENT_GL");

                entity.Property(e => e.InventoryGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inventory_gl");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Kisimax)
                    .HasColumnName("kisimax")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.Mnfcountry)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFCOUNTRY");

                entity.Property(e => e.Mnfintial)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MNFINTIAL");

                entity.Property(e => e.Mnfname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFNAME");

                entity.Property(e => e.Noexpiry).HasColumnName("noexpiry");

                entity.Property(e => e.PackQty)
                    .HasColumnName("PACK_QTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGE_CODE");

                entity.Property(e => e.PackinvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("packinv_code")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PackinvName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("packinv_name")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Pkgname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PKGNAME");

                entity.Property(e => e.Rawmaterial)
                    .HasColumnName("rawmaterial")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALES_GL");

                entity.Property(e => e.Sbggl)
                    .HasColumnName("SBGGL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgisacct)
                    .HasColumnName("SBGisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SBGNAME");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitQty).HasColumnName("UNIT_QTY");
            });

            modelBuilder.Entity<Impinvdesckah>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("impinvdesckah");

                entity.HasIndex(e => e.Invuser, "IX_impinvdesckah");

                entity.HasIndex(e => e.Description, "IX_impinvdesckah_1")
                    .IsClustered();

                entity.Property(e => e.ActiveIngredient)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_INGREDIENT");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BARCODE");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.CostofsalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COSTOFSALES_GL");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Gpcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GPCODE");

                entity.Property(e => e.Gpisacct)
                    .HasColumnName("GPisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gpname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GPNAME");

                entity.Property(e => e.InvBrandgeneric).HasColumnName("INV_BRANDGENERIC");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvItemcontents)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_ITEMCONTENTS");

                entity.Property(e => e.InvNotes)
                    .HasMaxLength(500)
                    .HasColumnName("inv_notes");

                entity.Property(e => e.InvPhysicalitem)
                    .IsRequired()
                    .HasColumnName("INV_PHYSICALITEM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.InvadjustmentGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INVADJUSTMENT_GL");

                entity.Property(e => e.InventoryGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inventory_gl");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.Mnfcountry)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFCOUNTRY");

                entity.Property(e => e.Mnfintial)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MNFINTIAL");

                entity.Property(e => e.Mnfname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFNAME");

                entity.Property(e => e.Noexpiry).HasColumnName("noexpiry");

                entity.Property(e => e.PackQty)
                    .HasColumnName("PACK_QTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGE_CODE");

                entity.Property(e => e.Pkgname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PKGNAME");

                entity.Property(e => e.Rawmaterial)
                    .HasColumnName("rawmaterial")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALES_GL");

                entity.Property(e => e.Sbggl)
                    .HasColumnName("SBGGL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgisacct)
                    .HasColumnName("SBGisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SBGNAME");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitQty).HasColumnName("UNIT_QTY");
            });

            modelBuilder.Entity<Impinventory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("impinventory");

                entity.HasIndex(e => e.Invuser, "IX_impinventory");

                entity.HasIndex(e => e.Description, "IX_impinventory_1")
                    .IsClustered();

                entity.Property(e => e.ActiveIngredient)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_INGREDIENT");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BARCODE");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.CashDiscount)
                    .HasColumnName("cash_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Contsub)
                    .HasColumnName("contsub")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostofsalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COSTOFSALES_GL");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Fastmoving)
                    .HasColumnName("fastmoving")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forrefill)
                    .HasColumnName("forrefill")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Glitem)
                    .HasColumnName("glitem")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gpcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GPCODE");

                entity.Property(e => e.Gpisacct)
                    .HasColumnName("GPisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gpname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GPNAME");

                entity.Property(e => e.Highvalue)
                    .HasColumnName("highvalue")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inclusive).HasColumnName("inclusive");

                entity.Property(e => e.InvAvgcost)
                    .HasColumnName("INV_AVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAvgsellcost)
                    .HasColumnName("INV_AVGSELLCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvBrandgeneric).HasColumnName("INV_BRANDGENERIC");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvCostprice)
                    .HasColumnName("INV_COSTPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvItemcontents)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_ITEMCONTENTS");

                entity.Property(e => e.InvLastunitcost)
                    .HasColumnName("INV_LASTUNITCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMaxprice)
                    .HasColumnName("INV_MAXPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinprice)
                    .HasColumnName("INV_MINPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvNotes)
                    .HasMaxLength(500)
                    .HasColumnName("inv_notes");

                entity.Property(e => e.InvPhysicalitem)
                    .IsRequired()
                    .HasColumnName("INV_PHYSICALITEM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvRetailprice)
                    .HasColumnName("INV_RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSpecialprice)
                    .HasColumnName("INV_SPECIALPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvTradeprice)
                    .HasColumnName("INV_TRADEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.InvWsaleprice)
                    .HasColumnName("INV_WSALEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvadjustmentGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INVADJUSTMENT_GL");

                entity.Property(e => e.InventoryGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inventory_gl");

                entity.Property(e => e.InvoiceDiscount)
                    .HasColumnName("invoice_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Iscontainer)
                    .HasColumnName("iscontainer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ismother)
                    .HasColumnName("ismother")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kisimax)
                    .HasColumnName("kisimax")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LocCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Lockprice)
                    .HasColumnName("lockprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.Mnfcountry)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFCOUNTRY");

                entity.Property(e => e.Mnfintial)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MNFINTIAL");

                entity.Property(e => e.Mnfname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFNAME");

                entity.Property(e => e.MotherinvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("motherinv_code");

                entity.Property(e => e.Noexpiry).HasColumnName("noexpiry");

                entity.Property(e => e.Notforsale)
                    .HasColumnName("notforsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PackQty)
                    .HasColumnName("PACK_QTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGE_CODE");

                entity.Property(e => e.Pkgname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PKGNAME");

                entity.Property(e => e.Prodclass)
                    .HasColumnName("prodclass")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Proditem)
                    .HasColumnName("proditem")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rawmaterial)
                    .HasColumnName("rawmaterial")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALES_GL");

                entity.Property(e => e.Sbggl)
                    .HasColumnName("SBGGL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgisacct)
                    .HasColumnName("SBGisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SBGNAME");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitQty).HasColumnName("UNIT_QTY");

                entity.Property(e => e.Yeszeroprice)
                    .HasColumnName("yeszeroprice")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Impinventoryauto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("impinventoryauto");

                entity.HasIndex(e => e.Invuser, "IX_impinventoryauto");

                entity.HasIndex(e => e.Description, "IX_impinventoryauto_1")
                    .IsClustered();

                entity.Property(e => e.ActiveIngredient)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_INGREDIENT");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BARCODE");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.CashDiscount)
                    .HasColumnName("cash_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Contsub)
                    .HasColumnName("contsub")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostofsalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COSTOFSALES_GL");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Fastmoving)
                    .HasColumnName("fastmoving")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forrefill)
                    .HasColumnName("forrefill")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Glitem)
                    .HasColumnName("glitem")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gpcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GPCODE");

                entity.Property(e => e.Gpisacct)
                    .HasColumnName("GPisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gpname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GPNAME");

                entity.Property(e => e.Highvalue)
                    .HasColumnName("highvalue")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inclusive).HasColumnName("inclusive");

                entity.Property(e => e.InvAvgcost)
                    .HasColumnName("INV_AVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAvgsellcost)
                    .HasColumnName("INV_AVGSELLCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvBrandgeneric).HasColumnName("INV_BRANDGENERIC");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvCostprice)
                    .HasColumnName("INV_COSTPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvItemcontents)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_ITEMCONTENTS");

                entity.Property(e => e.InvLastunitcost)
                    .HasColumnName("INV_LASTUNITCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMaxprice)
                    .HasColumnName("INV_MAXPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinprice)
                    .HasColumnName("INV_MINPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvNotes)
                    .HasMaxLength(500)
                    .HasColumnName("inv_notes");

                entity.Property(e => e.InvPhysicalitem)
                    .IsRequired()
                    .HasColumnName("INV_PHYSICALITEM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvRetailprice)
                    .HasColumnName("INV_RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSpecialprice)
                    .HasColumnName("INV_SPECIALPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvTradeprice)
                    .HasColumnName("INV_TRADEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.InvWsaleprice)
                    .HasColumnName("INV_WSALEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvadjustmentGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INVADJUSTMENT_GL");

                entity.Property(e => e.InventoryGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inventory_gl");

                entity.Property(e => e.InvoiceDiscount)
                    .HasColumnName("invoice_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Iscontainer)
                    .HasColumnName("iscontainer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ismother)
                    .HasColumnName("ismother")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kisimax)
                    .HasColumnName("kisimax")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LocCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Lockprice)
                    .HasColumnName("lockprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.Mnfcountry)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFCOUNTRY");

                entity.Property(e => e.Mnfintial)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MNFINTIAL");

                entity.Property(e => e.Mnfname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFNAME");

                entity.Property(e => e.MotherinvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("motherinv_code");

                entity.Property(e => e.Noexpiry).HasColumnName("noexpiry");

                entity.Property(e => e.Notforsale)
                    .HasColumnName("notforsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PackQty)
                    .HasColumnName("PACK_QTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGE_CODE");

                entity.Property(e => e.Pkgname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PKGNAME");

                entity.Property(e => e.Prodclass)
                    .HasColumnName("prodclass")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Proditem)
                    .HasColumnName("proditem")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rawmaterial)
                    .HasColumnName("rawmaterial")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALES_GL");

                entity.Property(e => e.Sbggl)
                    .HasColumnName("SBGGL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgisacct)
                    .HasColumnName("SBGisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SBGNAME");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitQty).HasColumnName("UNIT_QTY");

                entity.Property(e => e.Yeszeroprice)
                    .HasColumnName("yeszeroprice")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Impinvprice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("impinvprice");

                entity.HasIndex(e => e.Invuser, "IX_impinvprice");

                entity.HasIndex(e => e.Description, "IX_impinvprice_1")
                    .IsClustered();

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("barcode")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Blocked)
                    .HasColumnName("blocked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CashDiscount)
                    .HasColumnName("cash_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostofsalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COSTOFSALES_GL");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Gpcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GPCODE");

                entity.Property(e => e.Gpisacct)
                    .HasColumnName("GPisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gpname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GPNAME");

                entity.Property(e => e.Inclusive).HasColumnName("inclusive");

                entity.Property(e => e.InvAvgcost)
                    .HasColumnName("INV_AVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAvgsellcost)
                    .HasColumnName("INV_AVGSELLCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvCostprice)
                    .HasColumnName("INV_COSTPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvLastunitcost)
                    .HasColumnName("INV_LASTUNITCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMaxprice)
                    .HasColumnName("INV_MAXPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinprice)
                    .HasColumnName("INV_MINPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvPhysicalitem)
                    .IsRequired()
                    .HasColumnName("INV_PHYSICALITEM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvRetailprice)
                    .HasColumnName("INV_RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSpecialprice)
                    .HasColumnName("INV_SPECIALPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvTradeprice)
                    .HasColumnName("INV_TRADEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvWsaleprice)
                    .HasColumnName("INV_WSALEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvadjustmentGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INVADJUSTMENT_GL");

                entity.Property(e => e.InventoryGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inventory_gl");

                entity.Property(e => e.InvoiceDiscount)
                    .HasColumnName("invoice_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Kisimax)
                    .HasColumnName("kisimax")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockprice)
                    .HasColumnName("lockprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.Mnfcountry)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFCOUNTRY");

                entity.Property(e => e.Mnfintial)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MNFINTIAL");

                entity.Property(e => e.Mnfname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFNAME");

                entity.Property(e => e.PackQty)
                    .HasColumnName("PACK_QTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALES_GL");

                entity.Property(e => e.Sbggl)
                    .HasColumnName("SBGGL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgisacct)
                    .HasColumnName("SBGisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SBGNAME");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show1)
                    .HasColumnName("show1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show2)
                    .HasColumnName("show2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show3)
                    .HasColumnName("show3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show4)
                    .HasColumnName("show4")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show5)
                    .HasColumnName("show5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show6)
                    .HasColumnName("show6")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show7)
                    .HasColumnName("show7")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show8)
                    .HasColumnName("show8")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show9)
                    .HasColumnName("show9")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Yeszeroprice)
                    .HasColumnName("yeszeroprice")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Impinvpricekah>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("impinvpricekah");

                entity.HasIndex(e => e.Invuser, "IX_impinvpricekah");

                entity.HasIndex(e => e.Description, "IX_impinvpricekah_1")
                    .IsClustered();

                entity.Property(e => e.Blocked)
                    .HasColumnName("blocked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CashDiscount)
                    .HasColumnName("cash_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostofsalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COSTOFSALES_GL");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Gpcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GPCODE");

                entity.Property(e => e.Gpisacct)
                    .HasColumnName("GPisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gpname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GPNAME");

                entity.Property(e => e.Inclusive).HasColumnName("inclusive");

                entity.Property(e => e.InvAvgcost)
                    .HasColumnName("INV_AVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAvgsellcost)
                    .HasColumnName("INV_AVGSELLCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvCostprice)
                    .HasColumnName("INV_COSTPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvLastunitcost)
                    .HasColumnName("INV_LASTUNITCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMaxprice)
                    .HasColumnName("INV_MAXPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinprice)
                    .HasColumnName("INV_MINPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvPhysicalitem)
                    .IsRequired()
                    .HasColumnName("INV_PHYSICALITEM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvRetailprice)
                    .HasColumnName("INV_RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSpecialprice)
                    .HasColumnName("INV_SPECIALPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvTradeprice)
                    .HasColumnName("INV_TRADEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvWsaleprice)
                    .HasColumnName("INV_WSALEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvadjustmentGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INVADJUSTMENT_GL");

                entity.Property(e => e.InventoryGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inventory_gl");

                entity.Property(e => e.InvoiceDiscount)
                    .HasColumnName("invoice_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Lockprice)
                    .HasColumnName("lockprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.Mnfcountry)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFCOUNTRY");

                entity.Property(e => e.Mnfintial)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MNFINTIAL");

                entity.Property(e => e.Mnfname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFNAME");

                entity.Property(e => e.PackQty)
                    .HasColumnName("PACK_QTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALES_GL");

                entity.Property(e => e.Sbggl)
                    .HasColumnName("SBGGL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgisacct)
                    .HasColumnName("SBGisacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbgname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SBGNAME");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show1)
                    .HasColumnName("show1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show2)
                    .HasColumnName("show2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show3)
                    .HasColumnName("show3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show4)
                    .HasColumnName("show4")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show5)
                    .HasColumnName("show5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show6)
                    .HasColumnName("show6")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show7)
                    .HasColumnName("show7")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show8)
                    .HasColumnName("show8")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Show9)
                    .HasColumnName("show9")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Yeszeroprice)
                    .HasColumnName("yeszeroprice")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Import>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IMPORT");

                entity.HasIndex(e => e.OrdNum, "DNOTE_NUM")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AdviceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADVICE_DATE");

                entity.Property(e => e.ArrivalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ARRIVAL_DATE");

                entity.Property(e => e.ClrDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CLR_DATE");

                entity.Property(e => e.ClrDocstoagent)
                    .HasColumnType("datetime")
                    .HasColumnName("CLR_DOCSTOAGENT");

                entity.Property(e => e.ClrFromagent)
                    .HasColumnType("datetime")
                    .HasColumnName("CLR_FROMAGENT");

                entity.Property(e => e.CrfRcvddate)
                    .HasColumnType("datetime")
                    .HasColumnName("CRF_RCVDDATE");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.IdfAppdate)
                    .HasColumnType("datetime")
                    .HasColumnName("IDF_APPDATE");

                entity.Property(e => e.IdfFrominspagent)
                    .HasColumnType("datetime")
                    .HasColumnName("IDF_FROMINSPAGENT");

                entity.Property(e => e.IdfFrommoh)
                    .HasColumnType("datetime")
                    .HasColumnName("IDF_FROMMOH");

                entity.Property(e => e.IdfNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IDF_NUM");

                entity.Property(e => e.IdfSupprcpt)
                    .HasColumnType("datetime")
                    .HasColumnName("IDF_SUPPRCPT");

                entity.Property(e => e.IdfToinspagent)
                    .HasColumnType("datetime")
                    .HasColumnName("IDF_TOINSPAGENT");

                entity.Property(e => e.IdfTomoh)
                    .HasColumnType("datetime")
                    .HasColumnName("IDF_TOMOH");

                entity.Property(e => e.IdfTosupp)
                    .HasColumnType("datetime")
                    .HasColumnName("IDF_TOSUPP");

                entity.Property(e => e.OrdDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ORD_DATE");

                entity.Property(e => e.OrdExchrate).HasColumnName("ORD_EXCHRATE");

                entity.Property(e => e.OrdKshs).HasColumnName("ORD_KSHS");

                entity.Property(e => e.OrdNum).HasColumnName("ORD_NUM");

                entity.Property(e => e.OrdNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORD_number");

                entity.Property(e => e.OrdPrice).HasColumnName("ORD_PRICE");

                entity.Property(e => e.PayExchrate).HasColumnName("PAY_EXCHRATE");

                entity.Property(e => e.PayKshs).HasColumnName("PAY_KSHS");

                entity.Property(e => e.PaydueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PAYDUE_DATE");

                entity.Property(e => e.PaymadeDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PAYMADE_DATE");

                entity.Property(e => e.ProfomaDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PROFOMA_DATE");

                entity.Property(e => e.ProfomaNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PROFOMA_NUM");

                entity.Property(e => e.RcvdDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RCVD_DATE");

                entity.Property(e => e.Reconciled).HasColumnName("RECONCILED");

                entity.Property(e => e.Ref)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REF");

                entity.Property(e => e.ShipDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SHIP_DATE");

                entity.Property(e => e.ShipdocsDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SHIPDOCS_DATE");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.TentshipDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TENTSHIP_DATE");
            });

            modelBuilder.Entity<Impspprice>(entity =>
            {
                entity.HasKey(e => new { e.SuppCode, e.InvCode })
                    .HasName("PK_IMPSPPRICE_1");

                entity.ToTable("IMPSPPRICE");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Bonus).HasColumnName("BONUS");

                entity.Property(e => e.Bonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW");

                entity.Property(e => e.Discexpirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYDATE");

                entity.Property(e => e.Discmode)
                    .HasColumnName("DISCMODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Disctype)
                    .HasColumnName("DISCTYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spbonus).HasColumnName("SPBONUS");

                entity.Property(e => e.Spbonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW");

                entity.Property(e => e.Spdiscount)
                    .HasColumnName("SPDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppriceamt)
                    .HasColumnName("SPPRICEAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppriceapply)
                    .HasColumnName("SPPRICEAPPLY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppriceentrynum)
                    .HasColumnName("SPPRICEENTRYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty)
                    .HasColumnName("SPPWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tradeprice)
                    .HasColumnName("TRADEPRICE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Impsppriceauto>(entity =>
            {
                entity.HasKey(e => new { e.SuppCode, e.InvCode })
                    .HasName("PK_IMPSPPRICEauto_1");

                entity.ToTable("IMPSPPRICEauto");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonus).HasColumnName("BONUS");

                entity.Property(e => e.Bonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW");

                entity.Property(e => e.Discexpirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYDATE");

                entity.Property(e => e.Discmode)
                    .HasColumnName("DISCMODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Disctype)
                    .HasColumnName("DISCTYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spbonus).HasColumnName("SPBONUS");

                entity.Property(e => e.Spbonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW");

                entity.Property(e => e.Spdiscount)
                    .HasColumnName("SPDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppriceamt)
                    .HasColumnName("SPPRICEAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppriceapply)
                    .HasColumnName("SPPRICEAPPLY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppriceentrynum)
                    .HasColumnName("SPPRICEENTRYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty)
                    .HasColumnName("SPPWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tradeprice)
                    .HasColumnName("TRADEPRICE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Impsupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IMPSUPPLIER");

                entity.HasIndex(e => e.SuppDesc, "IX_IMPSUPPLIER")
                    .IsClustered();

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.Curdescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURDESCRIPTION");

                entity.Property(e => e.Currencycode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Cursymbol)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURSYMBOL");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Fax)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Phone)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHYSICALADD");

                entity.Property(e => e.Pinno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PINNO");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SpcatgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_CODE");

                entity.Property(e => e.SpcatgGl)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_GL");

                entity.Property(e => e.SpcatgName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_NAME");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_DESC");

                entity.Property(e => e.Terms)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TERMS");

                entity.Property(e => e.Town)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TownCode).HasColumnName("town_code");

                entity.Property(e => e.Twnprovince)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE");

                entity.Property(e => e.TwnprovinceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE_CODE");

                entity.Property(e => e.Twntown)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNTOWN");

                entity.Property(e => e.Vatno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VATNO");
            });

            modelBuilder.Entity<Impsupplierauto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IMPSUPPLIERauto");

                entity.HasIndex(e => e.SuppDesc, "IX_IMPSUPPLIERauto")
                    .IsClustered();

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blocked)
                    .HasColumnName("blocked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.Curdescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURDESCRIPTION");

                entity.Property(e => e.Currencycode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Cursymbol)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURSYMBOL");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Fax)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Phone)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHYSICALADD");

                entity.Property(e => e.Pinno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PINNO");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SpcatgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_CODE");

                entity.Property(e => e.SpcatgGl)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_GL");

                entity.Property(e => e.SpcatgName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_NAME");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_DESC");

                entity.Property(e => e.Terms)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TERMS");

                entity.Property(e => e.Town)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TownCode).HasColumnName("town_code");

                entity.Property(e => e.Twnprovince)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE");

                entity.Property(e => e.TwnprovinceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE_CODE");

                entity.Property(e => e.Twntown)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNTOWN");

                entity.Property(e => e.Vatno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VATNO");
            });

            modelBuilder.Entity<Impsupplierkah>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IMPSUPPLIERkah");

                entity.HasIndex(e => e.SuppDesc, "IX_IMPSUPPLIERkah")
                    .IsClustered();

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.Curdescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURDESCRIPTION");

                entity.Property(e => e.Currencycode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Cursymbol)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURSYMBOL");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Fax)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.Invuser)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("invuser");

                entity.Property(e => e.Phone)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHYSICALADD");

                entity.Property(e => e.Pinno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PINNO");

                entity.Property(e => e.Selme)
                    .HasColumnName("selme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SpcatgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_CODE");

                entity.Property(e => e.SpcatgGl)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_GL");

                entity.Property(e => e.SpcatgName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_NAME");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_DESC");

                entity.Property(e => e.Terms)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TERMS");

                entity.Property(e => e.Town)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TownCode).HasColumnName("town_code");

                entity.Property(e => e.Twnprovince)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE");

                entity.Property(e => e.TwnprovinceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TWNPROVINCE_CODE");

                entity.Property(e => e.Twntown)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TWNTOWN");

                entity.Property(e => e.Vatno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VATNO");
            });

            modelBuilder.Entity<InvDiscount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INV_DISCOUNTS");

                entity.HasIndex(e => e.Id, "id")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Expirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRYDATE");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Worthqty).HasColumnName("WORTHQTY");
            });

            modelBuilder.Entity<InvGroup>(entity =>
            {
                entity.HasKey(e => e.InvGroupcode)
                    .IsClustered(false);

                entity.ToTable("INV_GROUP");

                entity.HasIndex(e => e.Description, "DESCRIPTION")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.InvGroupcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_GROUPCODE");

                entity.Property(e => e.CostofsalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COSTOFSALES_GL");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvGroupbarcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_GROUPBARCODE");

                entity.Property(e => e.InvadjustmentGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INVADJUSTMENT_GL");

                entity.Property(e => e.InventoryGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inventory_gl");

                entity.Property(e => e.Isacct)
                    .HasColumnName("isacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALES_GL");
            });

            modelBuilder.Entity<InvHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INV_HISTORY");

                entity.HasIndex(e => e.Id, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Cost).HasColumnName("COST");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Narration)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("NARRATION");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Reference)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCE");

                entity.Property(e => e.TotalCost).HasColumnName("TOTAL_COST");

                entity.Property(e => e.TotalSelling).HasColumnName("TOTAL_SELLING");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");

                entity.Property(e => e.Transtype)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TRANSTYPE");
            });

            modelBuilder.Entity<InvJournalz>(entity =>
            {
                entity.HasKey(e => new { e.InvJDetnum, e.Bcode })
                    .HasName("IX_INV_JOURNALZ_CRUD");

                entity.ToTable("INV_JOURNALZ");

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvJDate, "ndxInvDate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.InvJDetnum).HasColumnName("inv_J_DETNUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DatePosted)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Posted")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Ijrnnum)
                    .HasColumnName("IJRNNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ijrntypenum)
                    .HasColumnName("IJRNTYPENUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("inv_CODE");

                entity.Property(e => e.InvJContra)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inv_J_CONTRA");

                entity.Property(e => e.InvJCost).HasColumnName("inv_J_cost");

                entity.Property(e => e.InvJDate)
                    .HasColumnType("datetime")
                    .HasColumnName("inv_J_DATE");

                entity.Property(e => e.InvJDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_J_DESC");

                entity.Property(e => e.InvJIo)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("inv_J_io");

                entity.Property(e => e.InvJName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_J_NAME");

                entity.Property(e => e.InvJOrderref)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("inv_j_orderref");

                entity.Property(e => e.InvJQty)
                    .HasColumnName("inv_J_qty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvJRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_J_REF");

                entity.Property(e => e.InvJTvalue).HasColumnName("inv_J_tvalue");

                entity.Property(e => e.Oldcost).HasColumnName("OLDCOST");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<InvLocation>(entity =>
            {
                entity.HasKey(e => new { e.LocCode, e.InvCode })
                    .IsClustered(false);

                entity.ToTable("INV_LOCATIONS");

                entity.HasIndex(e => new { e.LocCode, e.InvCode }, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");
            });

            modelBuilder.Entity<InvPackage>(entity =>
            {
                entity.HasKey(e => e.PackageCode);

                entity.ToTable("INV_PACKAGE");

                entity.HasIndex(e => e.Description, "DESCRIPTION")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGE_CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");
            });

            modelBuilder.Entity<InvPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INV_PRICES");

                entity.HasIndex(e => new { e.InvCode, e.Pricecode }, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Pricecode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PRICECODE");
            });

            modelBuilder.Entity<InvStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INV_STOCK");

                entity.HasIndex(e => e.InvCode, "xinv_code");

                entity.HasIndex(e => new { e.LocCode, e.StockDate }, "xstocksearch");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("barcode");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM");

                entity.Property(e => e.Batched)
                    .HasColumnName("batched")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Classcode)
                    .HasColumnName("classcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CompQty).HasColumnName("COMP_QTY");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENTRYDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Entrynum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ENTRYNUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("package_code")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Stkref)
                    .HasColumnName("STKREF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOCK_DATE");

                entity.Property(e => e.StockQty).HasColumnName("STOCK_QTY");

                entity.Property(e => e.Stockuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stockuser")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UPDATEUSER");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<InvStockSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INV_STOCK_SUMMARY");

                entity.HasIndex(e => e.InvCode, "xstockcode");

                entity.HasIndex(e => new { e.LocCode, e.StockDate }, "xstocksearch");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("barcode");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Classcode)
                    .HasColumnName("classcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CompQty).HasColumnName("COMP_QTY");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Entrynum).HasColumnName("ENTRYNUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("package_code")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.StockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOCK_DATE");

                entity.Property(e => e.StockQty).HasColumnName("STOCK_QTY");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UPDATEUSER");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<InvStockSummaryadj>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INV_STOCK_SUMMARYADJ");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("barcode");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM");

                entity.Property(e => e.CompQty).HasColumnName("COMP_QTY");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Entrynum).HasColumnName("ENTRYNUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOCK_DATE");

                entity.Property(e => e.StockQty).HasColumnName("STOCK_QTY");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UPDATEUSER");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<InvStockSummaryclose>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INV_STOCK_SUMMARYCLOSE");

                entity.HasIndex(e => e.InvCode, "xstockcode");

                entity.HasIndex(e => new { e.LocCode, e.StockDate }, "xstocksearch");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("barcode");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM");

                entity.Property(e => e.CompQty).HasColumnName("COMP_QTY");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Entrynum).HasColumnName("ENTRYNUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOCK_DATE");

                entity.Property(e => e.StockQty).HasColumnName("STOCK_QTY");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UPDATEUSER");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<InvStockTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INV_STOCK_TEMP");

                entity.HasIndex(e => e.InvCode, "xstockcode");

                entity.HasIndex(e => new { e.LocCode, e.StockDate }, "xstocksearch");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("barcode");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CompQty).HasColumnName("COMP_QTY");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Entrynum).HasColumnName("ENTRYNUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.StockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOCK_DATE");

                entity.Property(e => e.StockQty).HasColumnName("STOCK_QTY");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UPDATEUSER");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<InvStockTempadj>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INV_STOCK_TEMPADJ");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("barcode");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM");

                entity.Property(e => e.CompQty).HasColumnName("COMP_QTY");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Entrynum).HasColumnName("ENTRYNUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOCK_DATE");

                entity.Property(e => e.StockQty).HasColumnName("STOCK_QTY");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UPDATEUSER");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<InvStockTempclose>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INV_STOCK_TEMPCLOSE");

                entity.HasIndex(e => e.InvCode, "xstockcode");

                entity.HasIndex(e => new { e.LocCode, e.StockDate }, "xstocksearch");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("barcode");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM");

                entity.Property(e => e.CompQty).HasColumnName("COMP_QTY");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Entrynum).HasColumnName("ENTRYNUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOCK_DATE");

                entity.Property(e => e.StockQty).HasColumnName("STOCK_QTY");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UPDATEUSER");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<InvStockadj>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INV_STOCKADJ");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("barcode");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM");

                entity.Property(e => e.Batched)
                    .HasColumnName("batched")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CompQty).HasColumnName("COMP_QTY");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENTRYDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Entrynum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ENTRYNUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOCK_DATE");

                entity.Property(e => e.StockQty).HasColumnName("STOCK_QTY");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UPDATEUSER");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<InvStockclose>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INV_STOCKCLOSE");

                entity.HasIndex(e => e.InvCode, "xinv_code");

                entity.HasIndex(e => new { e.LocCode, e.StockDate }, "xstocksearch");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("barcode");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM");

                entity.Property(e => e.Batched)
                    .HasColumnName("batched")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CompQty).HasColumnName("COMP_QTY");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENTRYDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Entrynum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ENTRYNUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOCK_DATE");

                entity.Property(e => e.StockQty).HasColumnName("STOCK_QTY");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UPDATEUSER");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<InvStockimpfinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INV_STOCKIMPfinal");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(255)
                    .HasColumnName("BATCH_NUM");

                entity.Property(e => e.Batched).HasColumnName("BATCHED");

                entity.Property(e => e.CompQty).HasColumnName("COMP_QTY");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(255)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(255)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(255)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(255)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.StockQty).HasColumnName("STOCK_QTY");

                entity.Property(e => e.Username)
                    .HasMaxLength(255)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<InvStockoctober>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("inv_stockoctober");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.CompQty).HasColumnName("COMP_QTY");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENTRYDATE");

                entity.Property(e => e.Entrynum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ENTRYNUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.StockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOCK_DATE");

                entity.Property(e => e.StockQty).HasColumnName("STOCK_QTY");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UPDATEUSER");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<InvSubgroup>(entity =>
            {
                entity.HasKey(e => e.InvSubgroupcode);

                entity.ToTable("INV_SUBGROUP");

                entity.HasIndex(e => e.Description, "DESCRIPTION")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.InvSubgroupcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Gl)
                    .HasColumnName("GL")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InvGroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_GROUPCODE");

                entity.Property(e => e.InvSubgroupbarcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPBARCODE");

                entity.Property(e => e.Isacct)
                    .HasColumnName("isacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.M1from)
                    .HasColumnName("M1FROM")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.M1to)
                    .HasColumnName("M1TO")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.M2from)
                    .HasColumnName("M2FROM")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.M2to)
                    .HasColumnName("M2TO")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.M3from)
                    .HasColumnName("M3FROM")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.M3to)
                    .HasColumnName("M3TO")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.M4from)
                    .HasColumnName("M4FROM")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<InvSupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INV_SUPPLIERS");

                entity.HasIndex(e => new { e.InvCode, e.SuppCode }, "XSUPPINV")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");
            });

            modelBuilder.Entity<InvTran>(entity =>
            {
                entity.HasKey(e => new { e.ModuleCode, e.TransNo, e.ExpiryDate, e.LocCode, e.BatchNum })
                    .IsClustered(false);

                entity.ToTable("INV_TRANS");

                entity.HasIndex(e => new { e.ModuleCode, e.TransNo, e.ExpiryDate, e.LocCode, e.BatchNum }, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TransDate, "ndxTransDate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.TransNo).HasColumnName("TRANS_NO");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("batch_num");

                entity.Property(e => e.Bonus).HasColumnName("BONUS");

                entity.Property(e => e.Entryno)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ENTRYNO");

                entity.Property(e => e.Increase).HasColumnName("increase");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.OldModuleCode).HasColumnName("oldMODULE_CODE");

                entity.Property(e => e.OldTransNo).HasColumnName("oldTRANS_NO");

                entity.Property(e => e.Posted).HasColumnName("POSTED");

                entity.Property(e => e.QtyIn).HasColumnName("QTY_IN");

                entity.Property(e => e.QtyOut).HasColumnName("QTY_OUT");

                entity.Property(e => e.QtyReturned).HasColumnName("QTY_RETURNED");

                entity.Property(e => e.QtyTomove)
                    .HasColumnName("QTY_TOMOVE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");
            });

            modelBuilder.Entity<InvTransTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INV_TRANS_TEMP");

                entity.HasIndex(e => new { e.ModuleCode, e.TransNo, e.ExpiryDate, e.LocCode, e.BatchNum }, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("batch_num");

                entity.Property(e => e.Entryno)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ENTRYNO");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.Increase).HasColumnName("increase");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.LocCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.Posted).HasColumnName("POSTED");

                entity.Property(e => e.QtyIn).HasColumnName("QTY_IN");

                entity.Property(e => e.QtyOut).HasColumnName("QTY_OUT");

                entity.Property(e => e.QtyTomove).HasColumnName("QTY_TOMOVE");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");

                entity.Property(e => e.TransNo).HasColumnName("TRANS_NO");
            });

            modelBuilder.Entity<Invbcode>(entity =>
            {
                entity.HasKey(e => new { e.InvCode, e.Bcode });

                entity.ToTable("INVBCODE");

                entity.HasIndex(e => e.Description, "IX_INVBCODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.ActiveIngredient)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("active_ingredient")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Blocked)
                    .HasColumnName("blocked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Calcpw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("calcpw")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Calcqty)
                    .HasColumnName("calcqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Calcqtyopen)
                    .HasColumnName("calcqtyopen")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CalcqtyopenPw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("calcqtyopenPW")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvAvgcost)
                    .HasColumnName("INV_AVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAvgsellcost)
                    .HasColumnName("INV_AVGSELLCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvBrandgeneric)
                    .HasColumnName("INV_BRANDGENERIC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCostprice)
                    .HasColumnName("INV_COSTPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvLastunitcost)
                    .HasColumnName("INV_LASTUNITCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinprice)
                    .HasColumnName("INV_MINPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvPhysicalitem)
                    .HasColumnName("INV_PHYSICALITEM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvRetailprice)
                    .HasColumnName("INV_RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSpecialprice)
                    .HasColumnName("INV_SPECIALPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvTradeprice)
                    .HasColumnName("INV_TRADEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvWsaleprice)
                    .HasColumnName("INV_WSALEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PackQty)
                    .HasColumnName("PACK_QTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Reqty)
                    .HasColumnName("reqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stkrolevel)
                    .HasColumnName("stkrolevel")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stkroqty)
                    .HasColumnName("stkroqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE")
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.Valqty)
                    .HasColumnName("valqty")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Invbcodedate>(entity =>
            {
                entity.HasKey(e => new { e.InvCode, e.Bcode });

                entity.ToTable("INVBCODEDATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.ActiveIngredient)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("active_ingredient")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Blocked)
                    .HasColumnName("blocked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Calcpw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("calcpw")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Calcqty)
                    .HasColumnName("calcqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Calcqtyopen)
                    .HasColumnName("calcqtyopen")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CalcqtyopenPw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("calcqtyopenPW")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvAvgcost)
                    .HasColumnName("INV_AVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAvgsellcost)
                    .HasColumnName("INV_AVGSELLCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvBrandgeneric)
                    .HasColumnName("INV_BRANDGENERIC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCostprice)
                    .HasColumnName("INV_COSTPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvLastunitcost)
                    .HasColumnName("INV_LASTUNITCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinprice)
                    .HasColumnName("INV_MINPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvPhysicalitem)
                    .HasColumnName("INV_PHYSICALITEM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvRetailprice)
                    .HasColumnName("INV_RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSpecialprice)
                    .HasColumnName("INV_SPECIALPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvTradeprice)
                    .HasColumnName("INV_TRADEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvWsaleprice)
                    .HasColumnName("INV_WSALEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PackQty)
                    .HasColumnName("PACK_QTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Reqty)
                    .HasColumnName("reqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stkrolevel)
                    .HasColumnName("stkrolevel")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stkroqty)
                    .HasColumnName("stkroqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stockdate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOCKDATE");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE")
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.Valqty)
                    .HasColumnName("valqty")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Invcentral>(entity =>
            {
                entity.HasKey(e => new { e.InvCode, e.Bcode });

                entity.ToTable("INVCENTRAL");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.InvAvgcost)
                    .HasColumnName("INV_AVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAvgsellcost)
                    .HasColumnName("INV_AVGSELLCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCostprice)
                    .HasColumnName("INV_COSTPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvLastunitcost)
                    .HasColumnName("INV_LASTUNITCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinprice)
                    .HasColumnName("INV_MINPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvRetailprice)
                    .HasColumnName("INV_RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSpecialprice)
                    .HasColumnName("INV_SPECIALPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvTradeprice)
                    .HasColumnName("INV_TRADEPRICE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Invclass>(entity =>
            {
                entity.HasKey(e => e.Classcode);

                entity.ToTable("INVCLASS");

                entity.Property(e => e.Classcode)
                    .ValueGeneratedNever()
                    .HasColumnName("CLASSCODE");

                entity.Property(e => e.Classname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("CLASSNAME");
            });

            modelBuilder.Entity<Inventactive>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("inventactive");

                entity.Property(e => e.Active)
                    .HasMaxLength(255)
                    .HasColumnName("active");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("description");

                entity.Property(e => e.F8).HasMaxLength(255);

                entity.Property(e => e.F9).HasMaxLength(255);

                entity.Property(e => e.InvCode)
                    .HasMaxLength(255)
                    .HasColumnName("inv_code ");

                entity.Property(e => e.InvSubgroupcode)
                    .HasMaxLength(255)
                    .HasColumnName("inv_subgroupcode");

                entity.Property(e => e.InvTradeprice).HasColumnName("inv_tradeprice");

                entity.Property(e => e.PackQty).HasColumnName("pack_qty");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(255)
                    .HasColumnName("tax_code");
            });

            modelBuilder.Entity<Invento>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INVENTO");

                entity.Property(e => e.ActiveIngredient)
                    .HasMaxLength(255)
                    .HasColumnName("ACTIVE_INGREDIENT");

                entity.Property(e => e.AltCode)
                    .HasMaxLength(255)
                    .HasColumnName("ALT_CODE");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.Counter).HasColumnName("COUNTER");

                entity.Property(e => e.Deleted).HasColumnName("DELETED");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountAvailable).HasColumnName("DISCOUNT_AVAILABLE");

                entity.Property(e => e.InvAvgcost).HasColumnName("INV_AVGCOST");

                entity.Property(e => e.InvAvgsellcost).HasColumnName("INV_AVGSELLCOST");

                entity.Property(e => e.InvBrandgeneric).HasColumnName("INV_BRANDGENERIC");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(255)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvCostprice).HasColumnName("INV_COSTPRICE");

                entity.Property(e => e.InvCountryorigin)
                    .HasMaxLength(255)
                    .HasColumnName("INV_COUNTRYORIGIN");

                entity.Property(e => e.InvInstockqty).HasColumnName("INV_INSTOCKQTY");

                entity.Property(e => e.InvItemcontents)
                    .HasMaxLength(255)
                    .HasColumnName("INV_ITEMCONTENTS");

                entity.Property(e => e.InvLastunitcost).HasColumnName("INV_LASTUNITCOST");

                entity.Property(e => e.InvMaxprice).HasColumnName("INV_MAXPRICE");

                entity.Property(e => e.InvMaxqty).HasColumnName("INV_MAXQTY");

                entity.Property(e => e.InvMinprice).HasColumnName("INV_MINPRICE");

                entity.Property(e => e.InvMinqty).HasColumnName("INV_MINQTY");

                entity.Property(e => e.InvNotes)
                    .HasMaxLength(255)
                    .HasColumnName("inv_notes");

                entity.Property(e => e.InvOpeningqty).HasColumnName("INV_OPENINGQTY");

                entity.Property(e => e.InvPhysicalitem).HasColumnName("INV_PHYSICALITEM");

                entity.Property(e => e.InvReorderqty).HasColumnName("INV_REORDERQTY");

                entity.Property(e => e.InvRetailprice).HasColumnName("INV_RETAILPRICE");

                entity.Property(e => e.InvSpecialprice).HasColumnName("INV_SPECIALPRICE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(255)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvSubgroupcode)
                    .HasMaxLength(255)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvTradeprice).HasColumnName("INV_TRADEPRICE");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(255)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(255)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.LogicalGroup)
                    .HasMaxLength(255)
                    .HasColumnName("LOGICAL_GROUP");

                entity.Property(e => e.Manufacturer)
                    .HasMaxLength(255)
                    .HasColumnName("MANUFACTURER");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(255)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.Noexpiry).HasColumnName("noexpiry");

                entity.Property(e => e.PackQty).HasColumnName("PACK_QTY");

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(255)
                    .HasColumnName("PACKAGE_CODE");

                entity.Property(e => e.ProvisionCode)
                    .HasMaxLength(255)
                    .HasColumnName("PROVISION_CODE");

                entity.Property(e => e.RetailItem).HasColumnName("RETAIL_ITEM");

                entity.Property(e => e.Salesprofit).HasColumnName("SALESPROFIT");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(255)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.TransferItem).HasColumnName("TRANSFER_ITEM");

                entity.Property(e => e.UnitQty).HasColumnName("UNIT_QTY");
            });

            modelBuilder.Entity<Inventory>(entity =>
            {
                entity.HasKey(e => e.InvCode)
                    .HasName("IX_INVENTORY_CRUD")
                    .IsClustered(false);

                entity.ToTable("INVENTORY");

                entity.HasIndex(e => e.Description, "ndxDescription")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ManufacturerCode, "ndxManufacturer")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ManufacturerCode, "ndxManufacturerCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvSubgroupcode, "ndxSubGroup")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCode, "ndxTaxCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.ActiveIngredient)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_INGREDIENT");

                entity.Property(e => e.AltCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ALT_CODE");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BARCODE");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blocked)
                    .HasColumnName("BLOCKED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonusenabled)
                    .HasColumnName("bonusenabled")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BroughtF).HasDefaultValueSql("((0))");

                entity.Property(e => e.CalcPw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("calcPW");

                entity.Property(e => e.CalcQty).HasDefaultValueSql("((0))");

                entity.Property(e => e.CarryF).HasDefaultValueSql("((0))");

                entity.Property(e => e.CashDiscount)
                    .HasColumnName("cash_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CashinvoiceDiscount)
                    .HasColumnName("cashinvoice_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cbrow)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CBROW");

                entity.Property(e => e.Choose)
                    .HasColumnName("choose")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Classcode)
                    .HasColumnName("classcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Contsub)
                    .HasColumnName("contsub")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Counter).HasColumnName("COUNTER");

                entity.Property(e => e.D1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d1");

                entity.Property(e => e.D2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d2");

                entity.Property(e => e.D3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d3");

                entity.Property(e => e.Deleted)
                    .HasColumnName("DELETED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountAvailable)
                    .HasColumnName("DISCOUNT_AVAILABLE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fastmoving)
                    .HasColumnName("fastmoving")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Formcode)
                    .HasColumnName("formcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forpackalter)
                    .HasColumnName("forpackalter")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forpackalterused)
                    .HasColumnName("forpackalterused")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forrefill)
                    .HasColumnName("forrefill")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Glitem)
                    .HasColumnName("glitem")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gp4code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("gp4code");

                entity.Property(e => e.Highvalue)
                    .HasColumnName("highvalue")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Iavgcost)
                    .HasColumnName("IAVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Iavgsell)
                    .HasColumnName("IAVGSELL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ilucost)
                    .HasColumnName("ILUCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inclusive)
                    .HasColumnName("inclusive")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAvgcost).HasColumnName("INV_AVGCOST");

                entity.Property(e => e.InvAvgcostclose)
                    .HasColumnName("INV_AVGCOSTCLOSE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAvgsellcost)
                    .HasColumnName("INV_AVGSELLCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvBrandgeneric)
                    .HasColumnName("INV_BRANDGENERIC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCostprice).HasColumnName("INV_COSTPRICE");

                entity.Property(e => e.InvCountryorigin)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_COUNTRYORIGIN")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.InvInstockqty).HasColumnName("INV_INSTOCKQTY");

                entity.Property(e => e.InvItemcontents)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_ITEMCONTENTS");

                entity.Property(e => e.InvLastunitcost).HasColumnName("INV_LASTUNITCOST");

                entity.Property(e => e.InvLastunitcostclose)
                    .HasColumnName("INV_LASTUNITCOSTCLOSE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMaxprice).HasColumnName("INV_MAXPRICE");

                entity.Property(e => e.InvMaxprices1)
                    .HasColumnName("INV_MAXPRICES1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMaxprices2)
                    .HasColumnName("INV_MAXPRICES2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMaxprices3)
                    .HasColumnName("INV_MAXPRICES3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMaxqty).HasColumnName("INV_MAXQTY");

                entity.Property(e => e.InvMinprice).HasColumnName("INV_MINPRICE");

                entity.Property(e => e.InvMinpriceretail)
                    .HasColumnName("inv_minpriceretail")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinpriceretailS1)
                    .HasColumnName("inv_minpriceretailS1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinpriceretailS2)
                    .HasColumnName("inv_minpriceretailS2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinpriceretailS3)
                    .HasColumnName("inv_minpriceretailS3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinprices1)
                    .HasColumnName("INV_MINPRICES1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinprices2)
                    .HasColumnName("INV_MINPRICES2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinprices3)
                    .HasColumnName("INV_MINPRICES3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinpricetrade)
                    .HasColumnName("inv_minpricetrade")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinpricetradeS1)
                    .HasColumnName("inv_minpricetradeS1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinpricetradeS2)
                    .HasColumnName("inv_minpricetradeS2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinpricetradeS3)
                    .HasColumnName("inv_minpricetradeS3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinpricewsale)
                    .HasColumnName("inv_minpricewsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinpricewsaleS1)
                    .HasColumnName("inv_minpricewsaleS1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinpricewsaleS2)
                    .HasColumnName("inv_minpricewsaleS2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinpricewsaleS3)
                    .HasColumnName("inv_minpricewsaleS3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvMinqty).HasColumnName("INV_MINQTY");

                entity.Property(e => e.InvNotes)
                    .HasMaxLength(500)
                    .HasColumnName("inv_notes");

                entity.Property(e => e.InvOldCostprice).HasColumnName("INV_oldCOSTPRICE");

                entity.Property(e => e.InvOpeningqty).HasColumnName("INV_OPENINGQTY");

                entity.Property(e => e.InvPhysicalitem)
                    .HasColumnName("INV_PHYSICALITEM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvReorderqty).HasColumnName("INV_REORDERQTY");

                entity.Property(e => e.InvRetailprice).HasColumnName("INV_RETAILPRICE");

                entity.Property(e => e.InvRetailprices1)
                    .HasColumnName("INV_RETAILPRICES1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvRetailprices2)
                    .HasColumnName("INV_RETAILPRICES2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvRetailprices3)
                    .HasColumnName("INV_RETAILPRICES3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSpecialprice).HasColumnName("INV_SPECIALPRICE");

                entity.Property(e => e.InvSpecialprices1)
                    .HasColumnName("INV_SPECIALPRICES1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSpecialprices2)
                    .HasColumnName("INV_SPECIALPRICES2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSpecialprices3)
                    .HasColumnName("INV_SPECIALPRICES3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvStrength)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvTradeprice).HasColumnName("INV_TRADEPRICE");

                entity.Property(e => e.InvTradeprices1)
                    .HasColumnName("INV_TRADEPRICES1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvTradeprices2)
                    .HasColumnName("INV_TRADEPRICES2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvTradeprices3)
                    .HasColumnName("INV_TRADEPRICES3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvUnit)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.InvWsaleprice)
                    .HasColumnName("INV_WSALEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvWsaleprices1)
                    .HasColumnName("INV_WSALEPRICES1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvWsaleprices2)
                    .HasColumnName("INV_WSALEPRICES2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvWsaleprices3)
                    .HasColumnName("INV_WSALEPRICES3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvoiceDiscount)
                    .HasColumnName("invoice_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Iscontainer)
                    .HasColumnName("iscontainer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ismother)
                    .HasColumnName("ismother")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Isqty)
                    .HasColumnName("ISQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kisimax)
                    .HasColumnName("kisimax")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Lockitemdiscount)
                    .HasColumnName("lockitemdiscount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockprice)
                    .HasColumnName("lockprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LogicalGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOGICAL_GROUP");

                entity.Property(e => e.Manufacturer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER");

                entity.Property(e => e.ManufacturerCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.Maxqty)
                    .HasColumnName("maxqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MotherinvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("motherinv_code");

                entity.Property(e => e.Negstock)
                    .HasColumnName("negstock")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Newavgcost)
                    .HasColumnName("NEWAVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Newcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NEWCODE");

                entity.Property(e => e.Noexpiry)
                    .HasColumnName("noexpiry")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Notforsale)
                    .HasColumnName("notforsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpeningQty)
                    .HasColumnName("OPENING_QTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PackQty)
                    .HasColumnName("PACK_QTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGE_CODE");

                entity.Property(e => e.PackinvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("packinv_code")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PackinvName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("packinv_name")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Prodclass)
                    .HasColumnName("prodclass")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Proditem)
                    .HasColumnName("proditem")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ProvisionCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PROVISION_CODE");

                entity.Property(e => e.Rawmaterial)
                    .HasColumnName("rawmaterial")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Reqty).HasDefaultValueSql("((0))");

                entity.Property(e => e.RetailItem)
                    .HasColumnName("RETAIL_ITEM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Salesprofit).HasColumnName("SALESPROFIT");

                entity.Property(e => e.Spack)
                    .HasColumnName("spack")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("supp_code");

                entity.Property(e => e.SuppCode2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("supp_code2");

                entity.Property(e => e.Suppdisc)
                    .HasColumnName("suppdisc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Suppdiscapply)
                    .HasColumnName("suppdiscapply")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Suppmarkup)
                    .HasColumnName("suppmarkup")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Suppmarkupapply)
                    .HasColumnName("suppmarkupapply")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sweight)
                    .HasColumnName("sweight")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE")
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.TransferItem)
                    .HasColumnName("TRANSFER_ITEM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitQty).HasColumnName("UNIT_QTY");

                entity.Property(e => e.V1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v1");

                entity.Property(e => e.V10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v10");

                entity.Property(e => e.V2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v2");

                entity.Property(e => e.V3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v3");

                entity.Property(e => e.V4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v4");

                entity.Property(e => e.V5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v5");

                entity.Property(e => e.V6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v6");

                entity.Property(e => e.V7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v7");

                entity.Property(e => e.V8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v8");

                entity.Property(e => e.V9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v9");

                entity.Property(e => e.Valqty).HasDefaultValueSql("((0))");

                entity.Property(e => e.W1).HasColumnName("w1");

                entity.Property(e => e.W2).HasColumnName("w2");

                entity.Property(e => e.Yeszeroprice)
                    .HasColumnName("yeszeroprice")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Inventorybranch>(entity =>
            {
                entity.HasKey(e => new { e.InvCode, e.Bcode });

                entity.ToTable("INVENTORYBRANCH");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.InvInstockqty).HasColumnName("INV_INSTOCKQTY");

                entity.Property(e => e.InvMaxqty).HasColumnName("INV_MAXQTY");

                entity.Property(e => e.InvMinqty).HasColumnName("INV_MINQTY");

                entity.Property(e => e.InvOpeningqty).HasColumnName("INV_OPENINGQTY");

                entity.Property(e => e.InvReorderqty).HasColumnName("INV_REORDERQTY");
            });

            modelBuilder.Entity<Invform>(entity =>
            {
                entity.HasKey(e => e.Formcode);

                entity.ToTable("INVFORM");

                entity.Property(e => e.Formcode)
                    .ValueGeneratedNever()
                    .HasColumnName("FORMCODE");

                entity.Property(e => e.Formname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("FORMNAME");
            });

            modelBuilder.Entity<InvoiceMatching>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Invoice_Matching");

                entity.HasIndex(e => e.EntryNo, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SaleinvNumber, "ndxSaleinvNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SourceDocNum, "ndxSourceDocNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SourceDocType, "ndxSourceDocType")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TargetDocType, "ndxTargetDocType")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TransDate, "ndxTransDate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.Doccount)
                    .HasColumnName("doccount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Donefrombcode)
                    .HasColumnName("DONEFROMBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Duplic)
                    .HasColumnName("duplic")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invmatchdate)
                    .HasColumnType("date")
                    .HasColumnName("INVMATCHDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Saleinv_number");

                entity.Property(e => e.Sbcode)
                    .HasColumnName("sbcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SourceDocRef)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("SourceDocREf");

                entity.Property(e => e.SourceDocType)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TargetDate).HasColumnType("datetime");

                entity.Property(e => e.TargetDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<InvoiceMatchingCore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Invoice_Matching_Core");

                entity.HasIndex(e => e.EntryNo, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SaleinvNumber, "ndxSaleinvNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SourceDocNum, "ndxSourceDocNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SourceDocType, "ndxSourceDocType")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TargetDocType, "ndxTargetDocType")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TransDate, "ndxTransDate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.Payalloc).HasColumnName("PAYALLOC");

                entity.Property(e => e.Rptalloc).HasColumnName("RPTALLOC");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Saleinv_number");

                entity.Property(e => e.Sbcode)
                    .HasColumnName("sbcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SourceDocRef)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SourceDocREf");

                entity.Property(e => e.SourceDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TargetDate).HasColumnType("datetime");

                entity.Property(e => e.TargetDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<InvoiceMatchingNeo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Invoice_MatchingNeo");

                entity.HasIndex(e => e.EntryNo, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SaleinvNumber, "ndxSaleinvNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SourceDocNum, "ndxSourceDocNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SourceDocType, "ndxSourceDocType")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TargetDocType, "ndxTargetDocType")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TransDate, "ndxTransDate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.Doccount)
                    .HasColumnName("doccount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Duplic)
                    .HasColumnName("duplic")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Saleinv_number");

                entity.Property(e => e.SourceDocRef)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("SourceDocREf");

                entity.Property(e => e.SourceDocType)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TargetDate).HasColumnType("datetime");

                entity.Property(e => e.TargetDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<InvoiceMatchingRep>(entity =>
            {
                entity.HasKey(e => new { e.EntryNo, e.Bcode });

                entity.ToTable("Invoice_MatchingRep");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Bposted).HasColumnName("bposted");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Saleinv_number");

                entity.Property(e => e.SourceDocRef)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SourceDocREf");

                entity.Property(e => e.SourceDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TargetDate).HasColumnType("datetime");

                entity.Property(e => e.TargetDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<InvoiceMatchingTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Invoice_Matching_Temp");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.Period)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Saleinv_number");

                entity.Property(e => e.SourceDocRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SourceDocREf");

                entity.Property(e => e.SourceDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Invold>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INVOLD");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvCode1)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE1");

                entity.Property(e => e.ManufacturerCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");
            });

            modelBuilder.Entity<Invpreview>(entity =>
            {
                entity.HasKey(e => e.InvCode)
                    .IsClustered(false);

                entity.ToTable("INVPREVIEW");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Iavgcost)
                    .HasColumnName("IAVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Iavgsell)
                    .HasColumnName("IAVGSELL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ilucost)
                    .HasColumnName("ILUCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAvgcost).HasColumnName("INV_AVGCOST");

                entity.Property(e => e.InvAvgsellcost)
                    .HasColumnName("INV_AVGSELLCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvBrandgeneric)
                    .HasColumnName("INV_BRANDGENERIC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCostprice).HasColumnName("INV_COSTPRICE");

                entity.Property(e => e.InvLastunitcost).HasColumnName("INV_LASTUNITCOST");

                entity.Property(e => e.InvMaxprice).HasColumnName("INV_MAXPRICE");

                entity.Property(e => e.InvMinprice).HasColumnName("INV_MINPRICE");

                entity.Property(e => e.InvRetailprice).HasColumnName("INV_RETAILPRICE");

                entity.Property(e => e.InvSpecialprice).HasColumnName("INV_SPECIALPRICE");

                entity.Property(e => e.InvTradeprice).HasColumnName("INV_TRADEPRICE");

                entity.Property(e => e.TaxCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE")
                    .HasDefaultValueSql("('00')");
            });

            modelBuilder.Entity<Invto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INVTO");

                entity.Property(e => e.ActiveIngredient)
                    .HasMaxLength(255)
                    .HasColumnName("ACTIVE_INGREDIENT");

                entity.Property(e => e.AltCode)
                    .HasMaxLength(255)
                    .HasColumnName("ALT_CODE");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.Counter).HasColumnName("COUNTER");

                entity.Property(e => e.Deleted).HasColumnName("DELETED");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountAvailable).HasColumnName("DISCOUNT_AVAILABLE");

                entity.Property(e => e.InvAvgcost).HasColumnName("INV_AVGCOST");

                entity.Property(e => e.InvAvgsellcost).HasColumnName("INV_AVGSELLCOST");

                entity.Property(e => e.InvBrandgeneric).HasColumnName("INV_BRANDGENERIC");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(255)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvCostprice).HasColumnName("INV_COSTPRICE");

                entity.Property(e => e.InvCountryorigin)
                    .HasMaxLength(255)
                    .HasColumnName("INV_COUNTRYORIGIN");

                entity.Property(e => e.InvInstockqty).HasColumnName("INV_INSTOCKQTY");

                entity.Property(e => e.InvItemcontents)
                    .HasMaxLength(255)
                    .HasColumnName("INV_ITEMCONTENTS");

                entity.Property(e => e.InvLastunitcost).HasColumnName("INV_LASTUNITCOST");

                entity.Property(e => e.InvMaxprice).HasColumnName("INV_MAXPRICE");

                entity.Property(e => e.InvMaxqty).HasColumnName("INV_MAXQTY");

                entity.Property(e => e.InvMinprice).HasColumnName("INV_MINPRICE");

                entity.Property(e => e.InvMinqty).HasColumnName("INV_MINQTY");

                entity.Property(e => e.InvNotes)
                    .HasMaxLength(255)
                    .HasColumnName("inv_notes");

                entity.Property(e => e.InvOpeningqty).HasColumnName("INV_OPENINGQTY");

                entity.Property(e => e.InvPhysicalitem).HasColumnName("INV_PHYSICALITEM");

                entity.Property(e => e.InvReorderqty).HasColumnName("INV_REORDERQTY");

                entity.Property(e => e.InvRetailprice).HasColumnName("INV_RETAILPRICE");

                entity.Property(e => e.InvSpecialprice).HasColumnName("INV_SPECIALPRICE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(255)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvSubgroupcode)
                    .HasMaxLength(255)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvTradeprice).HasColumnName("INV_TRADEPRICE");

                entity.Property(e => e.InvUnit).HasColumnName("INV_UNIT");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(255)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.LogicalGroup)
                    .HasMaxLength(255)
                    .HasColumnName("LOGICAL_GROUP");

                entity.Property(e => e.Manufacturer)
                    .HasMaxLength(255)
                    .HasColumnName("MANUFACTURER");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(255)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.Noexpiry).HasColumnName("noexpiry");

                entity.Property(e => e.PackQty).HasColumnName("PACK_QTY");

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(255)
                    .HasColumnName("PACKAGE_CODE");

                entity.Property(e => e.ProvisionCode)
                    .HasMaxLength(255)
                    .HasColumnName("PROVISION_CODE");

                entity.Property(e => e.RetailItem).HasColumnName("RETAIL_ITEM");

                entity.Property(e => e.Salesprofit).HasColumnName("SALESPROFIT");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(255)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.TransferItem).HasColumnName("TRANSFER_ITEM");

                entity.Property(e => e.UnitQty).HasColumnName("UNIT_QTY");
            });

            modelBuilder.Entity<Invxxxx>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INVXXXX");

                entity.Property(e => e.ActiveIngredient)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_INGREDIENT");

                entity.Property(e => e.AltCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ALT_CODE");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BARCODE");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.Bonusenabled).HasColumnName("bonusenabled");

                entity.Property(e => e.CashDiscount).HasColumnName("cash_discount");

                entity.Property(e => e.Counter)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("COUNTER");

                entity.Property(e => e.D1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d1");

                entity.Property(e => e.D2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d2");

                entity.Property(e => e.D3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d3");

                entity.Property(e => e.Deleted).HasColumnName("DELETED");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountAvailable).HasColumnName("DISCOUNT_AVAILABLE");

                entity.Property(e => e.Iavgcost).HasColumnName("IAVGCOST");

                entity.Property(e => e.Iavgsell).HasColumnName("IAVGSELL");

                entity.Property(e => e.Ilucost).HasColumnName("ILUCOST");

                entity.Property(e => e.InvAvgcost).HasColumnName("INV_AVGCOST");

                entity.Property(e => e.InvAvgsellcost).HasColumnName("INV_AVGSELLCOST");

                entity.Property(e => e.InvBrandgeneric).HasColumnName("INV_BRANDGENERIC");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvCostprice).HasColumnName("INV_COSTPRICE");

                entity.Property(e => e.InvCountryorigin)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_COUNTRYORIGIN");

                entity.Property(e => e.InvInstockqty).HasColumnName("INV_INSTOCKQTY");

                entity.Property(e => e.InvItemcontents)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_ITEMCONTENTS");

                entity.Property(e => e.InvLastunitcost).HasColumnName("INV_LASTUNITCOST");

                entity.Property(e => e.InvMaxprice).HasColumnName("INV_MAXPRICE");

                entity.Property(e => e.InvMaxqty).HasColumnName("INV_MAXQTY");

                entity.Property(e => e.InvMinprice).HasColumnName("INV_MINPRICE");

                entity.Property(e => e.InvMinqty).HasColumnName("INV_MINQTY");

                entity.Property(e => e.InvNotes)
                    .HasMaxLength(500)
                    .HasColumnName("inv_notes");

                entity.Property(e => e.InvOldCostprice).HasColumnName("INV_oldCOSTPRICE");

                entity.Property(e => e.InvOpeningqty).HasColumnName("INV_OPENINGQTY");

                entity.Property(e => e.InvPhysicalitem).HasColumnName("INV_PHYSICALITEM");

                entity.Property(e => e.InvReorderqty).HasColumnName("INV_REORDERQTY");

                entity.Property(e => e.InvRetailprice).HasColumnName("INV_RETAILPRICE");

                entity.Property(e => e.InvSpecialprice).HasColumnName("INV_SPECIALPRICE");

                entity.Property(e => e.InvStrength)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvTradeprice).HasColumnName("INV_TRADEPRICE");

                entity.Property(e => e.InvUnit)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.InvoiceDiscount).HasColumnName("invoice_discount");

                entity.Property(e => e.Isqty).HasColumnName("ISQTY");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.LogicalGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOGICAL_GROUP");

                entity.Property(e => e.Manufacturer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER");

                entity.Property(e => e.ManufacturerCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.Newavgcost).HasColumnName("NEWAVGCOST");

                entity.Property(e => e.Newcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NEWCODE");

                entity.Property(e => e.Noexpiry).HasColumnName("noexpiry");

                entity.Property(e => e.OpeningQty).HasColumnName("OPENING_QTY");

                entity.Property(e => e.PackQty).HasColumnName("PACK_QTY");

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGE_CODE");

                entity.Property(e => e.ProvisionCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PROVISION_CODE");

                entity.Property(e => e.RetailItem).HasColumnName("RETAIL_ITEM");

                entity.Property(e => e.Salesprofit).HasColumnName("SALESPROFIT");

                entity.Property(e => e.TaxCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.TransferItem).HasColumnName("TRANSFER_ITEM");

                entity.Property(e => e.UnitQty).HasColumnName("UNIT_QTY");

                entity.Property(e => e.V1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v1");

                entity.Property(e => e.V10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v10");

                entity.Property(e => e.V2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v2");

                entity.Property(e => e.V3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v3");

                entity.Property(e => e.V4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v4");

                entity.Property(e => e.V5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v5");

                entity.Property(e => e.V6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v6");

                entity.Property(e => e.V7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v7");

                entity.Property(e => e.V8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v8");

                entity.Property(e => e.V9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v9");

                entity.Property(e => e.W1).HasColumnName("w1");

                entity.Property(e => e.W2).HasColumnName("w2");
            });

            modelBuilder.Entity<IssuesQtyHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IssuesQtyHistory");

                entity.HasIndex(e => e.InvSubgroupcode, "INV_SUBGROUPCODE")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Apr).HasColumnName("APR");

                entity.Property(e => e.Aug).HasColumnName("AUG");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.De).HasColumnName("DE_");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Feb).HasColumnName("FEB");

                entity.Property(e => e.InvSubgroupcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.Jan).HasColumnName("JAN");

                entity.Property(e => e.Jul).HasColumnName("JUL");

                entity.Property(e => e.Jun).HasColumnName("JUN");

                entity.Property(e => e.Mar).HasColumnName("MAR");

                entity.Property(e => e.May).HasColumnName("MAY");

                entity.Property(e => e.Nov).HasColumnName("NOV");

                entity.Property(e => e.Oct).HasColumnName("OCT");

                entity.Property(e => e.Salesyear).HasColumnName("SALESYEAR");

                entity.Property(e => e.Sep).HasColumnName("SEP");

                entity.Property(e => e.Site)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SITE");

                entity.Property(e => e.Total).HasColumnName("TOTAL");
            });

            modelBuilder.Entity<ItemCosting>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ItemCosting");

                entity.HasIndex(e => e.InvCode, "Inv_Code")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.InvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Inv_Code");

                entity.Property(e => e.QtyIssued).HasColumnName("Qty_Issued");

                entity.Property(e => e.SalesModuleCode).HasColumnName("SalesModule_Code");

                entity.Property(e => e.SalesTransactionNo).HasColumnName("Sales_TransactionNo");

                entity.Property(e => e.SupplierModuleCode).HasColumnName("SupplierModule_Code");

                entity.Property(e => e.SupplierTransactionNo).HasColumnName("Supplier_TransactionNo");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Date");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TransactionNo).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ItemMake>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ITEM_MAKES");

                entity.Property(e => e.MakeCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("make_code");

                entity.Property(e => e.MakeName)
                    .IsRequired()
                    .HasMaxLength(70)
                    .HasColumnName("make_name");
            });

            modelBuilder.Entity<Itembonu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ITEMBONUS");

                entity.HasIndex(e => e.InvCode, "NDXINVCODE")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Bonus)
                    .HasColumnName("BONUS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bonusexpiry)
                    .HasColumnType("datetime")
                    .HasColumnName("BONUSEXPIRY");

                entity.Property(e => e.Buyqty)
                    .HasColumnName("BUYQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Enablebonus)
                    .HasColumnName("ENABLEBONUS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Multilevel)
                    .HasColumnName("MULTILEVEL")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Steps)
                    .HasColumnName("steps")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<Itembonusmulti>(entity =>
            {
                entity.HasKey(e => e.Myxcounter);

                entity.ToTable("ITEMBONUSMULTI");

                entity.Property(e => e.Myxcounter).HasColumnName("MYXCOUNTER");

                entity.Property(e => e.Altbonus)
                    .HasColumnName("ALTBONUS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.AltinvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ALTINV_CODE");

                entity.Property(e => e.Bonus)
                    .HasColumnName("BONUS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bonusexpiry)
                    .HasColumnType("datetime")
                    .HasColumnName("BONUSEXPIRY");

                entity.Property(e => e.Buyqty)
                    .HasColumnName("BUYQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Enablebonus)
                    .HasColumnName("ENABLEBONUS")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");
            });

            modelBuilder.Entity<Itemdet>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ITEMDET");

                entity.HasIndex(e => e.Item, "ITEM_NO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Adjdate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADJDATE");

                entity.Property(e => e.Adjqty).HasColumnName("ADJQTY");

                entity.Property(e => e.Comments)
                    .HasColumnType("text")
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.Indate)
                    .HasColumnType("datetime")
                    .HasColumnName("INDATE");

                entity.Property(e => e.Inqty).HasColumnName("INQTY");

                entity.Property(e => e.Item)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ITEM");

                entity.Property(e => e.Location)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION");

                entity.Property(e => e.MtdAdj).HasColumnName("MTD_ADJ");

                entity.Property(e => e.MtdIssue).HasColumnName("MTD_ISSUE");

                entity.Property(e => e.MtdRcpts).HasColumnName("MTD_RCPTS");

                entity.Property(e => e.Onhand).HasColumnName("ONHAND");

                entity.Property(e => e.Onorder).HasColumnName("ONORDER");

                entity.Property(e => e.Outdate)
                    .HasColumnType("datetime")
                    .HasColumnName("OUTDATE");

                entity.Property(e => e.Outqty).HasColumnName("OUTQTY");

                entity.Property(e => e.Physical).HasColumnName("PHYSICAL");

                entity.Property(e => e.YtdAdj).HasColumnName("YTD_ADJ");

                entity.Property(e => e.YtdIssue).HasColumnName("YTD_ISSUE");

                entity.Property(e => e.YtdRcpts).HasColumnName("YTD_RCPTS");
            });

            modelBuilder.Entity<Jobgroup>(entity =>
            {
                entity.HasKey(e => e.JgCode);

                entity.ToTable("JOBGROUP");

                entity.Property(e => e.JgCode).HasColumnName("JG_CODE");

                entity.Property(e => e.JgName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JG_NAME");

                entity.Property(e => e.OtRate)
                    .HasColumnName("OT_RATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SpRate)
                    .HasColumnName("sp_RATE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Jobtitle>(entity =>
            {
                entity.HasKey(e => e.JtCode);

                entity.ToTable("JOBTITLES");

                entity.Property(e => e.JtCode).HasColumnName("JT_CODE");

                entity.Property(e => e.JtName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JT_NAME");
            });

            modelBuilder.Entity<Journalimport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("JOURNALIMPORTS");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Currencycode).HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(255)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DatePosted)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Date_Posted");

                entity.Property(e => e.Dontshow).HasColumnName("dontshow");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.Fromhistory).HasColumnName("FROMHISTORY");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.ScJAmount).HasColumnName("SC_J_AMOUNT");

                entity.Property(e => e.ScJContra)
                    .HasMaxLength(255)
                    .HasColumnName("SC_J_CONTRA");

                entity.Property(e => e.ScJDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("SC_J_DATE");

                entity.Property(e => e.ScJDc)
                    .HasMaxLength(255)
                    .HasColumnName("SC_J_DC");

                entity.Property(e => e.ScJDesc)
                    .HasMaxLength(255)
                    .HasColumnName("SC_J_DESC");

                entity.Property(e => e.ScJInclusive).HasColumnName("SC_J_INCLUSIVE");

                entity.Property(e => e.ScJName)
                    .HasMaxLength(255)
                    .HasColumnName("SC_J_NAME");

                entity.Property(e => e.ScJRef)
                    .HasMaxLength(255)
                    .HasColumnName("SC_J_REF");

                entity.Property(e => e.ScJSc)
                    .HasMaxLength(255)
                    .HasColumnName("SC_J_SC");

                entity.Property(e => e.ScJTax)
                    .HasMaxLength(255)
                    .HasColumnName("SC_J_TAX");

                entity.Property(e => e.Username)
                    .HasMaxLength(255)
                    .HasColumnName("username");

                entity.Property(e => e.Usin).HasColumnName("usin_");

                entity.Property(e => e.XrateBalance).HasColumnName("xrate_balance");

                entity.Property(e => e.XrateNet).HasColumnName("xrate_net");
            });

            modelBuilder.Entity<Kahbcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("kahbcode");

                entity.Property(e => e.Activebcode).HasColumnName("activebcode");
            });

            modelBuilder.Entity<Kahdefault>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("kahdefaults");

                entity.Property(e => e.Kahenabled)
                    .HasColumnName("kahenabled")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahexportpath)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("kahexportpath");

                entity.Property(e => e.Lastrundate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastrundate");
            });

            modelBuilder.Entity<Kprdate>(entity =>
            {
                entity.HasKey(e => e.Thisyear);

                entity.ToTable("KPRDATES");

                entity.Property(e => e.Thisyear)
                    .HasColumnName("THISYEAR")
                    .HasDefaultValueSql("((2014))");

                entity.Property(e => e.Thisprd)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("THISPRD");

                entity.Property(e => e.Thisprdmonth)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("THISPRDMONTH");

                entity.Property(e => e.Thisprdnum).HasColumnName("THISPRDNUM");
            });

            modelBuilder.Entity<Kprdatestatus>(entity =>
            {
                entity.HasKey(e => new { e.Thisprd, e.Thisprdnum, e.Thisyear });

                entity.ToTable("KPRDATESTATUS");

                entity.Property(e => e.Thisprd)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("THISPRD");

                entity.Property(e => e.Thisprdnum).HasColumnName("THISPRDNUM");

                entity.Property(e => e.Thisyear)
                    .HasColumnName("THISYEAR")
                    .HasDefaultValueSql("((2014))");

                entity.Property(e => e.Posted)
                    .HasColumnName("POSTED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thisprdmonth)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("THISPRDMONTH");
            });

            modelBuilder.Entity<Krainvoice>(entity =>
            {
                entity.HasKey(e => new { e.Bcode, e.SaleinvNum })
                    .HasName("PK__KRAINVOI__8933904DC683BE61");

                entity.ToTable("KRAINVOICE");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Doctype)
                    .HasMaxLength(200)
                    .HasColumnName("DOCTYPE");

                entity.Property(e => e.ResponseUrl).HasColumnName("RESPONSE_URL");
            });

            modelBuilder.Entity<Lcp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LCP");

                entity.HasIndex(e => e.CusCode, "cus_code")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("inv_code");

                entity.Property(e => e.Lastprice).HasColumnName("lastprice");
            });

            modelBuilder.Entity<Ldisc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LDISC");

                entity.HasIndex(e => new { e.InvCode, e.CusCode }, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("inv_code");

                entity.Property(e => e.Lastdisc).HasColumnName("lastdisc");
            });

            modelBuilder.Entity<Ldisc1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LDISC_S");

                entity.HasIndex(e => new { e.SuppCode, e.InvCode }, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Ldisc).HasColumnName("LDISC");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");
            });

            modelBuilder.Entity<Loanshd>(entity =>
            {
                entity.HasKey(e => e.Transno);

                entity.ToTable("LOANSHD");

                entity.Property(e => e.Transno)
                    .ValueGeneratedNever()
                    .HasColumnName("TRANSNO");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BANK_ACCT");

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHQ_DATE");

                entity.Property(e => e.Cleared).HasColumnName("CLEARED");

                entity.Property(e => e.Currentperiod).HasColumnName("CURRENTPERIOD");

                entity.Property(e => e.EdCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ED_CODE");

                entity.Property(e => e.EmpNum)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EMP_NUM");

                entity.Property(e => e.Endpayyear).HasColumnName("ENDPAYYEAR");

                entity.Property(e => e.Endprd)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ENDPRD");

                entity.Property(e => e.Endprdnum).HasColumnName("ENDPRDNUM");

                entity.Property(e => e.Installment)
                    .HasColumnName("INSTALLMENT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Instamount)
                    .HasColumnName("INSTAMOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Intrate)
                    .HasColumnName("INTRATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Paidby)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAIDBY");

                entity.Property(e => e.PayDetnum).HasColumnName("PAY_DETNUM");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PAYMODE");

                entity.Property(e => e.Payyear).HasColumnName("PAYYEAR");

                entity.Property(e => e.Posted).HasColumnName("POSTED");

                entity.Property(e => e.Prd)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("PRD");

                entity.Property(e => e.Prdnum).HasColumnName("PRDNUM");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCE");

                entity.Property(e => e.Startpayyear).HasColumnName("STARTPAYYEAR");

                entity.Property(e => e.Startprd)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("STARTPRD");

                entity.Property(e => e.Startprdnum).HasColumnName("STARTPRDNUM");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");

                entity.Property(e => e.Transamount)
                    .HasColumnName("TRANSAMOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transarrears)
                    .HasColumnName("TRANSARREARS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transbalance)
                    .HasColumnName("TRANSBALANCE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transnett)
                    .HasColumnName("TRANSNETT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transpaid)
                    .HasColumnName("TRANSPAID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transtype).HasColumnName("TRANSTYPE");

                entity.Property(e => e.Usebalance).HasColumnName("USEBALANCE");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.HasKey(e => new { e.LocCode, e.Bcode })
                    .IsClustered(false);

                entity.ToTable("LOCATION");

                entity.HasIndex(e => e.Description, "Description")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Branchlocation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("branchlocation");

                entity.Property(e => e.ContainerNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONTAINER_NO");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Forcebins)
                    .HasColumnName("forcebins")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LaydownArea)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LAYDOWN_AREA");

                entity.Property(e => e.Prodclass)
                    .HasColumnName("prodclass")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rawmaterial)
                    .HasColumnName("rawmaterial")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transit).HasColumnName("transit");
            });

            modelBuilder.Entity<Location1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LOCATIONS");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Total).HasColumnName("TOTAL");
            });

            modelBuilder.Entity<Locationbin>(entity =>
            {
                entity.HasKey(e => new { e.LocCode, e.Bincode });

                entity.ToTable("LOCATIONBINS");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Bincode)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BINCODE");

                entity.Property(e => e.Binname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BINNAME");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");
            });

            modelBuilder.Entity<Loydt>(entity =>
            {
                entity.HasKey(e => new { e.Loynum, e.Loybcode, e.Loydetnum });

                entity.ToTable("LOYDT");

                entity.Property(e => e.Loynum).HasColumnName("LOYNUM");

                entity.Property(e => e.Loybcode).HasColumnName("LOYBCODE");

                entity.Property(e => e.Loydetnum).HasColumnName("LOYDETNUM");

                entity.Property(e => e.Loydetitemcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOYDETITEMCODE");

                entity.Property(e => e.Loydetitemname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("LOYDETITEMNAME");

                entity.Property(e => e.Loydetpoints)
                    .HasColumnName("LOYDETPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loydetsalevalue)
                    .HasColumnName("LOYDETSALEVALUE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loydettype).HasColumnName("LOYDETTYPE");

                entity.Property(e => e.Loydettypename)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOYDETTYPENAME");
            });

            modelBuilder.Entity<Loyhd>(entity =>
            {
                entity.HasKey(e => new { e.Loynum, e.Loybcode });

                entity.ToTable("LOYHD");

                entity.Property(e => e.Loynum).HasColumnName("LOYNUM");

                entity.Property(e => e.Loybcode).HasColumnName("LOYBCODE");

                entity.Property(e => e.Loyactive).HasColumnName("LOYACTIVE");

                entity.Property(e => e.Loyenddate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOYENDDATE");

                entity.Property(e => e.Loyredeempoints).HasColumnName("LOYREDEEMPOINTS");

                entity.Property(e => e.Loystartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOYSTARTDATE");
            });

            modelBuilder.Entity<Mailcc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MAILCC");

                entity.Property(e => e.Msgnum).HasColumnName("MSGNUM");

                entity.Property(e => e.Mycounter)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("mycounter");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Mailmessage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MAILMESSAGES");

                entity.HasIndex(e => e.Counter, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SentDate, "ndxSentDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Username, "ndxUserName")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Cc)
                    .HasColumnName("cc")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Counter)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("COUNTER");

                entity.Property(e => e.Dismissed)
                    .HasColumnName("DISMISSED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Msgnum).HasColumnName("MSGNUM");

                entity.Property(e => e.RcvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RCV_DATE");

                entity.Property(e => e.RcvTime)
                    .HasColumnType("datetime")
                    .HasColumnName("RCV_TIME");

                entity.Property(e => e.Rcvd).HasColumnName("RCVD");

                entity.Property(e => e.Sender)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SENDER");

                entity.Property(e => e.Sent)
                    .HasColumnName("SENT")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SENT_DATE");

                entity.Property(e => e.SentTime)
                    .HasColumnType("datetime")
                    .HasColumnName("SENT_TIME");

                entity.Property(e => e.Usermessage)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("USERMESSAGE");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<ManSupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MAN_SUPPLIER");

                entity.HasIndex(e => e.Id, "ID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");
            });

            modelBuilder.Entity<Manufacturer>(entity =>
            {
                entity.HasKey(e => e.ManufacturerCode)
                    .IsClustered(false);

                entity.ToTable("MANUFACTURER");

                entity.HasIndex(e => e.ManufacturerCode, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.Country)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Initial)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("initial");
            });

            modelBuilder.Entity<Membersextra>(entity =>
            {
                entity.HasKey(e => new { e.Memberno, e.CusCode })
                    .HasName("PK_MEMBERSEXTRA_1");

                entity.ToTable("MEMBERSEXTRA");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNO");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Allergies)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ALLERGIES");

                entity.Property(e => e.Cellphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CELLPHONE");

                entity.Property(e => e.Contact)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Contactphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTPHONE");

                entity.Property(e => e.Doctor)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCTOR");

                entity.Property(e => e.Doctorphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DOCTORPHONE");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Email1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL1");

                entity.Property(e => e.Fname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FNAME");

                entity.Property(e => e.Lname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LNAME");

                entity.Property(e => e.Memberdob)
                    .HasColumnType("datetime")
                    .HasColumnName("MEMBERDOB")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Membername)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNAME");

                entity.Property(e => e.MextraNum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MEXTRA_NUM");

                entity.Property(e => e.Notes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NOTES");

                entity.Property(e => e.RecurrCode).HasColumnName("recurr_code");

                entity.Property(e => e.SaluteCode).HasColumnName("SALUTE_CODE");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TELEPHONE");

                entity.Property(e => e.TownCode).HasColumnName("TOWN_CODE");
            });

            modelBuilder.Entity<MnfC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("MNF_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<MnfDt>(entity =>
            {
                entity.HasKey(e => new { e.MnfNum, e.MnfDetNum, e.Bcode })
                    .HasName("IX_MNF_DT_CRUD");

                entity.ToTable("MNF_DT");

                entity.Property(e => e.MnfNum).HasColumnName("MNF_NUM");

                entity.Property(e => e.MnfDetNum).HasColumnName("MNF_DET_NUM");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BmtDetNum)
                    .HasColumnName("BMT_DET_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bmtquantity).HasColumnName("BMTQUANTITY");

                entity.Property(e => e.Bonus)
                    .HasColumnName("BONUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Detpending).HasColumnName("DETPENDING");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Inclusive)
                    .HasColumnName("inclusive")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvSubgroupname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_subgroupname")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Priceincl)
                    .HasColumnName("priceincl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Remquantity).HasColumnName("REMQUANTITY");

                entity.Property(e => e.StkNum)
                    .HasColumnName("STK_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("tax_code");

                entity.Property(e => e.Taxamt)
                    .HasColumnName("taxamt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<MnfHd>(entity =>
            {
                entity.HasKey(e => new { e.MnfNum, e.Bcode })
                    .HasName("IX_MNF_HD_CRUD");

                entity.ToTable("MNF_HD");

                entity.Property(e => e.MnfNum).HasColumnName("MNF_NUM");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Batched).HasColumnName("BATCHED");

                entity.Property(e => e.Bmrdet)
                    .HasColumnName("bmrdet")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BmtNum).HasColumnName("BMT_NUM");

                entity.Property(e => e.Bmtlinked)
                    .HasColumnName("bmtlinked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchfrom)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHFROM");

                entity.Property(e => e.Cancelled).HasColumnName("CANCELLED");

                entity.Property(e => e.Comments)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.ContName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cont_name");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DELIVERY_DATE");

                entity.Property(e => e.Done).HasColumnName("DONE");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.Grntype).HasColumnName("GRNTYPE");

                entity.Property(e => e.Invtype).HasColumnName("INVTYPE");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("LASTLINENO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.MnfD).HasColumnName("MNF_D");

                entity.Property(e => e.MnfDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MNF_DATE");

                entity.Property(e => e.MnfNet).HasColumnName("MNF_NET");

                entity.Property(e => e.MnfNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNF_number");

                entity.Property(e => e.MnfTotal).HasColumnName("MNF_TOTAL");

                entity.Property(e => e.MnfVat).HasColumnName("MNF_VAT");

                entity.Property(e => e.Mnfbatchnum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFBATCHNUM");

                entity.Property(e => e.Mnfbatchsize)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFBATCHSIZE");

                entity.Property(e => e.Mnfexpdate)
                    .HasColumnType("datetime")
                    .HasColumnName("MNFEXPDATE");

                entity.Property(e => e.MnfinvCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MNFINV_CODE");

                entity.Property(e => e.MnfinvName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFINV_NAME");

                entity.Property(e => e.Mnfmanfdate)
                    .HasColumnType("datetime")
                    .HasColumnName("MNFMANFDATE");

                entity.Property(e => e.Mnfpackqty)
                    .HasColumnName("MNFPACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mnfpacksize)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFPACKSIZE");

                entity.Property(e => e.Mnfpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MNFPARTWHOLE")
                    .IsFixedLength(true);

                entity.Property(e => e.Mnfpwqty)
                    .HasColumnName("MNFPWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mnfquantity)
                    .HasColumnName("MNFQUANTITY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MnfstkNum)
                    .HasColumnName("mnfstk_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mnfunit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MNFUNIT");

                entity.Property(e => e.PayTerms)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAY_TERMS");

                entity.Property(e => e.Pending).HasColumnName("pending");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("printcopy")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.SupRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUP_REF");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Mnfbmr>(entity =>
            {
                entity.HasKey(e => new { e.Bmrdet, e.Bmrdetnum });

                entity.ToTable("MNFBMR");

                entity.Property(e => e.Bmrdet).HasColumnName("BMRDET");

                entity.Property(e => e.Bmrdetnum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BMRDETNUM");

                entity.Property(e => e.Bomdetnum).HasColumnName("BOMDETNUM");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Mnfbatchnum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFBATCHNUM");

                entity.Property(e => e.Mnfbatchsize)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFBATCHSIZE");

                entity.Property(e => e.Mnfexpdate)
                    .HasColumnType("datetime")
                    .HasColumnName("MNFEXPDATE");

                entity.Property(e => e.MnfinvCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MNFINV_CODE");

                entity.Property(e => e.MnfinvName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFINV_NAME");

                entity.Property(e => e.Mnfmanfdate)
                    .HasColumnType("datetime")
                    .HasColumnName("MNFMANFDATE");

                entity.Property(e => e.Mnfpackqty)
                    .HasColumnName("MNFPACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mnfpacksize)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MNFPACKSIZE");

                entity.Property(e => e.Mnfpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MNFPARTWHOLE")
                    .IsFixedLength(true);

                entity.Property(e => e.Mnfpwqty)
                    .HasColumnName("MNFPWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mnfquantity).HasColumnName("MNFQUANTITY");

                entity.Property(e => e.Mnfunit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MNFUNIT");

                entity.Property(e => e.Qtyratio)
                    .HasColumnName("qtyratio")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Modifydesc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MODIFYDESC");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(255)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvItemcontents)
                    .HasMaxLength(255)
                    .HasColumnName("INV_ITEMCONTENTS");
            });

            modelBuilder.Entity<Modulesuse>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MODULESUSE");

                entity.HasIndex(e => e.Modulecode, "modulecode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Inuse).HasColumnName("inuse");

                entity.Property(e => e.Modulecode).HasColumnName("modulecode");

                entity.Property(e => e.Use)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("use_");
            });

            modelBuilder.Entity<Mpesa>(entity =>
            {
                entity.ToTable("MPESA");

                entity.Property(e => e.BillRefNumber)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessShortCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Commission).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.DateLoggedInternal).HasColumnType("datetime");

                entity.Property(e => e.Datetime).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kyc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("KYC");

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MpesaId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MpesaID");

                entity.Property(e => e.Msisdn)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("MSISDN");

                entity.Property(e => e.OrgAccountBalance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StatusRemark)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Status_Remark");

                entity.Property(e => e.ThirdPartyTransId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ThirdPartyTransID");

                entity.Property(e => e.TransAmount).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.TransId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TransID");

                entity.Property(e => e.TransTime)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionType)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Mpesahd>(entity =>
            {
                entity.HasKey(e => new { e.MpesaEntryNo, e.Transid });

                entity.ToTable("MPESAHD");

                entity.HasIndex(e => e.Transid, "IX_MPESAHD")
                    .IsUnique();

                entity.HasIndex(e => e.Cusphone, "IX_MPESAHD_1");

                entity.Property(e => e.Transid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSID");

                entity.Property(e => e.Billrefnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BILLREFNUMBER");

                entity.Property(e => e.BusinessShortCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cashsale)
                    .HasColumnName("cashsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cusfname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSFNAME");

                entity.Property(e => e.Cuslname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSLNAME");

                entity.Property(e => e.Cusmname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSMNAME");

                entity.Property(e => e.Cusphone)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSPHONE");

                entity.Property(e => e.MpesaConfirmNo).HasColumnName("MpesaConfirmNO");

                entity.Property(e => e.Mpesacsale)
                    .HasColumnName("MPESACSALE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mpesadetno)
                    .HasColumnName("MPESADETNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mpesareceiptready)
                    .HasColumnName("MPESARECEIPTREADY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mpesareconauto)
                    .HasColumnName("MPESARECONAUTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mpickbcode)
                    .HasColumnName("MPICKBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mpickno)
                    .HasColumnName("MPICKNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partpay)
                    .HasColumnName("PARTPAY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RptDetnum)
                    .HasColumnName("RPT_DETNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rptbcode)
                    .HasColumnName("RPTBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transamount)
                    .HasColumnName("TRANSAMOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transdate)
                    .HasColumnType("date")
                    .HasColumnName("TRANSDATE");

                entity.Property(e => e.Transtime).HasColumnName("TRANSTIME");

                entity.Property(e => e.Transtype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSTYPE");
            });

            modelBuilder.Entity<Myperiod>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("myperiods$");

                entity.Property(e => e.Endperiod)
                    .HasColumnType("datetime")
                    .HasColumnName("ENDPERIOD");

                entity.Property(e => e.Period).HasColumnName("PERIOD");

                entity.Property(e => e.Startperiod)
                    .HasColumnType("datetime")
                    .HasColumnName("STARTPERIOD");
            });

            modelBuilder.Entity<Na1973>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NA1973");

                entity.HasIndex(e => new { e.Username, e.CusCode }, "IX_NA1973")
                    .IsClustered();

                entity.HasIndex(e => e.Username, "IX_NA1973_1");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Mydc)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("mydc");

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Theprog).HasColumnName("theprog");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<Neoageing>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("neoageing");

                entity.HasIndex(e => new { e.Username, e.CusCode }, "IX_neoageing")
                    .IsClustered();

                entity.HasIndex(e => e.Username, "IX_neoageing_1");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Mydc)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("mydc");

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Theprog).HasColumnName("theprog");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<Neoageingsupp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NEOAGEINGSUPP");

                entity.HasIndex(e => new { e.Username, e.SuppCode }, "IX_NEOAGEINGSUPP")
                    .IsClustered();

                entity.HasIndex(e => e.Username, "IX_NEOAGEINGSUPP_1");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Mydc)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("mydc");

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Theprog).HasColumnName("theprog");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<Newinventory>(entity =>
            {
                entity.HasKey(e => e.InvCode)
                    .IsClustered(false);

                entity.ToTable("NEWINVENTORY");

                entity.HasIndex(e => e.Username, "INDXUSER");

                entity.HasIndex(e => e.Description, "ndxDescription")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ManufacturerCode, "ndxManufacturer")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ManufacturerCode, "ndxManufacturerCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvSubgroupcode, "ndxSubGroup")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCode, "ndxTaxCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Description, e.Blocked }, "xdesc");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.ActiveIngredient)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_INGREDIENT");

                entity.Property(e => e.AltCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ALT_CODE");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BARCODE");

                entity.Property(e => e.Blocked)
                    .HasColumnName("BLOCKED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.CalcQty).HasDefaultValueSql("(0)");

                entity.Property(e => e.CashDiscount)
                    .HasColumnName("cash_discount")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Counter)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("COUNTER");

                entity.Property(e => e.D1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d1");

                entity.Property(e => e.D2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d2");

                entity.Property(e => e.D3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d3");

                entity.Property(e => e.Deleted)
                    .HasColumnName("DELETED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountAvailable)
                    .HasColumnName("DISCOUNT_AVAILABLE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Iavgcost)
                    .HasColumnName("IAVGCOST")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Iavgsell)
                    .HasColumnName("IAVGSELL")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Ilucost)
                    .HasColumnName("ILUCOST")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InvAvgcost).HasColumnName("INV_AVGCOST");

                entity.Property(e => e.InvAvgsellcost)
                    .HasColumnName("INV_AVGSELLCOST")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InvBrandgeneric)
                    .HasColumnName("INV_BRANDGENERIC")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InvCostprice).HasColumnName("INV_COSTPRICE");

                entity.Property(e => e.InvCountryorigin)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_COUNTRYORIGIN")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.InvInstockqty).HasColumnName("INV_INSTOCKQTY");

                entity.Property(e => e.InvItemcontents)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_ITEMCONTENTS");

                entity.Property(e => e.InvLastunitcost).HasColumnName("INV_LASTUNITCOST");

                entity.Property(e => e.InvMaxprice).HasColumnName("INV_MAXPRICE");

                entity.Property(e => e.InvMaxqty).HasColumnName("INV_MAXQTY");

                entity.Property(e => e.InvMinprice).HasColumnName("INV_MINPRICE");

                entity.Property(e => e.InvMinqty).HasColumnName("INV_MINQTY");

                entity.Property(e => e.InvNotes)
                    .HasMaxLength(500)
                    .HasColumnName("inv_notes");

                entity.Property(e => e.InvOldCostprice).HasColumnName("INV_oldCOSTPRICE");

                entity.Property(e => e.InvOpeningqty).HasColumnName("INV_OPENINGQTY");

                entity.Property(e => e.InvPhysicalitem)
                    .HasColumnName("INV_PHYSICALITEM")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InvReorderqty).HasColumnName("INV_REORDERQTY");

                entity.Property(e => e.InvRetailprice).HasColumnName("INV_RETAILPRICE");

                entity.Property(e => e.InvSpecialprice).HasColumnName("INV_SPECIALPRICE");

                entity.Property(e => e.InvStrength)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvTradeprice).HasColumnName("INV_TRADEPRICE");

                entity.Property(e => e.InvUnit)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.InvoiceDiscount)
                    .HasColumnName("invoice_discount")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Isqty)
                    .HasColumnName("ISQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.LogicalGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOGICAL_GROUP");

                entity.Property(e => e.Manufacturer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER");

                entity.Property(e => e.ManufacturerCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.Newavgcost)
                    .HasColumnName("NEWAVGCOST")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Newcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NEWCODE");

                entity.Property(e => e.Noexpiry)
                    .HasColumnName("noexpiry")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.OpeningQty)
                    .HasColumnName("OPENING_QTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PackQty)
                    .HasColumnName("PACK_QTY")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGE_CODE");

                entity.Property(e => e.ProvisionCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PROVISION_CODE");

                entity.Property(e => e.ReQty).HasDefaultValueSql("(0)");

                entity.Property(e => e.RetailItem)
                    .HasColumnName("RETAIL_ITEM")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Salesprofit).HasColumnName("SALESPROFIT");

                entity.Property(e => e.TaxCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE")
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.TransferItem)
                    .HasColumnName("TRANSFER_ITEM")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.UnitQty).HasColumnName("UNIT_QTY");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Valqty).HasDefaultValueSql("(0)");

                entity.Property(e => e.W1).HasColumnName("w1");

                entity.Property(e => e.W2).HasColumnName("w2");

                entity.Property(e => e.Wholecount)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("wholecount");
            });

            modelBuilder.Entity<Newsalesanalysis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NEWSALESANALYSIS");

                entity.Property(e => e.Adjustment)
                    .HasColumnName("adjustment")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bonus)
                    .HasColumnName("bonus")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Closingqty).HasColumnName("closingqty");

                entity.Property(e => e.Creditnotes)
                    .HasColumnName("creditnotes")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Gpdesc)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GPDESC");

                entity.Property(e => e.InvAvgcost).HasColumnName("inv_avgcost");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Manf)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANF");

                entity.Property(e => e.Openbal).HasColumnName("openbal");

                entity.Property(e => e.Receipt).HasColumnName("receipt");

                entity.Property(e => e.Returned)
                    .HasColumnName("returned")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Saleqty).HasColumnName("saleqty");

                entity.Property(e => e.Salevalue).HasColumnName("salevalue");

                entity.Property(e => e.Sbdesc)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SBDESC");

                entity.Property(e => e.Yearqty).HasColumnName("yearqty");

                entity.Property(e => e.Yearvalue).HasColumnName("yearvalue");
            });

            modelBuilder.Entity<Nhiftable>(entity =>
            {
                entity.HasKey(e => e.Nhifpos);

                entity.ToTable("NHIFTABLE");

                entity.Property(e => e.Nhifpos)
                    .ValueGeneratedNever()
                    .HasColumnName("NHIFPOS");

                entity.Property(e => e.Grossfrom).HasColumnName("GROSSFROM");

                entity.Property(e => e.Grossto).HasColumnName("GROSSTO");

                entity.Property(e => e.Nhifrate).HasColumnName("NHIFRATE");

                entity.Property(e => e.Payyear)
                    .HasColumnName("PAYYEAR")
                    .HasDefaultValueSql("((2010))");
            });

            modelBuilder.Entity<NonregcashinvC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("nonregcashinv_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<NonregcnoteC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("nonregcnote_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<NonreginvC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("nonreginv_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<NstockDt>(entity =>
            {
                entity.HasKey(e => e.NstockDetNum)
                    .IsClustered(false);

                entity.ToTable("nstock_dt");

                entity.HasIndex(e => new { e.NstockNum, e.NstockDetNum }, "PrimaryKey")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NstockNum, "ndxQuoNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCode, "ndxTaxCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.NstockNum, e.Mylineno }, "ndxlastnum")
                    .IsUnique();

                entity.Property(e => e.NstockDetNum).HasColumnName("nstock_DET_NUM");

                entity.Property(e => e.An).HasColumnName("AN");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cusname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cusname")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Cusnamecomment)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cusnamecomment")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Cusnamecontact)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cusnamecontact")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Icode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ICODE");

                entity.Property(e => e.Inclusive)
                    .HasColumnName("inclusive")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Manuf)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("manuf");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NstockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("nstock_DATE");

                entity.Property(e => e.NstockNum).HasColumnName("nstock_NUM");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Priceincl)
                    .HasColumnName("priceincl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Strength)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("strength");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Taxamt)
                    .HasColumnName("taxamt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NstockHd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("nstock_hd");

                entity.HasIndex(e => e.NstockNum, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NstockDate, "ndxQuoDate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Batched)
                    .HasColumnName("batched")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Comments)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.ContName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cont_name");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("memberno");

                entity.Property(e => e.NstockD).HasColumnName("nstock_D");

                entity.Property(e => e.NstockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("nstock_DATE");

                entity.Property(e => e.NstockExpiry)
                    .HasColumnType("datetime")
                    .HasColumnName("nstock_EXPIRY");

                entity.Property(e => e.NstockNet).HasColumnName("nstock_NET");

                entity.Property(e => e.NstockNum).HasColumnName("nstock_NUM");

                entity.Property(e => e.NstockNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("nstock_number");

                entity.Property(e => e.NstockTotal).HasColumnName("nstock_total");

                entity.Property(e => e.NstockVat).HasColumnName("nstock_VAT");

                entity.Property(e => e.Pricingmode)
                    .HasColumnName("pricingmode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("printcopy")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RemndNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REMND_NUMBER");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALES_CODE");

                entity.Property(e => e.Salesman)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SALESMAN");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Selected).HasColumnName("selected");

                entity.Property(e => e.SoNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SO_NUMBER");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Oldsy>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OLDSYS");

                entity.Property(e => e.Pdend)
                    .HasColumnType("datetime")
                    .HasColumnName("PDEND");

                entity.Property(e => e.Pdstart)
                    .HasColumnType("datetime")
                    .HasColumnName("PDSTART");

                entity.Property(e => e.Rptpdend)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("RPTPDEND");

                entity.Property(e => e.Rptpdstart)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("RPTPDSTART");
            });

            modelBuilder.Entity<OtDt>(entity =>
            {
                entity.HasKey(e => new { e.OtDate, e.EmpNum });

                entity.ToTable("OT_DT");

                entity.Property(e => e.OtDate)
                    .HasColumnType("datetime")
                    .HasColumnName("OT_DATE");

                entity.Property(e => e.EmpNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EMP_NUM");

                entity.Property(e => e.Nohrs).HasColumnName("NOHRS");

                entity.Property(e => e.OtDetnum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("OT_DETNUM");

                entity.Property(e => e.OtNum).HasColumnName("OT_NUM");

                entity.Property(e => e.Payyear).HasColumnName("PAYYEAR");

                entity.Property(e => e.Prd)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("PRD")
                    .HasDefaultValueSql("('190001')");

                entity.Property(e => e.Prdnum)
                    .HasColumnName("PRDNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sphrs).HasColumnName("SPHRS");

                entity.Property(e => e.Transno).HasColumnName("TRANSNO");
            });

            modelBuilder.Entity<OtHd>(entity =>
            {
                entity.HasKey(e => new { e.Prd, e.Prdnum, e.EmpNum });

                entity.ToTable("OT_HD");

                entity.Property(e => e.Prd)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("PRD");

                entity.Property(e => e.Prdnum).HasColumnName("PRDNUM");

                entity.Property(e => e.EmpNum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMP_NUM");

                entity.Property(e => e.EdCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ED_CODE");

                entity.Property(e => e.Norate)
                    .HasColumnName("NORATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nototal).HasColumnName("NOTOTAL");

                entity.Property(e => e.OtBalance)
                    .HasColumnName("OT_BALANCE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OtNet)
                    .HasColumnName("OT_NET")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OtNum).HasColumnName("OT_NUM");

                entity.Property(e => e.OtPaid)
                    .HasColumnName("OT_PAID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Payyear).HasColumnName("PAYYEAR");

                entity.Property(e => e.Posted).HasColumnName("POSTED");

                entity.Property(e => e.Sprate)
                    .HasColumnName("SPRATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Sptotal).HasColumnName("SPTOTAL");

                entity.Property(e => e.Transno).HasColumnName("TRANSNO");

                entity.Property(e => e.Transtype).HasColumnName("TRANSTYPE");

                entity.Property(e => e.Ttlnohrs)
                    .HasColumnName("TTLNOHRS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ttlsphrs)
                    .HasColumnName("TTLSPHRS")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<P9a>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("P9A");

                entity.HasIndex(e => new { e.EmpNum, e.Prdnum, e.Payyear }, "IX_P9A");

                entity.HasIndex(e => e.Username, "XUSER");

                entity.Property(e => e.Basicpay)
                    .HasColumnName("BASICPAY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Benefits)
                    .HasColumnName("BENEFITS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Chargeablepay)
                    .HasColumnName("CHARGEABLEPAY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.E1).HasDefaultValueSql("((0))");

                entity.Property(e => e.E2).HasDefaultValueSql("((0))");

                entity.Property(e => e.E3).HasDefaultValueSql("((0))");

                entity.Property(e => e.EmpNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EMP_NUM");

                entity.Property(e => e.Empname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMPNAME");

                entity.Property(e => e.F).HasDefaultValueSql("((0))");

                entity.Property(e => e.G).HasDefaultValueSql("((0))");

                entity.Property(e => e.Grosspay)
                    .HasColumnName("GROSSPAY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Irelief)
                    .HasColumnName("IRELIEF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Monthname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MONTHNAME");

                entity.Property(e => e.Paye)
                    .HasColumnName("PAYE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Payyear).HasColumnName("PAYYEAR");

                entity.Property(e => e.Prdnum).HasColumnName("PRDNUM");

                entity.Property(e => e.Prelief)
                    .HasColumnName("PRELIEF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quarters)
                    .HasColumnName("QUARTERS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Taxcharged)
                    .HasColumnName("TAXCHARGED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Packlistdt>(entity =>
            {
                entity.HasKey(e => e.PackDetNum);

                entity.ToTable("PACKLISTDT");

                entity.Property(e => e.PackDetNum).HasColumnName("PACK_DET_NUM");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PackCarton)
                    .HasColumnName("PACK_CARTON")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PackLine).HasColumnName("PACK_LINE");

                entity.Property(e => e.PackSize)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PACK_SIZE")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.PackTotalcost).HasColumnName("PACK_TOTALCOST");

                entity.Property(e => e.PackTotalweight)
                    .HasColumnName("PACK_TOTALWEIGHT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PackWeight)
                    .HasColumnName("PACK_WEIGHT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packlistno).HasColumnName("PACKLISTNO");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PARTWHOLE")
                    .IsFixedLength(true);

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.SaleinvDetNum)
                    .HasColumnName("saleinv_det_num")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Packlisthd>(entity =>
            {
                entity.HasKey(e => e.Packlistno);

                entity.ToTable("PACKLISTHD");

                entity.Property(e => e.Packlistno)
                    .ValueGeneratedNever()
                    .HasColumnName("PACKLISTNO");

                entity.Property(e => e.CheckedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CHECKED_BY")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.DocNum).HasColumnName("DOC_NUM");

                entity.Property(e => e.DocNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DOC_NUMBER");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.PackDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PACK_DATE");

                entity.Property(e => e.PackRate)
                    .HasColumnName("PACK_RATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PackedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PACKED_BY")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Packlistnumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PACKLISTNUMBER");

                entity.Property(e => e.TranspCode).HasColumnName("TRANSP_CODE");

                entity.Property(e => e.TtlCarton)
                    .HasColumnName("TTL_CARTON")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TtlCost)
                    .HasColumnName("TTL_COST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TtlLines).HasColumnName("TTL_LINES");

                entity.Property(e => e.TtlWeight)
                    .HasColumnName("TTL_WEIGHT")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Paycalc>(entity =>
            {
                entity.HasKey(e => new { e.EdCode, e.EmpNum, e.Prdnum, e.Prd, e.Payyear });

                entity.ToTable("PAYCALC");

                entity.Property(e => e.EdCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ED_CODE");

                entity.Property(e => e.EmpNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EMP_NUM");

                entity.Property(e => e.Prdnum).HasColumnName("PRDNUM");

                entity.Property(e => e.Prd)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("PRD")
                    .HasDefaultValueSql("('190001')");

                entity.Property(e => e.Payyear)
                    .HasColumnName("PAYYEAR")
                    .HasDefaultValueSql("((2010))");

                entity.Property(e => e.Payamount).HasColumnName("PAYAMOUNT");

                entity.Property(e => e.Paydet)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("paydet");

                entity.Property(e => e.PmNum).HasColumnName("PM_NUM");

                entity.Property(e => e.Posted)
                    .HasColumnName("POSTED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transno)
                    .HasColumnName("transno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transtype)
                    .HasColumnName("transtype")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Paydate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PAYDATES");

                entity.Property(e => e.Nhifdue).HasColumnName("NHIFDUE");

                entity.Property(e => e.Nssfdue).HasColumnName("NSSFDUE");

                entity.Property(e => e.Payedue).HasColumnName("PAYEDUE");

                entity.Property(e => e.Payyear)
                    .HasColumnName("PAYYEAR")
                    .HasDefaultValueSql("((2010))");

                entity.Property(e => e.Prd1)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("PRD1");

                entity.Property(e => e.Prd10)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("PRD10");

                entity.Property(e => e.Prd11)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("PRD11");

                entity.Property(e => e.Prd12)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("PRD12");

                entity.Property(e => e.Prd2)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("PRD2");

                entity.Property(e => e.Prd3)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("PRD3");

                entity.Property(e => e.Prd4)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("PRD4");

                entity.Property(e => e.Prd5)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("PRD5");

                entity.Property(e => e.Prd6)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("PRD6");

                entity.Property(e => e.Prd7)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("PRD7");

                entity.Property(e => e.Prd8)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("PRD8");

                entity.Property(e => e.Prd9)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("PRD9");

                entity.Property(e => e.Prdintro)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("prdintro");

                entity.Property(e => e.Prdmonth1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRDMONTH1");

                entity.Property(e => e.Prdmonth10)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRDMONTH10");

                entity.Property(e => e.Prdmonth11)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRDMONTH11");

                entity.Property(e => e.Prdmonth12)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRDMONTH12");

                entity.Property(e => e.Prdmonth2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRDMONTH2");

                entity.Property(e => e.Prdmonth3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRDMONTH3");

                entity.Property(e => e.Prdmonth4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRDMONTH4");

                entity.Property(e => e.Prdmonth5)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRDMONTH5");

                entity.Property(e => e.Prdmonth6)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRDMONTH6");

                entity.Property(e => e.Prdmonth7)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRDMONTH7");

                entity.Property(e => e.Prdmonth8)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRDMONTH8");

                entity.Property(e => e.Prdmonth9)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRDMONTH9");

                entity.Property(e => e.Prdpaydate1)
                    .HasColumnType("datetime")
                    .HasColumnName("PRDPAYDATE1");

                entity.Property(e => e.Prdpaydate10)
                    .HasColumnType("datetime")
                    .HasColumnName("PRDPAYDATE10");

                entity.Property(e => e.Prdpaydate11)
                    .HasColumnType("datetime")
                    .HasColumnName("PRDPAYDATE11");

                entity.Property(e => e.Prdpaydate12)
                    .HasColumnType("datetime")
                    .HasColumnName("PRDPAYDATE12");

                entity.Property(e => e.Prdpaydate2)
                    .HasColumnType("datetime")
                    .HasColumnName("PRDPAYDATE2");

                entity.Property(e => e.Prdpaydate3)
                    .HasColumnType("datetime")
                    .HasColumnName("PRDPAYDATE3");

                entity.Property(e => e.Prdpaydate4)
                    .HasColumnType("datetime")
                    .HasColumnName("PRDPAYDATE4");

                entity.Property(e => e.Prdpaydate5)
                    .HasColumnType("datetime")
                    .HasColumnName("PRDPAYDATE5");

                entity.Property(e => e.Prdpaydate6)
                    .HasColumnType("datetime")
                    .HasColumnName("PRDPAYDATE6");

                entity.Property(e => e.Prdpaydate7)
                    .HasColumnType("datetime")
                    .HasColumnName("PRDPAYDATE7");

                entity.Property(e => e.Prdpaydate8)
                    .HasColumnType("datetime")
                    .HasColumnName("PRDPAYDATE8");

                entity.Property(e => e.Prdpaydate9)
                    .HasColumnType("datetime")
                    .HasColumnName("PRDPAYDATE9");

                entity.Property(e => e.Thisperiodset)
                    .HasColumnName("THISPERIODSET")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thisprd)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("THISPRD");

                entity.Property(e => e.Thisprdmonth)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("THISPRDMONTH");

                entity.Property(e => e.Thisprdnum).HasColumnName("THISPRDNUM");

                entity.Property(e => e.Thisprdpaydate)
                    .HasColumnType("datetime")
                    .HasColumnName("THISPRDPAYDATE");
            });

            modelBuilder.Entity<Paymaster>(entity =>
            {
                entity.HasKey(e => new { e.EdCode, e.EmpNum });

                entity.ToTable("PAYMASTER");

                entity.Property(e => e.EdCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ED_CODE");

                entity.Property(e => e.EmpNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EMP_NUM");

                entity.Property(e => e.Payamount).HasColumnName("PAYAMOUNT");

                entity.Property(e => e.PmNum).HasColumnName("PM_NUM");
            });

            modelBuilder.Entity<PaymentDetail>(entity =>
            {
                entity.HasKey(e => new { e.Paycounter, e.Entrynum, e.Bcode });

                entity.ToTable("PAYMENT_DETAIL");

                entity.Property(e => e.Paycounter).HasColumnName("PAYCOUNTER");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.AppNum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("APP_NUM")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Appstatus)
                    .HasColumnName("appstatus")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Bankcleared)
                    .HasColumnName("bankcleared")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BudgetAmt)
                    .HasColumnName("budgetAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Clearingdate)
                    .HasColumnType("datetime")
                    .HasColumnName("clearingdate");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("comments")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DeptCode)
                    .HasColumnName("dept_code")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PayCurrencycode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PAY_currencycode")
                    .HasDefaultValueSql("('999')");

                entity.Property(e => e.PayDetnum)
                    .HasColumnName("pay_detnum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PayExchrate)
                    .HasColumnName("PAY_exchrate")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PayGcs)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PAY_GCS")
                    .HasDefaultValueSql("('G')");

                entity.Property(e => e.PayName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAY_name")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PayNum).HasColumnName("PAY_NUM");

                entity.Property(e => e.Paynarration)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("paynarration")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Reference)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("reference");

                entity.Property(e => e.Reqid)
                    .HasColumnName("reqid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Reqnopcash)
                    .HasColumnName("reqnopcash")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Revdoc)
                    .HasColumnName("revdoc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rptentrynum)
                    .HasColumnName("rptentrynum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RptscJBcode)
                    .HasColumnName("rptsc_j_bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RptscJDetnum)
                    .HasColumnName("rptsc_j_detnum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbcode)
                    .HasColumnName("sbcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ScJBcode)
                    .HasColumnName("sc_j_bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ScJDetnum)
                    .HasColumnName("sc_j_detnum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.SurrAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.Votebooknum)
                    .HasColumnName("votebooknum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateAmount)
                    .HasColumnName("xrate_amount")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<PaymentDetailrep>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PAYMENT_DETAILREP");

                entity.Property(e => e.Amount).HasDefaultValueSql("(0)");

                entity.Property(e => e.Bcode)
                    .HasColumnName("BCODE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Entrynum).ValueGeneratedOnAdd();

                entity.Property(e => e.PayDetnum)
                    .HasColumnName("pay_detnum")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PayNum)
                    .HasColumnName("PAY_NUM")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Paycounter)
                    .HasColumnName("PAYCOUNTER")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Reference)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("reference");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");
            });

            modelBuilder.Entity<PaymentsDt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PAYMENTS_DT");

                entity.HasIndex(e => e.Matchno, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Dat)
                    .HasColumnType("datetime")
                    .HasColumnName("DAT_");

                entity.Property(e => e.Matchno).HasColumnName("MATCHNO");

                entity.Property(e => e.Normal).HasColumnName("normal");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SINV_NUMBER");
            });

            modelBuilder.Entity<PaymentsHd>(entity =>
            {
                entity.HasKey(e => new { e.PayDetnum, e.Bcode });

                entity.ToTable("PAYMENTS_HD");

                entity.HasIndex(e => new { e.Gcode, e.ClearingDate, e.BankCleared }, "IX_PAYMENTS_HD");

                entity.HasIndex(e => new { e.BankAcct, e.ClearingDate, e.BankCleared }, "clearing");

                entity.HasIndex(e => e.BankAcct, "ndxBankAcct")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Currencycode, "ndxCurrencyCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Gcode, "ndxGCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.PayDate, e.Gcs, e.Batched }, "ndxPayDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SuppCode, "ndxSuppCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PayDetnum).HasColumnName("pay_detnum");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Amountinwords)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("amountinwords");

                entity.Property(e => e.Amountpaid).HasColumnName("amountpaid");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_acct");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashier)
                    .HasColumnName("cashier")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashsale)
                    .HasColumnName("CASHSALE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHQ_DATE");

                entity.Property(e => e.Cleared).HasColumnName("cleared");

                entity.Property(e => e.ClearingDate).HasColumnType("datetime");

                entity.Property(e => e.Clearingamount).HasColumnName("clearingamount");

                entity.Property(e => e.Cnotebcode)
                    .HasColumnName("CNOTEBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cnotenum)
                    .HasColumnName("CNOTENUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.Contrabcode)
                    .HasColumnName("contrabcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("currencycode");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.DeptCode)
                    .HasColumnName("dept_code")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Discount).HasColumnName("discount");

                entity.Property(e => e.Docbanked)
                    .HasColumnName("docbanked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.ExclAmt)
                    .HasColumnName("excl_amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fromhistory)
                    .HasColumnName("FROMHISTORY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Frompd)
                    .HasColumnName("frompd")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GCODE");

                entity.Property(e => e.Gcs)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("GCS");

                entity.Property(e => e.Homeamountpaid).HasColumnName("homeamountpaid");

                entity.Property(e => e.Matched).HasColumnName("matched");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("memberno")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mpesaentryno)
                    .HasColumnName("MPESAENTRYNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mpesatransid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MPESATRANSID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mpickbcode)
                    .HasColumnName("MPICKBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mpickno)
                    .HasColumnName("MPICKNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDate)
                    .HasColumnType("datetime")
                    .HasColumnName("pay_date");

                entity.Property(e => e.PayNum).HasColumnName("PAY_NUM");

                entity.Property(e => e.Paycounter).HasColumnName("PAYCOUNTER");

                entity.Property(e => e.Payfor)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("payfor");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("paymode");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reference");

                entity.Property(e => e.Referenceother)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("referenceother")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Revdoc)
                    .HasColumnName("revdoc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RptClearingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("rptClearingDate");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Selrec)
                    .HasColumnName("selrec")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("supp_code");

                entity.Property(e => e.Suppcleared)
                    .HasColumnName("SUPPCLEARED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Suppclearingdate)
                    .HasColumnType("datetime")
                    .HasColumnName("SUPPCLEARINGDATE");

                entity.Property(e => e.TaxAmt)
                    .HasColumnName("tax_amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tax_code")
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.Theircurrencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("theircurrencycode");

                entity.Property(e => e.Tillno)
                    .HasColumnName("TILLNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillsessno)
                    .HasColumnName("TILLSESSNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Txperc)
                    .HasColumnName("TXPERC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Txtype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TXTYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Using).HasColumnName("using");

                entity.Property(e => e.Whvat)
                    .HasColumnName("whvat")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Whvatamt)
                    .HasColumnName("whvatamt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Whvatcode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("whvatcode")
                    .HasDefaultValueSql("('00')")
                    .IsFixedLength(true);

                entity.Property(e => e.Whvatperc)
                    .HasColumnName("whvatperc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<PaymentsHdrep>(entity =>
            {
                entity.HasKey(e => new { e.PayDetnum, e.Bcode });

                entity.ToTable("PAYMENTS_HDREP");

                entity.HasIndex(e => e.BankAcct, "ndxBankAcct")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Currencycode, "ndxCurrencyCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Gcode, "ndxGCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PayDate, "ndxPayDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SuppCode, "ndxSuppCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PayDetnum).HasColumnName("pay_detnum");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Amountinwords)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("amountinwords");

                entity.Property(e => e.Amountpaid).HasColumnName("amountpaid");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_acct");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Cashsale)
                    .HasColumnName("CASHSALE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHQ_DATE");

                entity.Property(e => e.Cleared).HasColumnName("cleared");

                entity.Property(e => e.ClearingDate).HasColumnType("datetime");

                entity.Property(e => e.Clearingamount).HasColumnName("clearingamount");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("currencycode");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Discount).HasColumnName("discount");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.ExclAmt)
                    .HasColumnName("excl_amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Fromhistory)
                    .HasColumnName("FROMHISTORY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Gcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GCODE");

                entity.Property(e => e.Gcs)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("GCS");

                entity.Property(e => e.Homeamountpaid).HasColumnName("homeamountpaid");

                entity.Property(e => e.Matched).HasColumnName("matched");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDate)
                    .HasColumnType("datetime")
                    .HasColumnName("pay_date");

                entity.Property(e => e.PayNum).HasColumnName("PAY_NUM");

                entity.Property(e => e.Paycounter).HasColumnName("PAYCOUNTER");

                entity.Property(e => e.Payfor)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("payfor");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("paymode");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reference");

                entity.Property(e => e.RptClearingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("rptClearingDate");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("supp_code");

                entity.Property(e => e.TaxAmt)
                    .HasColumnName("tax_amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tax_code")
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.Theircurrencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("theircurrencycode");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Using).HasColumnName("using");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<Paymode>(entity =>
            {
                entity.HasKey(e => e.PmCode);

                entity.ToTable("PAYMODES");

                entity.Property(e => e.PmCode).HasColumnName("PM_CODE");

                entity.Property(e => e.PmName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PM_NAME");
            });

            modelBuilder.Entity<Paymodebank>(entity =>
            {
                entity.HasKey(e => e.Paymode);

                entity.ToTable("PAYMODEBANKS");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAYMODE");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BANK_ACCT");

                entity.Property(e => e.Pmentrynum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PMENTRYNUM");
            });

            modelBuilder.Entity<Payperiodstatus>(entity =>
            {
                entity.HasKey(e => new { e.Theprd, e.Theprdnum });

                entity.ToTable("PAYPERIODSTATUS");

                entity.Property(e => e.Theprd)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("THEPRD");

                entity.Property(e => e.Theprdnum).HasColumnName("THEPRDNUM");

                entity.Property(e => e.Locked)
                    .HasColumnName("LOCKED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Otlocked)
                    .HasColumnName("OTLOCKED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Payyear)
                    .HasColumnName("PAYYEAR")
                    .HasDefaultValueSql("((2010))");

                entity.Property(e => e.Posted)
                    .HasColumnName("POSTED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("PRINTCOPY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Themonth)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("themonth");
            });

            modelBuilder.Entity<Payroll>(entity =>
            {
                entity.HasKey(e => new { e.EdCode, e.EmpNum, e.Prdnum, e.Prd, e.Payyear, e.Transno });

                entity.ToTable("PAYROLL");

                entity.Property(e => e.EdCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ED_CODE");

                entity.Property(e => e.EmpNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EMP_NUM");

                entity.Property(e => e.Prdnum).HasColumnName("PRDNUM");

                entity.Property(e => e.Prd)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("PRD")
                    .HasDefaultValueSql("('190001')");

                entity.Property(e => e.Payyear)
                    .HasColumnName("PAYYEAR")
                    .HasDefaultValueSql("((2010))");

                entity.Property(e => e.Transno).HasColumnName("transno");

                entity.Property(e => e.Payamount).HasColumnName("PAYAMOUNT");

                entity.Property(e => e.Paydet)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("paydet");

                entity.Property(e => e.PmNum).HasColumnName("PM_NUM");

                entity.Property(e => e.Posted)
                    .HasColumnName("POSTED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transtype)
                    .HasColumnName("transtype")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Payrollitem>(entity =>
            {
                entity.HasKey(e => e.EdCode);

                entity.ToTable("PAYROLLITEMS");

                entity.Property(e => e.EdCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ED_CODE");

                entity.Property(e => e.Acct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Contribution)
                    .HasColumnName("contribution")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EdAmount).HasColumnName("ED_AMOUNT");

                entity.Property(e => e.EdMode)
                    .HasColumnName("ED_MODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EdName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ED_NAME");

                entity.Property(e => e.EdType)
                    .HasColumnName("ED_TYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Systemacct).HasColumnName("SYSTEMACCT");

                entity.Property(e => e.Taxacct).HasColumnName("TAXACCT");
            });

            modelBuilder.Entity<Payterm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PAYTERMS");

                entity.HasIndex(e => e.Paytermcode, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ChargableAfter).HasColumnName("CHARGABLE_AFTER");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Discount).HasColumnName("DISCOUNT");

                entity.Property(e => e.DiscountedDays).HasColumnName("DISCOUNTED_DAYS");

                entity.Property(e => e.InterestRate).HasColumnName("INTEREST_RATE");

                entity.Property(e => e.Numdays).HasColumnName("NUMDAYS");

                entity.Property(e => e.Paytermcode).HasColumnName("PAYTERMCODE");
            });

            modelBuilder.Entity<Paytoalloc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PAYTOALLOC");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Amountinwords)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("amountinwords");

                entity.Property(e => e.Amountpaid).HasColumnName("amountpaid");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_acct");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHQ_DATE");

                entity.Property(e => e.Cleared).HasColumnName("cleared");

                entity.Property(e => e.ClearingDate).HasColumnType("datetime");

                entity.Property(e => e.Clearingamount).HasColumnName("clearingamount");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("currencycode");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Discount).HasColumnName("discount");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.Fromhistory).HasColumnName("FROMHISTORY");

                entity.Property(e => e.Gcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GCODE");

                entity.Property(e => e.Gcs)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("GCS");

                entity.Property(e => e.Homeamountpaid).HasColumnName("homeamountpaid");

                entity.Property(e => e.Matched).HasColumnName("matched");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDate)
                    .HasColumnType("datetime")
                    .HasColumnName("pay_date");

                entity.Property(e => e.PayDetnum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("pay_detnum");

                entity.Property(e => e.PayNum).HasColumnName("PAY_NUM");

                entity.Property(e => e.Paycounter).HasColumnName("PAYCOUNTER");

                entity.Property(e => e.Payfor)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("payfor");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("paymode");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reference");

                entity.Property(e => e.RptClearingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("rptClearingDate");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("supp_code");

                entity.Property(e => e.Theircurrencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("theircurrencycode");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Using).HasColumnName("using");

                entity.Property(e => e.XrateBalance).HasColumnName("xrate_balance");

                entity.Property(e => e.XrateNet).HasColumnName("xrate_net");
            });

            modelBuilder.Entity<Period>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.Period1, "PER_PD")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.EndPeriod).HasColumnType("datetime");

                entity.Property(e => e.Period1)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("Period");

                entity.Property(e => e.StartPeriod).HasColumnType("datetime");
            });

            modelBuilder.Entity<Phamaconfig>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PHAMACONFIG");

                entity.Property(e => e.Clientmac)
                    .HasMaxLength(55)
                    .IsUnicode(false)
                    .HasColumnName("CLIENTMAC");

                entity.Property(e => e.Phamademo).HasColumnName("PHAMADEMO");

                entity.Property(e => e.Phamademoexpiry)
                    .HasColumnType("datetime")
                    .HasColumnName("PHAMADEMOEXPIRY");

                entity.Property(e => e.Phamareg).HasColumnName("PHAMAREG");

                entity.Property(e => e.Phamaserial)
                    .HasMaxLength(55)
                    .IsUnicode(false)
                    .HasColumnName("PHAMASERIAL");

                entity.Property(e => e.Phamausers).HasColumnName("PHAMAUSERS");

                entity.Property(e => e.Phamaversion)
                    .HasMaxLength(55)
                    .IsUnicode(false)
                    .HasColumnName("PHAMAVERSION");
            });

            modelBuilder.Entity<PkInvStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pkINV_STOCK");

                entity.HasIndex(e => e.InvCode, "xinv_code");

                entity.HasIndex(e => new { e.LocCode, e.StockDate }, "xstocksearch");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("barcode");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM");

                entity.Property(e => e.Batched)
                    .HasColumnName("batched")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CompQty).HasColumnName("COMP_QTY");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENTRYDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Entrynum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ENTRYNUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOCK_DATE");

                entity.Property(e => e.StockQty).HasColumnName("STOCK_QTY");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UPDATEUSER");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<PkinvStockSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PKINV_STOCK_SUMMARY");

                entity.HasIndex(e => new { e.InvCode, e.StockDate }, "pkcheck");

                entity.HasIndex(e => e.InvCode, "xstockcode");

                entity.HasIndex(e => new { e.LocCode, e.StockDate }, "xstocksearch");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("barcode");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM");

                entity.Property(e => e.CompQty).HasColumnName("COMP_QTY");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Entrynum).HasColumnName("ENTRYNUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.StockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOCK_DATE");

                entity.Property(e => e.StockQty).HasColumnName("STOCK_QTY");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UPDATEUSER");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<PkinvStockTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PKINV_STOCK_TEMP");

                entity.HasIndex(e => e.InvCode, "xstockcode");

                entity.HasIndex(e => new { e.LocCode, e.StockDate }, "xstocksearch");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("barcode");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM");

                entity.Property(e => e.CompQty).HasColumnName("COMP_QTY");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Entrynum).HasColumnName("ENTRYNUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.StockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOCK_DATE");

                entity.Property(e => e.StockQty).HasColumnName("STOCK_QTY");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UPDATEUSER");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<PorderinDt>(entity =>
            {
                entity.HasKey(e => new { e.PorderinDetNum, e.Bcode });

                entity.ToTable("PORDERIN_DT");

                entity.Property(e => e.PorderinDetNum).HasColumnName("PORDERIN_DET_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Bonus)
                    .HasColumnName("BONUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.DeptCode)
                    .HasColumnName("DEPT_CODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Detpending).HasColumnName("DETPENDING");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Metquantity).HasColumnName("METQUANTITY");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PorderinNum).HasColumnName("PORDERIN_NUM");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Remquantity).HasColumnName("REMQUANTITY");

                entity.Property(e => e.Sbcode)
                    .HasColumnName("sbcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("tax_code");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<PorderinHd>(entity =>
            {
                entity.HasKey(e => new { e.PorderinNum, e.Bcode })
                    .IsClustered(false);

                entity.ToTable("PORDERIN_HD");

                entity.Property(e => e.PorderinNum).HasColumnName("PORDERIN_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Appcomments)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("appcomments")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Appstat)
                    .HasColumnName("appstat")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Appuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("appuser")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Batched).HasColumnName("BATCHED");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cancelled).HasColumnName("CANCELLED");

                entity.Property(e => e.Comments)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.ContName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cont_name");

                entity.Property(e => e.ContNum).HasColumnName("cont_num");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DELIVERY_DATE");

                entity.Property(e => e.Done).HasColumnName("DONE");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.GrnNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("grn_number");

                entity.Property(e => e.Grntype).HasColumnName("GRNTYPE");

                entity.Property(e => e.Invtype).HasColumnName("INVTYPE");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("LASTLINENO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PayTerms)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAY_TERMS");

                entity.Property(e => e.Pending).HasColumnName("pending");

                entity.Property(e => e.PorderinD).HasColumnName("PORDERIN_D");

                entity.Property(e => e.PorderinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PORDERIN_DATE");

                entity.Property(e => e.PorderinNet).HasColumnName("PORDERIN_NET");

                entity.Property(e => e.PorderinNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PORDERIN_number");

                entity.Property(e => e.PorderinTotal).HasColumnName("PORDERIN_TOTAL");

                entity.Property(e => e.PorderinVat).HasColumnName("PORDERIN_VAT");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("printcopy")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sbcode)
                    .HasColumnName("sbcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.SupRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUP_REF");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Prescriber>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("prescriber");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(50)
                    .HasColumnName("category_code");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .HasColumnName("description");

                entity.Property(e => e.Description2)
                    .HasMaxLength(50)
                    .HasColumnName("description2");

                entity.Property(e => e.Group)
                    .HasMaxLength(50)
                    .HasColumnName("group");

                entity.Property(e => e.Group2)
                    .HasMaxLength(50)
                    .HasColumnName("group2");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(15)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvCode2)
                    .HasMaxLength(15)
                    .HasColumnName("INV_CODE2");

                entity.Property(e => e.Notes).HasMaxLength(200);
            });

            modelBuilder.Entity<Prescription>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("prescriptions");

                entity.Property(e => e.AdultChild)
                    .HasMaxLength(1)
                    .HasColumnName("adult_child");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(15)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Label)
                    .HasMaxLength(100)
                    .HasColumnName("label");

                entity.Property(e => e.Measure)
                    .HasMaxLength(50)
                    .HasColumnName("measure");

                entity.Property(e => e.NoOfTimes).HasColumnName("no_of_times");

                entity.Property(e => e.Period).HasColumnName("period");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(50)
                    .HasColumnName("period_name");

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.Property(e => e.Tobetaken).HasColumnName("tobetaken");

                entity.Property(e => e.Units).HasColumnName("units");

                entity.Property(e => e.UnitsName).HasColumnName("units_name");
            });

            modelBuilder.Entity<Prescriptionslog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("prescriptionslog");

                entity.Property(e => e.AdultChild)
                    .HasMaxLength(1)
                    .HasColumnName("adult_child");

                entity.Property(e => e.Detailnumber).HasColumnName("detailnumber");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(15)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Label)
                    .HasMaxLength(100)
                    .HasColumnName("label");

                entity.Property(e => e.Measure)
                    .HasMaxLength(50)
                    .HasColumnName("measure");

                entity.Property(e => e.Modcode).HasColumnName("modcode");

                entity.Property(e => e.NoOfTimes).HasColumnName("no_of_times");

                entity.Property(e => e.Period).HasColumnName("period");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(50)
                    .HasColumnName("period_name");

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.Property(e => e.Tobetaken).HasColumnName("tobetaken");

                entity.Property(e => e.Units).HasColumnName("units");

                entity.Property(e => e.UnitsName).HasColumnName("units_name");
            });

            modelBuilder.Entity<Pricechangesupp>(entity =>
            {
                entity.HasKey(e => new { e.SinvNum, e.SinvDetNum, e.Bcode });

                entity.ToTable("PRICECHANGESUPP");

                entity.Property(e => e.SinvNum).HasColumnName("SINV_NUM");

                entity.Property(e => e.SinvDetNum).HasColumnName("SINV_DET_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Itemprice)
                    .HasColumnName("ITEMPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itempricelastcost)
                    .HasColumnName("ITEMPRICELASTCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itempricelastcostdiff)
                    .HasColumnName("ITEMPRICELASTCOSTDIFF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itempricelastsupp)
                    .HasColumnName("ITEMPRICELASTSUPP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itempricelastsuppdiff)
                    .HasColumnName("ITEMPRICELASTSUPPDIFF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itempricelpo)
                    .HasColumnName("ITEMPRICELPO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itempricelpodiff)
                    .HasColumnName("ITEMPRICELPODIFF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itempricetradeprice)
                    .HasColumnName("ITEMPRICETRADEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itempricetradepricediff)
                    .HasColumnName("ITEMPRICETRADEPRICEDIFF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Processdate)
                    .HasColumnType("datetime")
                    .HasColumnName("PROCESSDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");
            });

            modelBuilder.Entity<Printallocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("printallocation");

                entity.HasIndex(e => new { e.Username, e.Paytype }, "xpay");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PayNum).HasColumnName("pay_num");

                entity.Property(e => e.Paytype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("paytype");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<Printcashbook>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRINTCASHBOOK");

                entity.Property(e => e.AccCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("acc_code");

                entity.Property(e => e.AccName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("acc_name");

                entity.Property(e => e.Amountinwords)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("amountinwords");

                entity.Property(e => e.Amountpaid).HasColumnName("amountpaid");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_acct");

                entity.Property(e => e.BankName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("bank_name");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("branchname")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHQ_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.DocDate)
                    .HasColumnType("datetime")
                    .HasColumnName("doc_date");

                entity.Property(e => e.DocUserName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("docUserName");

                entity.Property(e => e.Docdetnum)
                    .HasColumnName("DOCDETNUM")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Docname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("docname")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Gcs)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("GCS");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("paymode");

                entity.Property(e => e.PrintUserName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("printUserName");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reference");
            });

            modelBuilder.Entity<Printcashbookrep>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRINTCASHBOOKREP");

                entity.Property(e => e.AccCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("acc_code");

                entity.Property(e => e.AccName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("acc_name");

                entity.Property(e => e.Amountinwords)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("amountinwords");

                entity.Property(e => e.Amountpaid).HasColumnName("amountpaid");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_acct");

                entity.Property(e => e.BankName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("bank_name");

                entity.Property(e => e.BranchName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("branch_name");

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("branchcode");

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHQ_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.DocDate)
                    .HasColumnType("datetime")
                    .HasColumnName("doc_date");

                entity.Property(e => e.DocUserName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("docUserName");

                entity.Property(e => e.Docdetnum)
                    .HasColumnName("DOCDETNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Docname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("docname")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gcs)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("GCS");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("paymode");

                entity.Property(e => e.PrintUserName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("printUserName");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reference");
            });

            modelBuilder.Entity<Printitemsalessummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRINTITEMSALESSUMMARY");

                entity.HasIndex(e => new { e.Username, e.Itemname }, "IX_PRINTITEMSALESSUMMARY");

                entity.Property(e => e.B10code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("B10CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.B10name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("B10NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.B1code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("B1CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.B1name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("B1NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.B2code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("B2CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.B2name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("B2NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.B3code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("B3CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.B3name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("B3NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.B4code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("B4CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.B4name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("B4NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.B5code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("B5CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.B5name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("B5NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.B6code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("B6CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.B6name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("B6NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.B7code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("B7CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.B7name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("B7NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.B8code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("B8CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.B8name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("B8NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.B9code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("B9CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.B9name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("B9NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Itemcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Manufacturername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURERNAME");

                entity.Property(e => e.Totalqtyb1)
                    .HasColumnName("TOTALQTYB1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtyb10)
                    .HasColumnName("TOTALQTYB10")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtyb2)
                    .HasColumnName("TOTALQTYB2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtyb3)
                    .HasColumnName("TOTALQTYB3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtyb4)
                    .HasColumnName("TOTALQTYB4")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtyb5)
                    .HasColumnName("TOTALQTYB5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtyb6)
                    .HasColumnName("TOTALQTYB6")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtyb7)
                    .HasColumnName("TOTALQTYB7")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtyb8)
                    .HasColumnName("TOTALQTYB8")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtyb9)
                    .HasColumnName("TOTALQTYB9")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsalesb1)
                    .HasColumnName("TOTALSALESB1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsalesb10)
                    .HasColumnName("TOTALSALESB10")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsalesb2)
                    .HasColumnName("TOTALSALESB2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsalesb3)
                    .HasColumnName("TOTALSALESB3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsalesb4)
                    .HasColumnName("TOTALSALESB4")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsalesb5)
                    .HasColumnName("TOTALSALESB5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsalesb6)
                    .HasColumnName("TOTALSALESB6")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsalesb7)
                    .HasColumnName("TOTALSALESB7")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsalesb8)
                    .HasColumnName("TOTALSALESB8")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsalesb9)
                    .HasColumnName("TOTALSALESB9")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalstockb1)
                    .HasColumnName("TOTALSTOCKB1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalstockb10)
                    .HasColumnName("TOTALSTOCKB10")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalstockb2)
                    .HasColumnName("TOTALSTOCKB2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalstockb3)
                    .HasColumnName("TOTALSTOCKB3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalstockb4)
                    .HasColumnName("TOTALSTOCKB4")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalstockb5)
                    .HasColumnName("TOTALSTOCKB5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalstockb6)
                    .HasColumnName("TOTALSTOCKB6")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalstockb7)
                    .HasColumnName("TOTALSTOCKB7")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalstockb8)
                    .HasColumnName("TOTALSTOCKB8")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalstockb9)
                    .HasColumnName("TOTALSTOCKB9")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Printjournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRINTJOURNALS");

                entity.Property(e => e.AwbDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AWB_DATE");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Batchnum).HasColumnName("batchnum");

                entity.Property(e => e.ClearingDate).HasColumnType("datetime");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DatePosted)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Posted");

                entity.Property(e => e.Dontshow).HasColumnName("dontshow");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.Fromhistory).HasColumnName("FROMHISTORY");

                entity.Property(e => e.GCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("G_CODE");

                entity.Property(e => e.Jvtype).HasColumnName("JVTYPE");

                entity.Property(e => e.Mydocref)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MYDOCREF");

                entity.Property(e => e.Newamt).HasColumnName("NEWAMT");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Printuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PRINTUSER");

                entity.Property(e => e.ScJAmount).HasColumnName("SC_J_AMOUNT");

                entity.Property(e => e.ScJContra)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_CONTRA");

                entity.Property(e => e.ScJDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("SC_J_DATE");

                entity.Property(e => e.ScJDc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_DC");

                entity.Property(e => e.ScJDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_DESC");

                entity.Property(e => e.ScJDetnum).HasColumnName("SC_J_DETNUM");

                entity.Property(e => e.ScJInclusive).HasColumnName("SC_J_INCLUSIVE");

                entity.Property(e => e.ScJName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_NAME");

                entity.Property(e => e.ScJRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_REF");

                entity.Property(e => e.ScJSc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_SC");

                entity.Property(e => e.ScJTax)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_TAX");

                entity.Property(e => e.Sflag)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sflag");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Usin).HasColumnName("usin_");

                entity.Property(e => e.XrateBalance).HasColumnName("xrate_balance");

                entity.Property(e => e.XrateNet).HasColumnName("xrate_net");
            });

            modelBuilder.Entity<Printjournalinventory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRINTJOURNALINVENTORY");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.DatePosted)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Posted")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Ijrnnum)
                    .HasColumnName("IJRNNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ijrntypenum)
                    .HasColumnName("IJRNTYPENUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("inv_CODE");

                entity.Property(e => e.InvJContra)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inv_J_CONTRA");

                entity.Property(e => e.InvJCost).HasColumnName("inv_J_cost");

                entity.Property(e => e.InvJDate)
                    .HasColumnType("datetime")
                    .HasColumnName("inv_J_DATE");

                entity.Property(e => e.InvJDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_J_DESC");

                entity.Property(e => e.InvJDetnum).HasColumnName("inv_J_DETNUM");

                entity.Property(e => e.InvJIo)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("inv_J_io");

                entity.Property(e => e.InvJName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_J_NAME");

                entity.Property(e => e.InvJOrderref)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("inv_j_orderref");

                entity.Property(e => e.InvJQty)
                    .HasColumnName("inv_J_qty")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InvJRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_J_REF");

                entity.Property(e => e.InvJTvalue).HasColumnName("inv_J_tvalue");

                entity.Property(e => e.Oldcost).HasColumnName("OLDCOST");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Printuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PRINTUSER");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<Printjournalsrep>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRINTJOURNALSREP");

                entity.Property(e => e.AwbDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AWB_DATE");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Batchnum).HasColumnName("batchnum");

                entity.Property(e => e.Branchname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.ClearingDate).HasColumnType("datetime");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DatePosted)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Posted");

                entity.Property(e => e.Dontshow).HasColumnName("dontshow");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.Fromhistory).HasColumnName("FROMHISTORY");

                entity.Property(e => e.GCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("G_CODE");

                entity.Property(e => e.Jvtype).HasColumnName("JVTYPE");

                entity.Property(e => e.Mydocref)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MYDOCREF");

                entity.Property(e => e.Newamt).HasColumnName("NEWAMT");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Printuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PRINTUSER");

                entity.Property(e => e.ScJAmount).HasColumnName("SC_J_AMOUNT");

                entity.Property(e => e.ScJContra)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_CONTRA");

                entity.Property(e => e.ScJDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("SC_J_DATE");

                entity.Property(e => e.ScJDc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_DC");

                entity.Property(e => e.ScJDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_DESC");

                entity.Property(e => e.ScJDetnum).HasColumnName("SC_J_DETNUM");

                entity.Property(e => e.ScJInclusive).HasColumnName("SC_J_INCLUSIVE");

                entity.Property(e => e.ScJName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_NAME");

                entity.Property(e => e.ScJRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_REF");

                entity.Property(e => e.ScJSc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_SC");

                entity.Property(e => e.ScJTax)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_TAX");

                entity.Property(e => e.Sflag)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sflag");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Usin).HasColumnName("usin_");

                entity.Property(e => e.XrateBalance).HasColumnName("xrate_balance");

                entity.Property(e => e.XrateNet).HasColumnName("xrate_net");
            });

            modelBuilder.Entity<Printlabel>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRINTLABELS");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Docnum).HasColumnName("DOCNUM");

                entity.Property(e => e.Doctype).HasColumnName("DOCTYPE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Labelname)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("LABELNAME");

                entity.Property(e => e.Patname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PATNAME");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Strength)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STRENGTH");
            });

            modelBuilder.Entity<Printmylist>(entity =>
            {
                entity.HasKey(e => new { e.Mydoccode, e.Username });

                entity.ToTable("PRINTMYLIST");

                entity.Property(e => e.Mydoccode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MYDOCCODE");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Mydocdesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MYDOCDESC");

                entity.Property(e => e.Mydoctype)
                    .HasColumnName("MYDOCTYPE")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Printperiod>(entity =>
            {
                entity.HasKey(e => new { e.Myperiod, e.Username });

                entity.ToTable("PRINTPERIODS");

                entity.HasIndex(e => new { e.Myperiod, e.Username }, "IX_PRINTPERIODS");

                entity.Property(e => e.Myperiod)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("MYPERIOD");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Myperioddate)
                    .HasColumnType("datetime")
                    .HasColumnName("MYPERIODDATE");
            });

            modelBuilder.Entity<Printpricelist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRINTPRICELIST");

                entity.HasIndex(e => new { e.UserName, e.ItemName }, "NDXITEM")
                    .IsClustered();

                entity.HasIndex(e => e.UserName, "ndxuser");

                entity.Property(e => e.ActiveIngredient)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.BonusExpiry).HasColumnType("datetime");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PackSize)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PriceName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PriceName1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PriceName2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PriceName3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PriceName4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PriceName5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PriceName6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PriceReportTitle)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Sbgroup)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Printpurchasepower>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRINTPURCHASEPOWER");

                entity.HasIndex(e => e.Itemname, "NDXITEMNAME");

                entity.HasIndex(e => new { e.Itemcode, e.Username, e.Selcrit }, "NDXPICK")
                    .IsUnique();

                entity.HasIndex(e => new { e.Username, e.Selcrit }, "NDX_PPURCHASE_USERNAME")
                    .HasFillFactor((byte)50);

                entity.Property(e => e.Avgsalesqty)
                    .HasColumnName("AVGSALESQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Avgsalesqtypw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AVGSALESQTYPW");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Closeingstockqty)
                    .HasColumnName("CLOSEINGSTOCKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Closeingstockqtypw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CLOSEINGSTOCKQTYPW")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Getordbonus)
                    .HasColumnName("GETORDBONUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Getordpw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GETORDPW")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Getordqty)
                    .HasColumnName("GETORDQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Getsel)
                    .HasColumnName("GETSEL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemcode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Itempack)
                    .HasColumnName("ITEMPACK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastorddate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTORDDATE");

                entity.Property(e => e.Lastorddisc)
                    .HasColumnName("LASTORDDISC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastordprice)
                    .HasColumnName("LASTORDPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastordqty)
                    .HasColumnName("LASTORDQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastordqtypw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LASTORDQTYPW")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Lastsuppdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTSUPPDATE");

                entity.Property(e => e.Lastsuppdisc)
                    .HasColumnName("LASTSUPPDISC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastsuppprice)
                    .HasColumnName("LASTSUPPPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastsuppqty)
                    .HasColumnName("LASTSUPPQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastsuppqtypw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LASTSUPPQTYPW")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Minqty)
                    .HasColumnName("MINQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nowordqty)
                    .HasColumnName("NOWORDQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nowordqtypw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOWORDQTYPW")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Openingstockqty)
                    .HasColumnName("OPENINGSTOCKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Openingstockqtypw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OPENINGSTOCKQTYPW")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Orderdays)
                    .HasColumnName("ORDERDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Orderdaysqty)
                    .HasColumnName("ORDERDAYSQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Orderdaysqtypw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDERDAYSQTYPW");

                entity.Property(e => e.Pwrentry)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PWRENTRY");

                entity.Property(e => e.Reorderqty)
                    .HasColumnName("REORDERQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Salesdays)
                    .HasColumnName("SALESDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Selcrit)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SELCRIT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Setordqty)
                    .HasColumnName("SETORDQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Setordqtypw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SETORDQTYPW")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Totalsalesqty)
                    .HasColumnName("TOTALSALESQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsalesqtypw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOTALSALESQTYPW")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Totalsalesvalue)
                    .HasColumnName("TOTALSALESVALUE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tradeprice)
                    .HasColumnName("TRADEPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Varianceqty)
                    .HasColumnName("VARIANCEQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Varianceqtypw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VARIANCEQTYPW");
            });

            modelBuilder.Entity<Printq>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRINTQ");

                entity.HasIndex(e => new { e.BillNumber, e.SaleinvNum }, "NDXBILL");

                entity.Property(e => e.BillNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BILL_NUMBER");

                entity.Property(e => e.Entrynum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("entrynum");

                entity.Property(e => e.Errormessage)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ERRORMESSAGE");

                entity.Property(e => e.Printdate)
                    .HasColumnType("datetime")
                    .HasColumnName("PRINTDATE");

                entity.Property(e => e.Printed)
                    .HasColumnName("printed")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Printedby)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRINTEDBY");

                entity.Property(e => e.Qdate)
                    .HasColumnType("datetime")
                    .HasColumnName("QDATE");

                entity.Property(e => e.SaleinvNum).HasColumnName("saleinv_num");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Printsalescrosstab>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRINTSALESCROSSTAB");

                entity.HasIndex(e => e.Username, "IX_PRINTSALESCROSSTAB");

                entity.HasIndex(e => new { e.Itemname, e.Myperiod }, "IX_PRINTSALESCROSSTAB_1");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Itemcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Manufacturername)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURERNAME");

                entity.Property(e => e.Myperiod)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("MYPERIOD");

                entity.Property(e => e.Newcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NEWCODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Newname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("NEWNAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Totalqty)
                    .HasColumnName("TOTALQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsales)
                    .HasColumnName("TOTALSALES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Printsalesdrill>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRINTSALESDRILL");

                entity.HasIndex(e => e.Itemname, "IX_PRINTSALESDRILL");

                entity.HasIndex(e => e.Username, "IX_PRINTSALESDRILL_1");

                entity.Property(e => e.Closingstock)
                    .HasColumnName("CLOSINGSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Manufacturername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURERNAME");

                entity.Property(e => e.Subgroupname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("SUBGROUPNAME");

                entity.Property(e => e.Totalqty)
                    .HasColumnName("TOTALQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsales)
                    .HasColumnName("TOTALSALES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Printsaleshybrid>(entity =>
            {
                entity.HasKey(e => new { e.ItemCode, e.Username });

                entity.ToTable("PRINTSALESHYBRID");

                entity.HasIndex(e => e.ItemName, "IX_PRINTSALESHYBRID");

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Closeingstockqty).HasColumnName("CLOSEINGSTOCKQTY");

                entity.Property(e => e.InStore)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ItemName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Pw)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PW");

                entity.Property(e => e.ReOrderQty)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Repfilter)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REPFILTER");

                entity.Property(e => e.Repname)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REPNAME");

                entity.Property(e => e.Repsubfilter)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REPSUBFILTER");

                entity.Property(e => e.SaleQty)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Setordqty).HasColumnName("SETORDQTY");

                entity.Property(e => e.Varianceqty).HasColumnName("VARIANCEQTY");
            });

            modelBuilder.Entity<Printsaleshybridneo>(entity =>
            {
                entity.HasKey(e => new { e.ItemCode, e.Username });

                entity.ToTable("PRINTSALESHYBRIDNEO");

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.AvgSale)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Closeingstockqty).HasColumnName("CLOSEINGSTOCKQTY");

                entity.Property(e => e.Getordqty).HasColumnName("GETORDQTY");

                entity.Property(e => e.InStore)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ItemName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OrdQty)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Repfilter)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REPFILTER");

                entity.Property(e => e.Repname)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REPNAME");

                entity.Property(e => e.Repsubfilter)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REPSUBFILTER");

                entity.Property(e => e.ReqQty)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SaleQty)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Setordqty).HasColumnName("SETORDQTY");

                entity.Property(e => e.VarQtyPw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VarQtyPW");

                entity.Property(e => e.Varianceqty).HasColumnName("VARIANCEQTY");
            });

            modelBuilder.Entity<Printsalespower>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRINTSALESPOWER");

                entity.HasIndex(e => e.Itemname, "IX_PRINTSALESPOWER");

                entity.HasIndex(e => e.Username, "IX_PRINTSALESPOWER_1");

                entity.HasIndex(e => new { e.Itemcode, e.Username, e.Bcode }, "IX_PRINTSALESPOWER_2");

                entity.Property(e => e.Adjustqty)
                    .HasColumnName("ADJUSTQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Adjustvalue)
                    .HasColumnName("ADJUSTVALUE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Closeingstockqty)
                    .HasColumnName("CLOSEINGSTOCKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSubgroupcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Itemcode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemcost)
                    .HasColumnName("ITEMCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemcostname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCOSTNAME");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Itempack)
                    .HasColumnName("ITEMPACK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Manufacturername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURERNAME");

                entity.Property(e => e.Openingstockqty)
                    .HasColumnName("OPENINGSTOCKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGE_CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Totalpurchaseqty)
                    .HasColumnName("TOTALPURCHASEQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalpurchases)
                    .HasColumnName("TOTALPURCHASES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqty)
                    .HasColumnName("TOTALQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtylastmonthmtd)
                    .HasColumnName("TOTALQTYLASTMONTHMTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtylastyear)
                    .HasColumnName("TOTALQTYLASTYEAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtylastyearmtd)
                    .HasColumnName("TOTALQTYLASTYEARMTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtylastyearytd)
                    .HasColumnName("TOTALQTYLASTYEARYTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtymtd)
                    .HasColumnName("TOTALQTYMTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtyytd)
                    .HasColumnName("TOTALQTYYTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsales)
                    .HasColumnName("TOTALSALES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsaleslastmonthmtd)
                    .HasColumnName("TOTALSALESLASTMONTHMTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsaleslastyear)
                    .HasColumnName("TOTALSALESLASTYEAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsaleslastyearmtd)
                    .HasColumnName("TOTALSALESLASTYEARMTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsaleslastyearytd)
                    .HasColumnName("TOTALSALESLASTYEARYTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsalesmtd)
                    .HasColumnName("TOTALSALESMTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsalesytd)
                    .HasColumnName("TOTALSALESYTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transferqty)
                    .HasColumnName("TRANSFERQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transfervalue)
                    .HasColumnName("TRANSFERVALUE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Printsalespowerdrill>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRINTSALESPOWERDRILL");

                entity.HasIndex(e => e.Itemname, "IX_PRINTSALESPOWERDRILL");

                entity.HasIndex(e => e.Username, "IX_PRINTSALESPOWERDRILL_1");

                entity.HasIndex(e => new { e.Itemcode, e.Username, e.Bcode }, "IX_PRINTSALESPOWERDRILL_2");

                entity.Property(e => e.Adjustqty)
                    .HasColumnName("ADJUSTQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Adjustvalue)
                    .HasColumnName("ADJUSTVALUE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Closeingstockqty)
                    .HasColumnName("CLOSEINGSTOCKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSubgroupcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Itemcode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemcost)
                    .HasColumnName("ITEMCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemcostname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCOSTNAME");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Itempack)
                    .HasColumnName("ITEMPACK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ManufacturerCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Manufacturername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURERNAME");

                entity.Property(e => e.Openingstockqty)
                    .HasColumnName("OPENINGSTOCKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGE_CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Totalpurchaseqty)
                    .HasColumnName("TOTALPURCHASEQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalpurchases)
                    .HasColumnName("TOTALPURCHASES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqty)
                    .HasColumnName("TOTALQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtylastmonthmtd)
                    .HasColumnName("TOTALQTYLASTMONTHMTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtylastyear)
                    .HasColumnName("TOTALQTYLASTYEAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtylastyearmtd)
                    .HasColumnName("TOTALQTYLASTYEARMTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtylastyearytd)
                    .HasColumnName("TOTALQTYLASTYEARYTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtymtd)
                    .HasColumnName("TOTALQTYMTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtyytd)
                    .HasColumnName("TOTALQTYYTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsales)
                    .HasColumnName("TOTALSALES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsaleslastmonthmtd)
                    .HasColumnName("TOTALSALESLASTMONTHMTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsaleslastyear)
                    .HasColumnName("TOTALSALESLASTYEAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsaleslastyearmtd)
                    .HasColumnName("TOTALSALESLASTYEARMTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsaleslastyearytd)
                    .HasColumnName("TOTALSALESLASTYEARYTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsalesmtd)
                    .HasColumnName("TOTALSALESMTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsalesytd)
                    .HasColumnName("TOTALSALESYTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transferqty)
                    .HasColumnName("TRANSFERQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transfervalue)
                    .HasColumnName("TRANSFERVALUE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Printsalespowerregion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRINTSALESPOWERREGION");

                entity.Property(e => e.Adjustqty)
                    .HasColumnName("ADJUSTQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Adjustvalue)
                    .HasColumnName("ADJUSTVALUE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Brandgeneric)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANDGENERIC");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Invqty)
                    .HasColumnName("INVQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemcost)
                    .HasColumnName("ITEMCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemcostname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCOSTNAME");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Manufacturername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURERNAME");

                entity.Property(e => e.Openingstockqty)
                    .HasColumnName("OPENINGSTOCKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Regionname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REGIONNAME");

                entity.Property(e => e.Totalqty)
                    .HasColumnName("TOTALQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtylastmonthmtd)
                    .HasColumnName("TOTALQTYLASTMONTHMTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtylastyear)
                    .HasColumnName("TOTALQTYLASTYEAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtylastyearmtd)
                    .HasColumnName("TOTALQTYLASTYEARMTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtylastyearytd)
                    .HasColumnName("TOTALQTYLASTYEARYTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtymtd)
                    .HasColumnName("TOTALQTYMTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalqtyytd)
                    .HasColumnName("TOTALQTYYTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsales)
                    .HasColumnName("TOTALSALES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsaleslastmonthmtd)
                    .HasColumnName("TOTALSALESLASTMONTHMTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsaleslastyear)
                    .HasColumnName("TOTALSALESLASTYEAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsaleslastyearmtd)
                    .HasColumnName("TOTALSALESLASTYEARMTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsaleslastyearytd)
                    .HasColumnName("TOTALSALESLASTYEARYTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsalesmtd)
                    .HasColumnName("TOTALSALESMTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsalesytd)
                    .HasColumnName("TOTALSALESYTD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transferqty)
                    .HasColumnName("TRANSFERQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transfervalue)
                    .HasColumnName("TRANSFERVALUE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Printspurchasecore>(entity =>
            {
                entity.HasKey(e => new { e.Itemcode, e.Myperiod });

                entity.ToTable("PRINTSPURCHASECORE");

                entity.HasIndex(e => e.Itemname, "IX_PRINTSPURCHASECORE");

                entity.Property(e => e.Itemcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Myperiod)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("MYPERIOD");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Manufacturername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURERNAME");

                entity.Property(e => e.Totalqty)
                    .HasColumnName("TOTALQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsales)
                    .HasColumnName("TOTALSALES")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Printssalescore>(entity =>
            {
                entity.HasKey(e => new { e.Itemcode, e.Myperiod });

                entity.ToTable("PRINTSSALESCORE");

                entity.HasIndex(e => e.Itemname, "IX_PRINTSSALESCORE");

                entity.Property(e => e.Itemcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Myperiod)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("MYPERIOD");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Manufacturername)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURERNAME");

                entity.Property(e => e.Totalqty)
                    .HasColumnName("TOTALQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsales)
                    .HasColumnName("TOTALSALES")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Printstockcrosstab>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRINTSTOCKCROSSTAB");

                entity.Property(e => e.Itemcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Manufacturername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURERNAME");

                entity.Property(e => e.Myperiod)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("MYPERIOD");

                entity.Property(e => e.Totalpartwhole)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOTALPARTWHOLE")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Totalqty)
                    .HasColumnName("TOTALQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalsales)
                    .HasColumnName("TOTALSALES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Printstockstatus>(entity =>
            {
                entity.HasKey(e => new { e.InvCode, e.Username });

                entity.ToTable("PRINTSTOCKSTATUS");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inv_code");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inv_unit");

                entity.Property(e => e.PackQty)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("pack_qty")
                    .IsFixedLength(true);

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.Property(e => e.Stockdate)
                    .HasColumnType("datetime")
                    .HasColumnName("stockdate");

                entity.Property(e => e.Wholecount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wholecount");
            });

            modelBuilder.Entity<Printstockstatusrep>(entity =>
            {
                entity.HasKey(e => new { e.InvCode, e.Username });

                entity.ToTable("PRINTSTOCKSTATUSrep");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inv_code");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("branchcode");

                entity.Property(e => e.Branchname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("branchname");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inv_unit");

                entity.Property(e => e.PackQty)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("pack_qty")
                    .IsFixedLength(true);

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.Property(e => e.Stockdate)
                    .HasColumnType("datetime")
                    .HasColumnName("stockdate");

                entity.Property(e => e.Wholecount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wholecount");
            });

            modelBuilder.Entity<Printstocktakeneo>(entity =>
            {
                entity.HasKey(e => new { e.InvCode, e.Bcode, e.Userdataid })
                    .HasName("PK_PRINTSTOCKTAKENEO_1");

                entity.ToTable("PRINTSTOCKTAKENEO");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Userdataid).HasColumnName("userdataid");

                entity.Property(e => e.Branchname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.Countpw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COUNTPW");

                entity.Property(e => e.Countunits).HasColumnName("COUNTUNITS");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Instockpw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTOCKPW");

                entity.Property(e => e.Instockunits).HasColumnName("INSTOCKUNITS");

                entity.Property(e => e.Packsize).HasColumnName("PACKSIZE");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Varpw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VARPW");

                entity.Property(e => e.Varunits).HasColumnName("VARUNITS");
            });

            modelBuilder.Entity<Printstocktakeneoqk>(entity =>
            {
                entity.HasKey(e => new { e.InvCode, e.Username });

                entity.ToTable("PRINTSTOCKTAKENEOQK");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Countpw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COUNTPW");

                entity.Property(e => e.Countunits).HasColumnName("COUNTUNITS");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Instockpw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INSTOCKPW");

                entity.Property(e => e.Instockunits).HasColumnName("INSTOCKUNITS");

                entity.Property(e => e.Packsize).HasColumnName("PACKSIZE");

                entity.Property(e => e.Varpw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VARPW");

                entity.Property(e => e.Varunits).HasColumnName("VARUNITS");
            });

            modelBuilder.Entity<Printtrack>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PRINTTRACK");

                entity.Property(e => e.Collectid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COLLECTID");

                entity.Property(e => e.Collectmode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COLLECTMODE");

                entity.Property(e => e.Collecttype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COLLECTTYPE");

                entity.Property(e => e.Customername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERNAME");

                entity.Property(e => e.Invoicenumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INVOICENUMBER");

                entity.Property(e => e.Invpaid).HasDefaultValueSql("((0))");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.SaleinvNet)
                    .HasColumnName("SALEINV_NET")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.Salesman)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SALESMAN");

                entity.Property(e => e.Trackactionby)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRACKACTIONBY");

                entity.Property(e => e.Trackcontrol)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRACKCONTROL");

                entity.Property(e => e.Trackdate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRACKDATE");

                entity.Property(e => e.Trackname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRACKNAME");

                entity.Property(e => e.Tracknum).HasColumnName("TRACKNUM");

                entity.Property(e => e.Trackpackages)
                    .HasColumnName("TRACKPACKAGES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tracktime)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRACKTIME");

                entity.Property(e => e.Tracktype).HasColumnName("TRACKTYPE");

                entity.Property(e => e.Trackweight)
                    .HasColumnName("TRACKWEIGHT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Procedure>(entity =>
            {
                entity.HasKey(e => e.ProcCode);

                entity.ToTable("PROCEDURES");

                entity.Property(e => e.ProcCode).HasColumnName("PROC_CODE");

                entity.Property(e => e.Clcoredoc)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CLCOREDOC")
                    .IsFixedLength(true);

                entity.Property(e => e.ProcName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PROC_NAME");
            });

            modelBuilder.Entity<Procitem>(entity =>
            {
                entity.HasKey(e => e.Myzcounter);

                entity.ToTable("PROCITEMS");

                entity.Property(e => e.Myzcounter).HasColumnName("MYZCOUNTER");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .IsFixedLength(true);

                entity.Property(e => e.Price)
                    .HasColumnName("PRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcCode).HasColumnName("PROC_CODE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Qty)
                    .HasColumnName("QTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Total)
                    .HasColumnName("TOTAL")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Prodclass>(entity =>
            {
                entity.HasKey(e => e.Prodclass1);

                entity.ToTable("PRODCLASS");

                entity.Property(e => e.Prodclass1)
                    .ValueGeneratedNever()
                    .HasColumnName("prodclass");

                entity.Property(e => e.Prodname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("prodname");
            });

            modelBuilder.Entity<ProfileGroup>(entity =>
            {
                entity.HasKey(e => e.Ventrynum);

                entity.ToTable("PROFILE_GROUPS");

                entity.Property(e => e.Ventrynum).HasColumnName("VENTRYNUM");

                entity.Property(e => e.AddM)
                    .HasColumnName("add_m")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DeleteM)
                    .HasColumnName("delete_m")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EditM)
                    .HasColumnName("edit_m")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ModuleName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("MODULE_NAME");

                entity.Property(e => e.ProcessM)
                    .HasColumnName("process_m")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_GROUP");

                entity.Property(e => e.ViewM)
                    .HasColumnName("view_m")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Profitability>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PROFITABILITY");

                entity.HasIndex(e => e.LocCode, "LOC_CODE")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Closebal).HasColumnName("closebal");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.InvCode)
                    .HasColumnType("text")
                    .HasColumnName("Inv_Code");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Locname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOCNAME");

                entity.Property(e => e.Opbal).HasColumnName("opbal");

                entity.Property(e => e.Opcost).HasColumnName("opcost");

                entity.Property(e => e.QtyIssued).HasColumnName("Qty_Issued");

                entity.Property(e => e.SalesTransactionNo).HasColumnName("Sales_TransactionNo");

                entity.Property(e => e.Sgcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sgcode");

                entity.Property(e => e.Sgname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sgname");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Date");
            });

            modelBuilder.Entity<Province>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("province");

                entity.Property(e => e.Code).HasColumnName("CODE");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("NAME");

                entity.Property(e => e.Rcode)
                    .HasMaxLength(255)
                    .HasColumnName("RCODE");
            });

            modelBuilder.Entity<Province1>(entity =>
            {
                entity.HasKey(e => e.ProvinceCode)
                    .IsClustered(false);

                entity.ToTable("PROVINCES");

                entity.HasIndex(e => e.ProvinceCode, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ProvinceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PROVINCE_CODE");

                entity.Property(e => e.Province)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PROVINCE");
            });

            modelBuilder.Entity<Provincetown>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("provincetown");

                entity.Property(e => e.PCode).HasColumnName("P_CODE");

                entity.Property(e => e.ProvinceCode)
                    .HasMaxLength(255)
                    .HasColumnName("PROVINCE_CODE");

                entity.Property(e => e.Town)
                    .HasMaxLength(255)
                    .HasColumnName("TOWN");
            });

            modelBuilder.Entity<ProvisionsDt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PROVISIONS_DT");

                entity.HasIndex(e => new { e.ProvisionCode, e.Glacctno }, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ProvisionCode, "ndxProvCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Detnum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("detnum");

                entity.Property(e => e.Fxprovision).HasColumnName("FXPROVISION");

                entity.Property(e => e.Glacctno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GLACCTNO");

                entity.Property(e => e.Glexpenseacct)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GLEXPENSEACCT");

                entity.Property(e => e.Glexpenseacctcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GLEXPENSEACCTCODE");

                entity.Property(e => e.Provision).HasColumnName("PROVISION");

                entity.Property(e => e.ProvisionCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PROVISION_CODE");

                entity.Property(e => e.Provtype).HasColumnName("PROVTYPE");
            });

            modelBuilder.Entity<ProvisionsHd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PROVISIONS_HD");

                entity.HasIndex(e => e.ProvisionCode, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.ProvisionCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PROVISION_CODE");
            });

            modelBuilder.Entity<Pubholiday>(entity =>
            {
                entity.HasKey(e => e.PubDate);

                entity.ToTable("PUBHOLIDAY");

                entity.Property(e => e.PubDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PUB_DATE");

                entity.Property(e => e.PubCode)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PUB_CODE");

                entity.Property(e => e.PubName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PUB_NAME");
            });

            modelBuilder.Entity<PurchaseC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("purchase_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<PurchaseDt>(entity =>
            {
                entity.HasKey(e => new { e.PorderNum, e.PorderDetNum, e.Bcode });

                entity.ToTable("PURCHASE_DT");

                entity.HasIndex(e => new { e.PorderNum, e.Mylineno }, "NDXLINE")
                    .IsUnique();

                entity.Property(e => e.PorderNum).HasColumnName("PORDER_NUM");

                entity.Property(e => e.PorderDetNum).HasColumnName("PORDER_DET_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Bonus)
                    .HasColumnName("BONUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.DeptCode)
                    .HasColumnName("dept_code")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Detpending).HasColumnName("DETPENDING");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Metquantity).HasColumnName("METQUANTITY");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Prelpobcode)
                    .HasColumnName("PRELPOBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Prelponum)
                    .HasColumnName("PRELPONUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Remquantity).HasColumnName("REMQUANTITY");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("tax_code");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<PurchaseExtra>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("purchase_extra");

                entity.HasIndex(e => e.Id, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Bankers)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("bankers");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Cifvalueplus)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cifvalueplus");

                entity.Property(e => e.Consignee)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("consignee");

                entity.Property(e => e.Countryorigin)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("countryorigin");

                entity.Property(e => e.CustOrdnum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cust_ordnum");

                entity.Property(e => e.Delivery)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("delivery");

                entity.Property(e => e.Destination)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("destination");

                entity.Property(e => e.Documents)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("documents");

                entity.Property(e => e.Hsc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("hsc");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Idfdate)
                    .HasColumnType("datetime")
                    .HasColumnName("idfdate");

                entity.Property(e => e.Idfexpiry)
                    .HasColumnType("datetime")
                    .HasColumnName("idfexpiry");

                entity.Property(e => e.Idfno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("idfno");

                entity.Property(e => e.Indentdate)
                    .HasColumnType("datetime")
                    .HasColumnName("indentdate");

                entity.Property(e => e.Indentno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("indentno");

                entity.Property(e => e.Insuranceby)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("insuranceby");

                entity.Property(e => e.Payterms)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("payterms");

                entity.Property(e => e.Pfidate)
                    .HasColumnType("datetime")
                    .HasColumnName("pfidate");

                entity.Property(e => e.Pfino)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("pfino");

                entity.Property(e => e.PorderNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("porder_number");

                entity.Property(e => e.Preship).HasColumnName("preship");

                entity.Property(e => e.Productcodeno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("productcodeno");

                entity.Property(e => e.Shippingmarks)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("shippingmarks");

                entity.Property(e => e.Sitc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sitc");
            });

            modelBuilder.Entity<PurchaseHd>(entity =>
            {
                entity.HasKey(e => e.PorderNum)
                    .IsClustered(false);

                entity.ToTable("PURCHASE_HD");

                entity.HasIndex(e => e.PorderNumber, "porder_number")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PorderNum)
                    .ValueGeneratedNever()
                    .HasColumnName("PORDER_NUM");

                entity.Property(e => e.Appcomments)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("appcomments")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Appstat)
                    .HasColumnName("appstat")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Appuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("appuser")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Batched).HasColumnName("BATCHED");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Cancelled).HasColumnName("CANCELLED");

                entity.Property(e => e.Comments)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.ContName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cont_name");

                entity.Property(e => e.ContNum).HasColumnName("cont_num");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DELIVERY_DATE");

                entity.Property(e => e.Done).HasColumnName("DONE");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.GrnNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("grn_number");

                entity.Property(e => e.Grntype).HasColumnName("GRNTYPE");

                entity.Property(e => e.Invtype).HasColumnName("INVTYPE");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("LASTLINENO")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PayTerms)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAY_TERMS");

                entity.Property(e => e.Pending).HasColumnName("pending");

                entity.Property(e => e.PorderD).HasColumnName("PORDER_D");

                entity.Property(e => e.PorderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PORDER_DATE");

                entity.Property(e => e.PorderNet).HasColumnName("PORDER_NET");

                entity.Property(e => e.PorderNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("porder_number");

                entity.Property(e => e.PorderTotal).HasColumnName("PORDER_TOTAL");

                entity.Property(e => e.PorderVat).HasColumnName("PORDER_VAT");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("printcopy")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Sbcode)
                    .HasColumnName("sbcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.SupRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUP_REF");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Qpr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("QPR");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(15)
                    .HasColumnName("inv_code");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')");

                entity.Property(e => e.Qprice).HasColumnName("qprice");
            });

            modelBuilder.Entity<QuickinvStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("QUICKINV_STOCK");

                entity.HasIndex(e => e.InvCode, "xSTinv_code");

                entity.HasIndex(e => new { e.LocCode, e.StockDate }, "xSTstocksearch");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("barcode");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM");

                entity.Property(e => e.Batched)
                    .HasColumnName("batched")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CompQty).HasColumnName("COMP_QTY");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENTRYDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Entrynum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ENTRYNUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOCK_DATE");

                entity.Property(e => e.StockQty).HasColumnName("STOCK_QTY");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UPDATEUSER");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<QuotationC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("quotation_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<QuotationDt>(entity =>
            {
                entity.HasKey(e => e.QuoDetNum)
                    .IsClustered(false);

                entity.ToTable("QUOTATION_DT");

                entity.HasIndex(e => new { e.QuoNum, e.QuoDetNum }, "PrimaryKey")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.QuoNum, "ndxQuoNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCode, "ndxTaxCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.QuoNum, e.Mylineno }, "ndxlastnum")
                    .IsUnique();

                entity.Property(e => e.QuoDetNum).HasColumnName("QUO_DET_NUM");

                entity.Property(e => e.An).HasColumnName("AN");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bonpwqty)
                    .HasColumnName("bonpwqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonus)
                    .HasColumnName("bonus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Copay)
                    .HasColumnName("copay")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Copaycuscode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("copaycuscode")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CopayinvBcode)
                    .HasColumnName("copayinv_bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CopayinvNum)
                    .HasColumnName("copayinv_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Copayreason)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("copayreason")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DeptCode)
                    .HasColumnName("dept_code")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Icode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ICODE");

                entity.Property(e => e.Inclusive)
                    .HasColumnName("inclusive")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Manuf)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("manuf");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Priceincl)
                    .HasColumnName("priceincl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.QuoNum).HasColumnName("QUO_NUM");

                entity.Property(e => e.Strength)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("strength");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Taxamt)
                    .HasColumnName("taxamt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<QuotationDtOnline>(entity =>
            {
                entity.HasKey(e => new { e.QuoNum, e.QuoDetNum, e.Bcode })
                    .HasName("IX_QUOTATION_DT_ONLINE_CRUD");

                entity.ToTable("QUOTATION_DT_ONLINE");

                entity.Property(e => e.QuoNum).HasColumnName("QUO_NUM");

                entity.Property(e => e.QuoDetNum).HasColumnName("QUO_DET_NUM");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.An).HasColumnName("AN");

                entity.Property(e => e.Bonus).HasDefaultValueSql("((0))");

                entity.Property(e => e.DeptCode)
                    .HasColumnName("dept_code")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Icode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ICODE");

                entity.Property(e => e.Inclusive)
                    .HasColumnName("inclusive")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Manuf)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("manuf");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Priceincl)
                    .HasColumnName("priceincl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Strength)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("strength");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Taxamt)
                    .HasColumnName("taxamt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<QuotationHd>(entity =>
            {
                entity.HasKey(e => e.QuoNum);

                entity.ToTable("QUOTATION_HD");

                entity.HasIndex(e => e.QuoNum, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.QuoDate, "ndxQuoDate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.QuoNum)
                    .ValueGeneratedNever()
                    .HasColumnName("QUO_NUM");

                entity.Property(e => e.Batched)
                    .HasColumnName("batched")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Comments)
                    .HasMaxLength(4000)
                    .HasColumnName("comments");

                entity.Property(e => e.ContName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cont_name");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("memberno");

                entity.Property(e => e.Pricingmode)
                    .HasColumnName("pricingmode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("printcopy")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.QuoD).HasColumnName("QUO_D");

                entity.Property(e => e.QuoDate)
                    .HasColumnType("datetime")
                    .HasColumnName("QUO_DATE");

                entity.Property(e => e.QuoExpiry)
                    .HasColumnType("datetime")
                    .HasColumnName("QUO_EXPIRY");

                entity.Property(e => e.QuoNet).HasColumnName("QUO_NET");

                entity.Property(e => e.QuoNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("quo_number");

                entity.Property(e => e.QuoTotal).HasColumnName("quo_total");

                entity.Property(e => e.QuoVat).HasColumnName("QUO_VAT");

                entity.Property(e => e.RemndNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REMND_NUMBER");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALES_CODE");

                entity.Property(e => e.Salesman)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SALESMAN");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Selected).HasColumnName("selected");

                entity.Property(e => e.SoNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SO_NUMBER");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QuotationHdOnline>(entity =>
            {
                entity.HasKey(e => new { e.QuoNum, e.Bcode });

                entity.ToTable("QUOTATION_HD_ONLINE");

                entity.Property(e => e.QuoNum).HasColumnName("QUO_NUM");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.Batched)
                    .HasColumnName("batched")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Comments)
                    .HasMaxLength(4000)
                    .HasColumnName("comments");

                entity.Property(e => e.ContName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cont_name");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("memberno");

                entity.Property(e => e.Onlinestatus)
                    .HasColumnName("ONLINESTATUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pricingmode)
                    .HasColumnName("pricingmode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("printcopy")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QuoD).HasColumnName("QUO_D");

                entity.Property(e => e.QuoDate)
                    .HasColumnType("datetime")
                    .HasColumnName("QUO_DATE");

                entity.Property(e => e.QuoExpiry)
                    .HasColumnType("datetime")
                    .HasColumnName("QUO_EXPIRY");

                entity.Property(e => e.QuoNet).HasColumnName("QUO_NET");

                entity.Property(e => e.QuoNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("quo_number");

                entity.Property(e => e.QuoTotal).HasColumnName("quo_total");

                entity.Property(e => e.QuoVat).HasColumnName("QUO_VAT");

                entity.Property(e => e.RemndNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REMND_NUMBER");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALES_CODE");

                entity.Property(e => e.Salesman)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SALESMAN");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Selected).HasColumnName("selected");

                entity.Property(e => e.SoNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SO_NUMBER");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Rastamovement>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("rastamovement");

                entity.HasIndex(e => e.Stockcode, "IX_rastamovement")
                    .IsClustered();

                entity.Property(e => e.Pwqty)
                    .HasColumnName("pwqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Stockcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("stockcode");

                entity.Property(e => e.Stockqty)
                    .HasColumnName("stockqty")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Rcpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RCPT");

                entity.Property(e => e.RptDetnum).HasColumnName("RPT_DETNUM");

                entity.Property(e => e.RptNum).HasColumnName("RPT_NUM");
            });

            modelBuilder.Entity<ReceiptDetail>(entity =>
            {
                entity.HasKey(e => new { e.Rptcounter, e.Entrynum, e.Bcode });

                entity.ToTable("RECEIPT_DETAIL");

                entity.Property(e => e.Rptcounter).HasColumnName("RPTCOUNTER");

                entity.Property(e => e.Entrynum).HasColumnName("entrynum");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.AppNum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("APP_NUM")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Appstatus)
                    .HasColumnName("appstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bankcleared)
                    .HasColumnName("bankcleared")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BudgetAmt)
                    .HasColumnName("budgetAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Clearingdate)
                    .HasColumnType("datetime")
                    .HasColumnName("clearingdate");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("comments")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DeptCode)
                    .HasColumnName("dept_code")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PayGcs)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PAY_GCS")
                    .HasDefaultValueSql("('G')");

                entity.Property(e => e.PayName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAY_name")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Payentrynum)
                    .HasColumnName("payentrynum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Paynarration)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("paynarration")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PayscJBcode)
                    .HasColumnName("paysc_j_bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PayscJDetnum)
                    .HasColumnName("paysc_j_detnum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Reference)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("reference");

                entity.Property(e => e.Reqid)
                    .HasColumnName("reqid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Reqnopcash)
                    .HasColumnName("reqnopcash")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Revdoc)
                    .HasColumnName("revdoc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RptCurrencycode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("rpt_currencycode")
                    .HasDefaultValueSql("('999')");

                entity.Property(e => e.RptDetnum)
                    .HasColumnName("rpt_detnum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RptExchrate)
                    .HasColumnName("rpt_exchrate")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RptNum)
                    .HasColumnName("RPT_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.Sbcode)
                    .HasColumnName("sbcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ScJBcode)
                    .HasColumnName("sc_j_bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ScJDetnum)
                    .HasColumnName("sc_j_detnum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SurrAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.Votebooknum)
                    .HasColumnName("votebooknum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateAmount)
                    .HasColumnName("xrate_amount")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ReceiptsDt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RECEIPTS_DT");

                entity.HasIndex(e => e.Matchno, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Dat)
                    .HasColumnType("datetime")
                    .HasColumnName("DAT_");

                entity.Property(e => e.Matchno).HasColumnName("matchno");

                entity.Property(e => e.Normal).HasColumnName("normal");

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SALEINV_NUMBER");
            });

            modelBuilder.Entity<ReceiptsHd>(entity =>
            {
                entity.HasKey(e => new { e.RptDetnum, e.Bcode })
                    .IsClustered(false);

                entity.ToTable("RECEIPTS_HD");

                entity.HasIndex(e => new { e.BankAcct, e.ClearingDate, e.BankCleared }, "IX_RECEIPTS_HD");

                entity.HasIndex(e => new { e.Gcode, e.ClearingDate, e.BankCleared }, "IX_RECEIPTS_HD_1");

                entity.HasIndex(e => e.BankAcct, "ndxBankAcct")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Currencycode, "ndxRptCurrency")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxRptCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Gcode, "ndxRptGCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SuppCode, "ndxRptSuppCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.RptDetnum).HasColumnName("RPT_detnum");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Amountinwords)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("amountinwords");

                entity.Property(e => e.Amountpaid).HasColumnName("amountpaid");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_acct");

                entity.Property(e => e.BankReference)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("bank_reference")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BankbankAcct)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("bankbank_acct")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BankbankName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("bankbank_name")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BankrptDetnum)
                    .HasColumnName("bankrpt_detnum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Banktillno)
                    .HasColumnName("banktillno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Banktillsessno)
                    .HasColumnName("banktillsessno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bounced).HasColumnName("bounced");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashier)
                    .HasColumnName("cashier")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashinv)
                    .HasColumnName("cashinv")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashinvbcode)
                    .HasColumnName("cashinvbcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashinvnum)
                    .HasColumnName("cashinvnum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashsale)
                    .HasColumnName("cashsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashxbalance)
                    .HasColumnName("cashxbalance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashxpaid)
                    .HasColumnName("cashxpaid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHQ_DATE");

                entity.Property(e => e.Cleared).HasColumnName("cleared");

                entity.Property(e => e.ClearingDate).HasColumnType("datetime");

                entity.Property(e => e.Clearingamount).HasColumnName("clearingamount");

                entity.Property(e => e.Cnotebcode)
                    .HasColumnName("CNOTEBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cnotenum)
                    .HasColumnName("CNOTENUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.Contrabcode)
                    .HasColumnName("contrabcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Csalebanked)
                    .HasColumnName("csalebanked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("currencycode");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Cusjrnbcode)
                    .HasColumnName("CUSJRNBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cusjrndetnum)
                    .HasColumnName("CUSJRNDETNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DeptCode)
                    .HasColumnName("dept_code")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Discount).HasColumnName("discount");

                entity.Property(e => e.Docbanked)
                    .HasColumnName("docbanked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Docselect)
                    .HasColumnName("docselect")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.ExclAmt)
                    .HasColumnName("excl_amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fromhistory)
                    .HasColumnName("FROMHISTORY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Frompd)
                    .HasColumnName("frompd")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GCODE");

                entity.Property(e => e.Gcs)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("GCS");

                entity.Property(e => e.Holding).HasColumnName("HOLDING");

                entity.Property(e => e.Homeamountpaid).HasColumnName("homeamountpaid");

                entity.Property(e => e.Matched).HasColumnName("matched");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("memberno")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mpesaentryno)
                    .HasColumnName("MPESAENTRYNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mpesatransid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MPESATRANSID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mpickbcode)
                    .HasColumnName("MPICKBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mpickno)
                    .HasColumnName("MPICKNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Payfor)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("payfor");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("paymode");

                entity.Property(e => e.Paymodenum)
                    .HasColumnName("paymodenum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Paymodetype)
                    .HasColumnName("paymodetype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reference");

                entity.Property(e => e.Referenceother)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("referenceother")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Revdoc)
                    .HasColumnName("revdoc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RptDate)
                    .HasColumnType("datetime")
                    .HasColumnName("rpt_date");

                entity.Property(e => e.RptNum).HasColumnName("RPT_NUM");

                entity.Property(e => e.RptNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Rpt_Number");

                entity.Property(e => e.RptTax)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RPT_tax");

                entity.Property(e => e.Rptcounter).HasColumnName("RPTCOUNTER");

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.Selrec)
                    .HasColumnName("selrec")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("supp_code");

                entity.Property(e => e.Suppcleared)
                    .HasColumnName("SUPPCLEARED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Suppclearingdate)
                    .HasColumnType("datetime")
                    .HasColumnName("SUPPCLEARINGDATE");

                entity.Property(e => e.TaxAmt)
                    .HasColumnName("tax_amt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tax_code")
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.Theircurrencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("theircurrencycode");

                entity.Property(e => e.Tillno)
                    .HasColumnName("TILLNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillsessno)
                    .HasColumnName("TILLSESSNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Txperc)
                    .HasColumnName("TXPERC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Txtype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TXTYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usin).HasColumnName("usin_");

                entity.Property(e => e.Whvat)
                    .HasColumnName("whvat")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Whvatamt)
                    .HasColumnName("whvatamt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Whvatcode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("whvatcode")
                    .HasDefaultValueSql("('00')")
                    .IsFixedLength(true);

                entity.Property(e => e.Whvatperc)
                    .HasColumnName("whvatperc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ReceiptsHdrep>(entity =>
            {
                entity.HasKey(e => new { e.RptDetnum, e.Bcode });

                entity.ToTable("RECEIPTS_HDREP");

                entity.HasIndex(e => e.BankAcct, "ndxBankAcct")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Currencycode, "ndxRptCurrency")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxRptCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Gcode, "ndxRptGCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SuppCode, "ndxRptSuppCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.RptDetnum, "pay_detnum")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.RptDetnum).HasColumnName("RPT_detnum");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Amountinwords)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("amountinwords");

                entity.Property(e => e.Amountpaid).HasColumnName("amountpaid");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_acct");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bounced).HasColumnName("bounced");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHQ_DATE");

                entity.Property(e => e.Cleared).HasColumnName("cleared");

                entity.Property(e => e.ClearingDate).HasColumnType("datetime");

                entity.Property(e => e.Clearingamount).HasColumnName("clearingamount");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("currencycode");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Discount).HasColumnName("discount");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.ExclAmt)
                    .HasColumnName("excl_amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Fromhistory)
                    .HasColumnName("FROMHISTORY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Gcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GCODE");

                entity.Property(e => e.Gcs)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("GCS");

                entity.Property(e => e.Holding).HasColumnName("HOLDING");

                entity.Property(e => e.Homeamountpaid).HasColumnName("homeamountpaid");

                entity.Property(e => e.Matched).HasColumnName("matched");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Payfor)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("payfor");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("paymode");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reference");

                entity.Property(e => e.RptDate)
                    .HasColumnType("datetime")
                    .HasColumnName("rpt_date");

                entity.Property(e => e.RptNum).HasColumnName("RPT_NUM");

                entity.Property(e => e.RptNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Rpt_Number");

                entity.Property(e => e.RptTax)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RPT_tax");

                entity.Property(e => e.Rptcounter).HasColumnName("RPTCOUNTER");

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("supp_code");

                entity.Property(e => e.TaxAmt)
                    .HasColumnName("tax_amt")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tax_code")
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.Theircurrencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("theircurrencycode");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usin).HasColumnName("usin_");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<ReceiptsPaymode>(entity =>
            {
                entity.HasKey(e => new { e.Paymodenum, e.Paymodenumdet });

                entity.ToTable("RECEIPTS_PAYMODE");

                entity.HasIndex(e => e.Paymodenum, "IX_RECEIPTS_PAYMODE");

                entity.Property(e => e.Paymodenum).HasColumnName("paymodenum");

                entity.Property(e => e.Paymodenumdet)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("paymodenumdet");

                entity.Property(e => e.Amountpaid).HasColumnName("amountpaid");

                entity.Property(e => e.Bcode)
                    .HasColumnName("BCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("chq_date");

                entity.Property(e => e.Cnotebcode)
                    .HasColumnName("CNOTEBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cnotenum)
                    .HasColumnName("CNOTENUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mpesaentryno)
                    .HasColumnName("MPESAENTRYNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mpesatransid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MPESATRANSID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mpickbcode)
                    .HasColumnName("MPICKBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mpickno)
                    .HasColumnName("MPICKNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("paymode");

                entity.Property(e => e.PmCode).HasColumnName("PM_CODE");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reference");

                entity.Property(e => e.RptDetnum)
                    .HasColumnName("rpt_detnum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rptbcode)
                    .HasColumnName("rptbcode")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Recondatum>(entity =>
            {
                entity.HasKey(e => new { e.DocNumber, e.TransType, e.Bcode, e.Reconuser });

                entity.ToTable("RECONDATA");

                entity.Property(e => e.DocNumber).HasColumnName("Doc_Number");

                entity.Property(e => e.TransType)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Reconuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RECONUSER");

                entity.Property(e => e.Corder).HasColumnName("corder");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Dorder).HasColumnName("dorder");

                entity.Property(e => e.ReconPeriod)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Reconlock>(entity =>
            {
                entity.HasKey(e => e.Reconprd);

                entity.ToTable("RECONLOCK");

                entity.Property(e => e.Reconprd)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("RECONPRD");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("BANK_ACCT");

                entity.Property(e => e.Locked)
                    .HasColumnName("LOCKED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Posted)
                    .HasColumnName("POSTED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Reconby)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RECONBY");

                entity.Property(e => e.Reconprddate)
                    .HasColumnType("datetime")
                    .HasColumnName("RECONPRDDATE");

                entity.Property(e => e.Reconprdnum).HasColumnName("RECONPRDNUM");

                entity.Property(e => e.Reconprdyear).HasColumnName("RECONPRDYEAR");

                entity.Property(e => e.Recontransdate)
                    .HasColumnType("datetime")
                    .HasColumnName("RECONTRANSDATE")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Reconlocksupp>(entity =>
            {
                entity.HasKey(e => e.Reconprd);

                entity.ToTable("RECONLOCKSUPP");

                entity.Property(e => e.Reconprd)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("RECONPRD");

                entity.Property(e => e.Locked)
                    .HasColumnName("LOCKED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Posted)
                    .HasColumnName("POSTED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Reconby)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RECONBY");

                entity.Property(e => e.Reconprddate)
                    .HasColumnType("datetime")
                    .HasColumnName("RECONPRDDATE");

                entity.Property(e => e.Reconprdnum).HasColumnName("RECONPRDNUM");

                entity.Property(e => e.Reconprdyear).HasColumnName("RECONPRDYEAR");

                entity.Property(e => e.Recontransdate)
                    .HasColumnType("datetime")
                    .HasColumnName("RECONTRANSDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");
            });

            modelBuilder.Entity<Recurrence>(entity =>
            {
                entity.HasKey(e => e.RecurrCode);

                entity.ToTable("RECURRENCE");

                entity.Property(e => e.RecurrCode)
                    .ValueGeneratedNever()
                    .HasColumnName("recurr_code");

                entity.Property(e => e.Daily).HasColumnName("daily");

                entity.Property(e => e.Dailytype).HasColumnName("dailytype");

                entity.Property(e => e.Endafter).HasColumnName("endafter");

                entity.Property(e => e.Endrecurr)
                    .HasColumnType("datetime")
                    .HasColumnName("endrecurr");

                entity.Property(e => e.Mday).HasColumnName("mday");

                entity.Property(e => e.Monthday).HasColumnName("monthday");

                entity.Property(e => e.Monthfirst).HasColumnName("monthfirst");

                entity.Property(e => e.Monthlytype).HasColumnName("monthlytype");

                entity.Property(e => e.Monthmonth).HasColumnName("monthmonth");

                entity.Property(e => e.Monthmonth1).HasColumnName("monthmonth1");

                entity.Property(e => e.Rangetype).HasColumnName("rangetype");

                entity.Property(e => e.RecurrType).HasColumnName("recurr_type");

                entity.Property(e => e.Startrecurr)
                    .HasColumnType("datetime")
                    .HasColumnName("startrecurr");

                entity.Property(e => e.Weekfri)
                    .HasColumnName("weekfri")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Weekly).HasColumnName("weekly");

                entity.Property(e => e.Weeklytype).HasColumnName("weeklytype");

                entity.Property(e => e.Weekmon)
                    .HasColumnName("weekmon")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Weeksat)
                    .HasColumnName("weeksat")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Weeksun)
                    .HasColumnName("weeksun")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Weekthu)
                    .HasColumnName("weekthu")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Weektue)
                    .HasColumnName("weektue")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Weekwed)
                    .HasColumnName("weekwed")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Yday).HasColumnName("yday");

                entity.Property(e => e.Yearday).HasColumnName("yearday");

                entity.Property(e => e.Yearfirst).HasColumnName("yearfirst");

                entity.Property(e => e.Yearlytype).HasColumnName("yearlytype");

                entity.Property(e => e.Yearmonth).HasColumnName("yearmonth");

                entity.Property(e => e.Yearmonth1).HasColumnName("yearmonth1");
            });

            modelBuilder.Entity<Remcalendar>(entity =>
            {
                entity.HasKey(e => e.RemndNumber);

                entity.ToTable("REMCALENDAR");

                entity.Property(e => e.RemndNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REMND_number");

                entity.Property(e => e.Chkcomplete)
                    .HasColumnName("chkcomplete")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Completenotes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("completenotes");

                entity.Property(e => e.Enddate)
                    .HasColumnType("datetime")
                    .HasColumnName("enddate");

                entity.Property(e => e.Endtime)
                    .HasColumnType("datetime")
                    .HasColumnName("endtime");

                entity.Property(e => e.Endtimecaption)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("endtimecaption");

                entity.Property(e => e.Eventnotes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("eventnotes");

                entity.Property(e => e.OrigEvent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("orig_event");

                entity.Property(e => e.RecurrCode).HasColumnName("recurr_code");

                entity.Property(e => e.ReminderCode).HasColumnName("reminder_code");

                entity.Property(e => e.RemndCode).HasColumnName("REMND_code");

                entity.Property(e => e.RemndNum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("REMND_num");

                entity.Property(e => e.Startdate)
                    .HasColumnType("datetime")
                    .HasColumnName("startdate");

                entity.Property(e => e.Starttime)
                    .HasColumnType("datetime")
                    .HasColumnName("starttime");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Reminder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("REMINDERS");

                entity.Property(e => e.Reminder1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REMINDER");

                entity.Property(e => e.ReminderCode).HasColumnName("REMINDER_CODE");

                entity.Property(e => e.Reminderto)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REMINDERTO");
            });

            modelBuilder.Entity<Remreminder>(entity =>
            {
                entity.HasKey(e => new { e.RemndNumber, e.ReminderCode });

                entity.ToTable("REMREMINDER");

                entity.Property(e => e.RemndNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REMND_number");

                entity.Property(e => e.ReminderCode).HasColumnName("reminder_code");

                entity.Property(e => e.Dismiss)
                    .HasColumnName("dismiss")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Entrynum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("entrynum");

                entity.Property(e => e.RecurrCode).HasColumnName("recurr_code");

                entity.Property(e => e.RemDate)
                    .HasColumnType("datetime")
                    .HasColumnName("REM_DATE");

                entity.Property(e => e.RemTime)
                    .HasColumnType("datetime")
                    .HasColumnName("REM_TIME");
            });

            modelBuilder.Entity<ReportSetting>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("REPORT_SETTINGS");

                entity.HasIndex(e => e.Reportid, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ApplySettings)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("APPLY_SETTINGS");

                entity.Property(e => e.BottomMargin).HasColumnName("BOTTOM_MARGIN");

                entity.Property(e => e.Customer)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER");

                entity.Property(e => e.CustomerIndex).HasColumnName("CUSTOMER_INDEX");

                entity.Property(e => e.GroupFooterHeight).HasColumnName("GROUP_FOOTER_HEIGHT");

                entity.Property(e => e.LeftMargin).HasColumnName("LEFT_MARGIN");

                entity.Property(e => e.MaxLines).HasColumnName("MAX_LINES");

                entity.Property(e => e.MinGroupFooterHeight).HasColumnName("MIN_GROUP_FOOTER_HEIGHT");

                entity.Property(e => e.PageHeaderHeight).HasColumnName("PAGE_HEADER_HEIGHT");

                entity.Property(e => e.ReportCategory)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_CATEGORY");

                entity.Property(e => e.ReportHeaderHeight).HasColumnName("REPORT_HEADER_HEIGHT");

                entity.Property(e => e.ReportHeaderTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_HEADER_TITLE");

                entity.Property(e => e.ReportName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_NAME");

                entity.Property(e => e.ReportPageTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_PAGE_TITLE");

                entity.Property(e => e.Reportid).HasColumnName("REPORTID");

                entity.Property(e => e.RightMargin).HasColumnName("RIGHT_MARGIN");

                entity.Property(e => e.TopMargin).HasColumnName("TOP_MARGIN");
            });

            modelBuilder.Entity<ReqC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("REQ_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<ReqDt>(entity =>
            {
                entity.HasKey(e => e.ReqDetNum)
                    .IsClustered(false);

                entity.ToTable("REQ_DT");

                entity.Property(e => e.ReqDetNum).HasColumnName("REQ_DET_NUM");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Delivered)
                    .HasColumnName("DELIVERED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Detpending)
                    .HasColumnName("detpending")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EntryDetnum).HasColumnName("entry_detnum");

                entity.Property(e => e.InstkNum).HasColumnName("INSTK_NUM");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(15)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Metquantity).HasColumnName("METQUANTITY");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OrdQuantity)
                    .HasColumnName("ORD_QUANTITY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Remquantity).HasColumnName("REMQUANTITY");

                entity.Property(e => e.ReqNum).HasColumnName("REQ_NUM");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("trans_time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<ReqHd>(entity =>
            {
                entity.HasKey(e => e.ReqNum);

                entity.ToTable("REQ_HD");

                entity.Property(e => e.ReqNum)
                    .ValueGeneratedNever()
                    .HasColumnName("REQ_NUM");

                entity.Property(e => e.Approveuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("approveuser");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bincode1)
                    .HasColumnName("bincode1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bincode2)
                    .HasColumnName("bincode2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cancelled).HasColumnName("CANCELLED");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Comments)
                    .HasMaxLength(100)
                    .HasColumnName("comments");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(50)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cus_code1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CusCode2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cus_code2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cusname1)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("cusname1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cusname2)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("cusname2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Docapprove)
                    .HasColumnName("docapprove")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.ExpDelivery)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EXP_DELIVERY");

                entity.Property(e => e.Ibitype)
                    .HasColumnName("IBITYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IssueLoc)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("ISSUE_LOC");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pending).HasColumnName("pending");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("printcopy")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PrqNum).HasColumnName("PRQ_NUM");

                entity.Property(e => e.ReceivingLoc)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("RECEIVING_LOC");

                entity.Property(e => e.ReqD).HasColumnName("REQ_D");

                entity.Property(e => e.ReqDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("REQ_DATE");

                entity.Property(e => e.ReqNet).HasColumnName("REQ_NET");

                entity.Property(e => e.ReqNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("REQ_number");

                entity.Property(e => e.ReqRef)
                    .HasMaxLength(50)
                    .HasColumnName("REQ_REF");

                entity.Property(e => e.ReqTotal).HasColumnName("REQ_total");

                entity.Property(e => e.ReqVat).HasColumnName("REQ_VAT");

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(50)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(10)
                    .HasColumnName("sales_code");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName).HasMaxLength(10);

                entity.Property(e => e.Usermodify).HasMaxLength(20);

                entity.Property(e => e.Wasbatched)
                    .HasColumnName("wasbatched")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<RetC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("ret_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<Route>(entity =>
            {
                entity.HasKey(e => e.Routecode);

                entity.ToTable("ROUTES");

                entity.Property(e => e.Routecode).HasColumnName("routecode");

                entity.Property(e => e.Routename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("routename");
            });

            modelBuilder.Entity<Routestown>(entity =>
            {
                entity.HasKey(e => e.TownCode)
                    .HasName("PK_ROUTESTOWN_1");

                entity.ToTable("ROUTESTOWN");

                entity.Property(e => e.TownCode)
                    .ValueGeneratedNever()
                    .HasColumnName("TOWN_CODE");

                entity.Property(e => e.Routecode).HasColumnName("ROUTECODE");
            });

            modelBuilder.Entity<Rpt24052006>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RPT24052006");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Amountinwords)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("amountinwords");

                entity.Property(e => e.Amountpaid).HasColumnName("amountpaid");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_acct");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bounced).HasColumnName("bounced");

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHQ_DATE");

                entity.Property(e => e.Cleared).HasColumnName("cleared");

                entity.Property(e => e.ClearingDate).HasColumnType("datetime");

                entity.Property(e => e.Clearingamount).HasColumnName("clearingamount");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("currencycode");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Discount).HasColumnName("discount");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.Fromhistory).HasColumnName("FROMHISTORY");

                entity.Property(e => e.Gcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GCODE");

                entity.Property(e => e.Gcs)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("GCS");

                entity.Property(e => e.Holding).HasColumnName("HOLDING");

                entity.Property(e => e.Homeamountpaid).HasColumnName("homeamountpaid");

                entity.Property(e => e.Matched).HasColumnName("matched");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Payfor)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("payfor");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("paymode");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reference");

                entity.Property(e => e.RptDate)
                    .HasColumnType("datetime")
                    .HasColumnName("rpt_date");

                entity.Property(e => e.RptDetnum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RPT_detnum");

                entity.Property(e => e.RptNum).HasColumnName("RPT_NUM");

                entity.Property(e => e.RptNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Rpt_Number");

                entity.Property(e => e.RptTax)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RPT_tax");

                entity.Property(e => e.Rptcounter).HasColumnName("RPTCOUNTER");

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("supp_code");

                entity.Property(e => e.Theircurrencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("theircurrencycode");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usin).HasColumnName("usin_");

                entity.Property(e => e.XrateBalance).HasColumnName("xrate_balance");

                entity.Property(e => e.XrateNet).HasColumnName("xrate_net");
            });

            modelBuilder.Entity<Rpttoalloc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RPTTOALLOC");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Amountinwords)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("amountinwords");

                entity.Property(e => e.Amountpaid).HasColumnName("amountpaid");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_acct");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bounced).HasColumnName("bounced");

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHQ_DATE");

                entity.Property(e => e.Cleared).HasColumnName("cleared");

                entity.Property(e => e.ClearingDate).HasColumnType("datetime");

                entity.Property(e => e.Clearingamount).HasColumnName("clearingamount");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("currencycode");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Discount).HasColumnName("discount");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.Fromhistory).HasColumnName("FROMHISTORY");

                entity.Property(e => e.Gcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GCODE");

                entity.Property(e => e.Gcs)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("GCS");

                entity.Property(e => e.Holding).HasColumnName("HOLDING");

                entity.Property(e => e.Homeamountpaid).HasColumnName("homeamountpaid");

                entity.Property(e => e.Matched).HasColumnName("matched");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Payfor)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("payfor");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("paymode");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reference");

                entity.Property(e => e.RptDate)
                    .HasColumnType("datetime")
                    .HasColumnName("rpt_date");

                entity.Property(e => e.RptDetnum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RPT_detnum");

                entity.Property(e => e.RptNum).HasColumnName("RPT_NUM");

                entity.Property(e => e.RptNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Rpt_Number");

                entity.Property(e => e.RptTax)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RPT_tax");

                entity.Property(e => e.Rptcounter).HasColumnName("RPTCOUNTER");

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("supp_code");

                entity.Property(e => e.Theircurrencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("theircurrencycode");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usin).HasColumnName("usin_");

                entity.Property(e => e.XrateBalance).HasColumnName("xrate_balance");

                entity.Property(e => e.XrateNet).HasColumnName("xrate_net");
            });

            modelBuilder.Entity<SaleinvDt>(entity =>
            {
                entity.HasKey(e => new { e.SaleinvDetNum, e.Bcode })
                    .HasName("IX_SALEINV_DT_CRUD");

                entity.ToTable("SALEINV_DT");

                entity.HasIndex(e => e.Documentnumber, "ndxDocNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SaleinvNum, "ndxSaleInvNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCode, "ndxTaxCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SaleinvDetNum).HasColumnName("SALEINV_DET_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.AdultChild)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("adult_child")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Authorisecode)
                    .HasColumnName("authorisecode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonpwqty)
                    .HasColumnName("bonpwqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonus)
                    .HasColumnName("bonus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Clcoredoc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CLCOREDOC")
                    .HasDefaultValueSql("('PHM')")
                    .IsFixedLength(true);

                entity.Property(e => e.Clvisit)
                    .HasColumnName("CLVISIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Copay)
                    .HasColumnName("copay")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Copaycuscode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("copaycuscode")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CopayinvBcode)
                    .HasColumnName("copayinv_bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CopayinvDetNum)
                    .HasColumnName("copayinv_det_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CopayinvNum)
                    .HasColumnName("copayinv_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Copayreason)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("copayreason")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Costofsale)
                    .HasColumnName("costofsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.D1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d1");

                entity.Property(e => e.D2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d2");

                entity.Property(e => e.D3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d3");

                entity.Property(e => e.DeliveryNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERY_NO");

                entity.Property(e => e.DeptCode)
                    .HasColumnName("dept_code")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Documentnumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTNUMBER");

                entity.Property(e => e.EmpNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EMP_NUM");

                entity.Property(e => e.Excise)
                    .HasColumnName("excise")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Expiry)
                    .HasColumnType("datetime")
                    .HasColumnName("expiry");

                entity.Property(e => e.IbiDetNum)
                    .HasColumnName("ibi_det_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inclusive)
                    .HasColumnName("inclusive")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.Itemavgcost)
                    .HasColumnName("itemavgcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Loybcode)
                    .HasColumnName("LOYBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loydetnum)
                    .HasColumnName("LOYDETNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loydettype)
                    .HasColumnName("LOYDETTYPE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loynum)
                    .HasColumnName("LOYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loypoints)
                    .HasColumnName("LOYPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ManufC)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("manufC");

                entity.Property(e => e.ModuleCode)
                    .HasColumnName("Module_Code")
                    .HasDefaultValueSql("((4))");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Newprice).HasColumnName("NEWPRICE");

                entity.Property(e => e.Newtotalcost).HasColumnName("NEWTOTALCOST");

                entity.Property(e => e.OrdQuantity)
                    .HasColumnName("ord_quantity")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PorderinDetNum)
                    .HasColumnName("PORDERIN_DET_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PreGrn)
                    .IsRequired()
                    .HasColumnName("Pre_GRN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Priceincl)
                    .HasColumnName("priceincl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcCode)
                    .HasColumnName("PROC_CODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Promoitem)
                    .HasColumnName("promoitem")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyLeft).HasColumnName("Qty_Left");

                entity.Property(e => e.QtyOrdered).HasColumnName("QTY_ORDERED");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Returned)
                    .HasColumnName("returned")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rfldate)
                    .HasColumnType("datetime")
                    .HasColumnName("RFLDATE");

                entity.Property(e => e.Rmdays)
                    .HasColumnName("RMDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rmtype)
                    .HasColumnName("RMTYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.Sbcode)
                    .HasColumnName("sbcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Snvupdatenum)
                    .HasColumnName("SNVUPDATENUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SoDetNum)
                    .HasColumnName("SO_DET_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Taken)
                    .HasColumnName("taken")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxAmt).HasColumnName("TAX_AMT");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Tsweight)
                    .HasColumnName("tsweight")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.Property(e => e.W1).HasColumnName("w1");

                entity.Property(e => e.W2).HasColumnName("w2");

                entity.Property(e => e.WebquoDetNum)
                    .HasColumnName("webquo_det_num")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SaleinvDtrep>(entity =>
            {
                entity.HasKey(e => new { e.SaleinvNum, e.SaleinvDetNum })
                    .IsClustered(false);

                entity.ToTable("SALEINV_DTREP");

                entity.HasIndex(e => e.Documentnumber, "ndxDocNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SaleinvNum, e.SaleinvDetNum }, "ndxInvNumSDetnum")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SaleinvNum, "ndxSaleInvNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCode, "ndxTaxCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SaleinvNum, e.Mylineno }, "ndxlastnum")
                    .IsUnique();

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.SaleinvDetNum).HasColumnName("SALEINV_DET_NUM");

                entity.Property(e => e.AdultChild)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("adult_child")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bonus)
                    .HasColumnName("bonus")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Costofsale)
                    .HasColumnName("costofsale")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.DeliveryNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERY_NO");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Documentnumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTNUMBER");

                entity.Property(e => e.Expiry)
                    .HasColumnType("datetime")
                    .HasColumnName("expiry");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.ManufC)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("manufC");

                entity.Property(e => e.ModuleCode)
                    .HasColumnName("Module_Code")
                    .HasDefaultValueSql("(4)");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Newprice).HasColumnName("NEWPRICE");

                entity.Property(e => e.Newtotalcost).HasColumnName("NEWTOTALCOST");

                entity.Property(e => e.OrdQuantity)
                    .HasColumnName("ord_quantity")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PreGrn)
                    .IsRequired()
                    .HasColumnName("Pre_GRN")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.QtyLeft).HasColumnName("Qty_Left");

                entity.Property(e => e.QtyOrdered).HasColumnName("QTY_ORDERED");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Returned)
                    .HasColumnName("returned")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SoDetNum)
                    .HasColumnName("SO_DET_NUM")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Taken)
                    .HasColumnName("taken")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TaxAmt).HasColumnName("TAX_AMT");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<SaleinvDtrmt>(entity =>
            {
                entity.HasKey(e => new { e.SaleinvDetNum, e.Bcode })
                    .HasName("PK_SALEINV_DTRMT_1")
                    .IsClustered(false);

                entity.ToTable("SALEINV_DTRMT");

                entity.HasIndex(e => e.Documentnumber, "ndxDocNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SaleinvNum, e.SaleinvDetNum }, "ndxInvNumSDetnum")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SaleinvNum, "ndxSaleInvNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCode, "ndxTaxCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SaleinvNum, e.Mylineno }, "ndxlastnum")
                    .IsUnique();

                entity.Property(e => e.SaleinvDetNum).HasColumnName("SALEINV_DET_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.AdultChild)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("adult_child")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Authorisecode)
                    .HasColumnName("authorisecode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonus)
                    .HasColumnName("bonus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Costofsale)
                    .HasColumnName("costofsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.D1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d1");

                entity.Property(e => e.D2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d2");

                entity.Property(e => e.D3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d3");

                entity.Property(e => e.Deleted)
                    .HasColumnName("deleted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DeliveryNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERY_NO");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Documentnumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTNUMBER");

                entity.Property(e => e.Expiry)
                    .HasColumnType("datetime")
                    .HasColumnName("expiry");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.ManufC)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("manufC");

                entity.Property(e => e.ModuleCode)
                    .HasColumnName("Module_Code")
                    .HasDefaultValueSql("((4))");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Newprice).HasColumnName("NEWPRICE");

                entity.Property(e => e.Newtotalcost).HasColumnName("NEWTOTALCOST");

                entity.Property(e => e.OrdQuantity)
                    .HasColumnName("ord_quantity")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PreGrn)
                    .IsRequired()
                    .HasColumnName("Pre_GRN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyLeft).HasColumnName("Qty_Left");

                entity.Property(e => e.QtyOrdered).HasColumnName("QTY_ORDERED");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Returned)
                    .HasColumnName("returned")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.SoDetNum)
                    .HasColumnName("SO_DET_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Taken)
                    .HasColumnName("taken")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxAmt).HasColumnName("TAX_AMT");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.Property(e => e.W1).HasColumnName("w1");

                entity.Property(e => e.W2).HasColumnName("w2");
            });

            modelBuilder.Entity<SaleinvHd>(entity =>
            {
                entity.HasKey(e => new { e.SaleinvNum, e.Bcode })
                    .HasName("IX_SALEINV_HD_CRUD")
                    .IsClustered(false);

                entity.ToTable("SALEINV_HD");

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusRef, "ndxCusRef")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SaleinvDate, e.Batched }, "ndxSaleDate")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SaleinvNumber, "ndxSaleInvNumber")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Amounttopay).HasColumnName("AMOUNTTOPAY");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Authorisedby)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("authorisedby");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BranchCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_CODE");

                entity.Property(e => e.Cashpaid)
                    .HasColumnName("cashpaid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashsaleinvoice)
                    .HasColumnName("cashsaleinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Clcoreclosed)
                    .HasColumnName("CLCORECLOSED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Clcoreclosedate)
                    .HasColumnType("datetime")
                    .HasColumnName("CLCORECLOSEDATE");

                entity.Property(e => e.Clcoredoc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CLCOREDOC")
                    .HasDefaultValueSql("('PHM')")
                    .IsFixedLength(true);

                entity.Property(e => e.Clvisit)
                    .HasColumnName("CLVISIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Comments)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.CopayinvBcode)
                    .HasColumnName("copayinv_bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CopayinvNum)
                    .HasColumnName("copayinv_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Copayinvoice)
                    .HasColumnName("copayinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.CusRef2)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cuspoints)
                    .HasColumnName("CUSPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Doconhold)
                    .HasColumnName("DOCONHOLD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("EXCH_RATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Forapproval)
                    .HasColumnName("forapproval")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GlTradeaccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_TRADEACCOUNT");

                entity.Property(e => e.Insure).HasColumnName("insure");

                entity.Property(e => e.Invoicetype)
                    .HasColumnName("invoicetype")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Invtrack)
                    .HasColumnName("invtrack")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemselectionDone).HasColumnName("ITEMSELECTION_DONE");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTUPDATE");

                entity.Property(e => e.Loybcode)
                    .HasColumnName("LOYBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loynum)
                    .HasColumnName("LOYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNO");

                entity.Property(e => e.Mempointsbuy)
                    .HasColumnName("MEMPOINTSBUY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mempointsredeem)
                    .HasColumnName("MEMPOINTSREDEEM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MiscCharges).HasColumnName("MISC_CHARGES");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.Patdiag)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("patdiag")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Paying).HasColumnName("paying");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Pricingmode)
                    .HasColumnName("pricingmode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Printcopy).HasColumnName("PRINTCOPY");

                entity.Property(e => e.Printtime)
                    .HasColumnType("datetime")
                    .HasColumnName("printtime");

                entity.Property(e => e.Redeemed)
                    .HasColumnName("REDEEMED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RemndNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REMND_NUMBER");

                entity.Property(e => e.Rfldate)
                    .HasColumnType("datetime")
                    .HasColumnName("RFLDATE");

                entity.Property(e => e.SaleinvD).HasColumnName("SALEINV_D");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SALEINV_DATE");

                entity.Property(e => e.SaleinvExcise)
                    .HasColumnName("saleinv_excise")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SaleinvNet).HasColumnName("SALEINV_NET");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("SALEINV_NUMBER");

                entity.Property(e => e.SaleinvRef)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SALEINV_REF");

                entity.Property(e => e.SaleinvTotal).HasColumnName("SALEINV_TOTAL");

                entity.Property(e => e.SaleinvVat).HasColumnName("SALEINV_VAT");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales_Code");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Sbcode)
                    .HasColumnName("sbcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.Smartbalanceinv)
                    .HasColumnName("smartbalanceinv")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Smartid)
                    .HasColumnName("SMARTID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Smartinvoice)
                    .HasColumnName("smartinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Smartreason)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("smartreason")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Smartstatus)
                    .HasColumnName("smartstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Snvupdatenum)
                    .HasColumnName("SNVUPDATENUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillno)
                    .HasColumnName("TILLNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillsessno)
                    .HasColumnName("TILLSESSNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tltsweight)
                    .HasColumnName("tltsweight")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.TranspCharge).HasColumnName("transp_charge");

                entity.Property(e => e.TranspCode).HasColumnName("transp_code");

                entity.Property(e => e.TransportVat).HasColumnName("TRANSPORT_VAT");

                entity.Property(e => e.TtlWeight)
                    .HasColumnName("ttl_weight")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime");

                entity.Property(e => e.Urgent)
                    .HasColumnName("urgent")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WaybillNum).HasColumnName("waybill_num");

                entity.Property(e => e.Weborder)
                    .HasColumnName("weborder")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SaleinvHdrep>(entity =>
            {
                entity.HasKey(e => e.SaleinvNum)
                    .IsClustered(false);

                entity.ToTable("SALEINV_HDREP");

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusRef, "ndxCusRef")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SaleinvDate, "ndxSaleDate")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SaleinvNumber, "ndxSaleInvNumber")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SaleinvNum)
                    .ValueGeneratedNever()
                    .HasColumnName("SALEINV_NUM");

                entity.Property(e => e.Amounttopay).HasColumnName("AMOUNTTOPAY");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.BranchCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_CODE");

                entity.Property(e => e.Cashsaleinvoice)
                    .HasColumnName("cashsaleinvoice")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Comments)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("EXCH_RATE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.GlTradeaccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_TRADEACCOUNT");

                entity.Property(e => e.Insure).HasColumnName("insure");

                entity.Property(e => e.Invoicetype)
                    .HasColumnName("invoicetype")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.ItemselectionDone).HasColumnName("ITEMSELECTION_DONE");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Lastupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTUPDATE");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNO");

                entity.Property(e => e.MiscCharges).HasColumnName("MISC_CHARGES");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Paying).HasColumnName("paying");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Printcopy).HasColumnName("PRINTCOPY");

                entity.Property(e => e.SaleinvD).HasColumnName("SALEINV_D");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SALEINV_DATE");

                entity.Property(e => e.SaleinvNet).HasColumnName("SALEINV_NET");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.SaleinvRef)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SALEINV_REF");

                entity.Property(e => e.SaleinvTotal).HasColumnName("SALEINV_TOTAL");

                entity.Property(e => e.SaleinvVat).HasColumnName("SALEINV_VAT");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales_Code");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.TranspCharge).HasColumnName("transp_charge");

                entity.Property(e => e.TranspCode).HasColumnName("transp_code");

                entity.Property(e => e.TransportVat).HasColumnName("TRANSPORT_VAT");

                entity.Property(e => e.Urgent)
                    .HasColumnName("urgent")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WaybillNum).HasColumnName("waybill_num");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<SaleinvHdrmt>(entity =>
            {
                entity.HasKey(e => new { e.SaleinvNum, e.Bcode })
                    .IsClustered(false);

                entity.ToTable("SALEINV_HDRMT");

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusRef, "ndxCusRef")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SaleinvDate, "ndxSaleDate")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SaleinvNumber, "ndxSaleInvNumber")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Amounttopay).HasColumnName("AMOUNTTOPAY");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Authorisedby)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("authorisedby");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BranchCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_CODE");

                entity.Property(e => e.Branchcode1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("branchcode");

                entity.Property(e => e.Cashsaleinvoice)
                    .HasColumnName("cashsaleinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Comments)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.Cuspoints)
                    .HasColumnName("CUSPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("EXCH_RATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Forapproval)
                    .HasColumnName("forapproval")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GlTradeaccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_TRADEACCOUNT");

                entity.Property(e => e.Hddeleted)
                    .HasColumnName("hddeleted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Insure).HasColumnName("insure");

                entity.Property(e => e.Invoicetype)
                    .HasColumnName("invoicetype")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemselectionDone).HasColumnName("ITEMSELECTION_DONE");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTUPDATE");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNO");

                entity.Property(e => e.MiscCharges).HasColumnName("MISC_CHARGES");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Paying).HasColumnName("paying");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Printcopy).HasColumnName("PRINTCOPY");

                entity.Property(e => e.Redeemed)
                    .HasColumnName("REDEEMED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RemndNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REMND_NUMBER");

                entity.Property(e => e.Rudisha)
                    .HasColumnName("rudisha")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SaleinvD).HasColumnName("SALEINV_D");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SALEINV_DATE");

                entity.Property(e => e.SaleinvNet).HasColumnName("SALEINV_NET");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.SaleinvRef)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SALEINV_REF");

                entity.Property(e => e.SaleinvTotal).HasColumnName("SALEINV_TOTAL");

                entity.Property(e => e.SaleinvVat).HasColumnName("SALEINV_VAT");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales_Code");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.TranspCharge).HasColumnName("transp_charge");

                entity.Property(e => e.TranspCode).HasColumnName("transp_code");

                entity.Property(e => e.TransportVat).HasColumnName("TRANSPORT_VAT");

                entity.Property(e => e.TtlWeight)
                    .HasColumnName("ttl_weight")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Urgent)
                    .HasColumnName("urgent")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WaybillNum).HasColumnName("waybill_num");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SalesAnalysisByItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SalesAnalysis_ByItem");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.CusDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Desc");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Inv_Code");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Inv_Strength");

                entity.Property(e => e.Manufacturer)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Manufacturer_Code");

                entity.Property(e => e.Province)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProvinceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Province_Code");

                entity.Property(e => e.Town)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TownCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Town_Code");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesAnalysisInventoryList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SalesAnalysis_InventoryList");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_NAME");

                entity.Property(e => e.InvAvgcost).HasColumnName("INV_AVGCOST");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvGroupcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_GROUPCODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.ManufacturerName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_NAME");

                entity.Property(e => e.SubgroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUBGROUP_NAME");

                entity.Property(e => e.YearPlan)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_PLAN");
            });

            modelBuilder.Entity<SalesAnalysisMonthYtdSalesDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SalesAnalysis_Month_YTD_SalesDetails");

                entity.Property(e => e.CurrentMonthEndDate).HasColumnType("datetime");

                entity.Property(e => e.CurrentMonthStartDate).HasColumnType("datetime");

                entity.Property(e => e.CurrentYtdbookMark).HasColumnName("CurrentYTDBookMark");

                entity.Property(e => e.CurrentYtdendDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CurrentYTDEndDate");

                entity.Property(e => e.CurrentYtdprice).HasColumnName("CurrentYTDPrice");

                entity.Property(e => e.CurrentYtdqty).HasColumnName("CurrentYTDQty");

                entity.Property(e => e.CurrentYtdstartDate)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("CurrentYTDStartDate");

                entity.Property(e => e.CurrentYtdtotal).HasColumnName("CurrentYTDTotal");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.LastYearMonthEndDate).HasColumnType("datetime");

                entity.Property(e => e.LastYearMonthStartDate).HasColumnType("datetime");

                entity.Property(e => e.LastYearYtdbookMark).HasColumnName("LastYearYTDBookMark");

                entity.Property(e => e.LastYearYtdendDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LastYearYTDEndDate");

                entity.Property(e => e.LastYearYtdprice).HasColumnName("LastYearYTDPrice");

                entity.Property(e => e.LastYearYtdqty).HasColumnName("LastYearYTDQty");

                entity.Property(e => e.LastYearYtdstartDate)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("LastYearYTDStartDate");

                entity.Property(e => e.LastYearYtdtotal).HasColumnName("LastYearYTDTotal");

                entity.Property(e => e.PriorMonthEndDate).HasColumnType("datetime");

                entity.Property(e => e.PriorMonthStartDate).HasColumnType("datetime");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SALEINV_DATE");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales_Code");
            });

            modelBuilder.Entity<SalesCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SALES_CODE");

                entity.HasIndex(e => e.AnalysisCode, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.CashReportid).HasColumnName("Cash_REPORTID");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.GlAcct)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCT");

                entity.Property(e => e.Hidden)
                    .HasColumnName("HIDDEN")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SaleReportid).HasColumnName("Sale_REPORTID");
            });

            modelBuilder.Entity<SalesJournalDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SalesJournal_Details");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SALEINV_DATE");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.Taxvalue).HasColumnName("TAXVALUE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");
            });

            modelBuilder.Entity<SalesMatrixSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SalesMatrix_Summary");

                entity.HasIndex(e => e.InvSubgroupcode, "INV_SUBGROUPCODE")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Code)
                    .HasColumnType("text")
                    .HasColumnName("CODE");

                entity.Property(e => e.De).HasColumnName("De_");

                entity.Property(e => e.Description)
                    .HasColumnType("text")
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvSubgroupcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.Salesyear).HasColumnName("SALESYEAR");
            });

            modelBuilder.Entity<SalesPlan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SALES_PLAN");

                entity.HasIndex(e => new { e.InvCode, e.SalesYear }, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.SalesYear).HasColumnName("SALES_YEAR");

                entity.Property(e => e.YearPlan).HasColumnName("YEAR_PLAN");

                entity.Property(e => e.YearPlanSales).HasColumnName("Year_PlanSales");
            });

            modelBuilder.Entity<SalesanalysisYtd>(entity =>
            {
                entity.HasKey(e => e.InvCode)
                    .IsClustered(false);

                entity.ToTable("SALESANALYSIS_YTD");

                entity.HasIndex(e => e.InvCode, "INV_CODE")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.InvCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.CurLastYearYtdqtyPercentageChange).HasColumnName("Cur_LastYear_YTDQtyPercentageChange");

                entity.Property(e => e.CurPlanMonthQtyPercentageChange).HasColumnName("Cur_Plan_MonthQtyPercentageChange");

                entity.Property(e => e.CurPlanYtdqtyPercentageChange).HasColumnName("Cur_Plan_YTDQtyPercentageChange");

                entity.Property(e => e.CurPriorMonthQtyPercentageChange).HasColumnName("Cur_Prior_MonthQtyPercentageChange");

                entity.Property(e => e.CurrentYtdavgPrice).HasColumnName("CurrentYTDAvgPrice");

                entity.Property(e => e.CurrentYtdqty).HasColumnName("CurrentYTDQty");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.LastYearYtdavgPrice).HasColumnName("LastYearYTDAvgPrice");

                entity.Property(e => e.LastYearYtdqty).HasColumnName("LastYearYTDQty");

                entity.Property(e => e.Ytdplan).HasColumnName("YTDPlan");

                entity.Property(e => e.YtdsalesPercentageChange).HasColumnName("YTDSalesPercentageChange");

                entity.Property(e => e.YtdtotalCurrentYear).HasColumnName("YTDTotalCurrentYear");

                entity.Property(e => e.YtdtotalLastYear).HasColumnName("YTDTotalLastYear");
            });

            modelBuilder.Entity<SalesbudgetDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SALESBUDGET_DATA");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvSubgroupcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.MonthName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Salesyear).HasColumnName("SALESYEAR");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");
            });

            modelBuilder.Entity<Salesinventory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SALESINVENTORY");

                entity.HasIndex(e => e.InvCode, "Inv_Code")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Cost).HasColumnName("COST");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Inv_Code");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.QtyIssued).HasColumnName("Qty_Issued");

                entity.Property(e => e.QtyReturned).HasColumnName("Qty_Returned");

                entity.Property(e => e.Sgcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sgcode");

                entity.Property(e => e.Sgname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sgname");
            });

            modelBuilder.Entity<SalesinvoiceC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("salesinvoice_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<Saleskeydip>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SALESKEYDIP");

                entity.HasIndex(e => e.Printuser, "IX_SALESKEYDIP");

                entity.Property(e => e.CostAvgcostvalue)
                    .HasColumnName("COST_AVGCOSTVALUE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostLastcostvalue)
                    .HasColumnName("COST_LASTCOSTVALUE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CusCreditcategory)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CREDITCATEGORY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CusCuscategory)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CUSCATEGORY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CusName)
                    .HasMaxLength(500)
                    .HasColumnName("CUS_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CusPayterms)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_PAYTERMS")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CusPostcategory)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_POSTCATEGORY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CusRoute)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_ROUTE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CusSalesmen)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_SALESMEN")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CusTown)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_TOWN")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Datecrit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DATECRIT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvGroup)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_GROUP")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvManuf)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_MANUF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("INV_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvPackqty)
                    .HasColumnName("INV_PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvPhysical)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("INV_PHYSICAL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvStockclassif)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_STOCKCLASSIF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvStockform)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("INV_STOCKFORM")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvStockmainclass)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("INV_STOCKMAINCLASS")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvSubgroup)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUP")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Othercrit)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("OTHERCRIT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Printuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRINTUSER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalePw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SALE_PW")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalePwqty)
                    .HasColumnName("SALE_PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SaleQty)
                    .HasColumnName("SALE_QTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SaleValue)
                    .HasColumnName("SALE_VALUE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");
            });

            modelBuilder.Entity<Salesman>(entity =>
            {
                entity.HasKey(e => e.SalesCode)
                    .IsClustered(false);

                entity.ToTable("SALESMEN");

                entity.HasIndex(e => e.SalesCode, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales_Code");

                entity.Property(e => e.Daytarget)
                    .HasColumnName("DAYTARGET")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Scom)
                    .HasColumnName("SCOM")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<SalesmatrixDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SALESMATRIX_DATA");

                entity.HasIndex(e => e.CusCode, "CUS_CODE")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CusCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvSubgroupcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.MonthName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Salesyear).HasColumnName("SALESYEAR");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");
            });

            modelBuilder.Entity<SalesmenCustomer>(entity =>
            {
                entity.HasKey(e => new { e.CusCode, e.SalesCode })
                    .IsClustered(false);

                entity.ToTable("SALESMEN_CUSTOMERS");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALES_CODE");

                entity.Property(e => e.CusDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_DESC");
            });

            modelBuilder.Entity<SalesmenItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SALESMEN_ITEMS");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.SalesCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALES_CODE");
            });

            modelBuilder.Entity<SalesorderDt>(entity =>
            {
                entity.HasKey(e => e.SoDetNum);

                entity.ToTable("SALESORDER_DT");

                entity.HasIndex(e => e.SoDetNum, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SoNum, "ndxSoNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCode, "ndxTaxCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SoDetNum).HasColumnName("SO_DET_NUM");

                entity.Property(e => e.Bonus).HasColumnName("BONUS");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.DefLoc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DEF_LOC");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Detpending).HasColumnName("detpending");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Expiry)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY");

                entity.Property(e => e.GlAcct)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("GL_ACCT");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_CODE");

                entity.Property(e => e.ItemDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_DESC");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Metquantity).HasColumnName("METQUANTITY");

                entity.Property(e => e.PackQty).HasColumnName("PACK_QTY");

                entity.Property(e => e.Packqty1)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.PackqtyReceiving).HasColumnName("PACKQTY_RECEIVING");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Quantityused).HasColumnName("quantityused");

                entity.Property(e => e.ReceiveQty).HasColumnName("RECEIVE_QTY");

                entity.Property(e => e.Remquantity).HasColumnName("REMQUANTITY");

                entity.Property(e => e.SoNum).HasColumnName("SO_NUM");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.TaxAmt).HasColumnName("TAX_AMT");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.TempNum).HasColumnName("TEMP_NUM");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransferQty).HasColumnName("TRANSFER_QTY");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<SalesorderHd>(entity =>
            {
                entity.HasKey(e => e.SoNum)
                    .IsClustered(false);

                entity.ToTable("SALESORDER_HD");

                entity.HasIndex(e => e.SoNum, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Currencycode, "ndxCurrencyCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SoNumber, "ndxOrderNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SoDate, "ndxSoDate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SoNum)
                    .ValueGeneratedNever()
                    .HasColumnName("SO_NUM");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Cancelled).HasColumnName("CANCELLED");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.CsaleNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("csale_number");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Name");

                entity.Property(e => e.DocDestination)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.ExpDelivery)
                    .HasColumnType("datetime")
                    .HasColumnName("EXP_DELIVERY");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNO");

                entity.Property(e => e.Pending).HasColumnName("pending");

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sales_code");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.SoD).HasColumnName("SO_D");

                entity.Property(e => e.SoDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SO_DATE");

                entity.Property(e => e.SoNet).HasColumnName("SO_NET");

                entity.Property(e => e.SoNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("so_number");

                entity.Property(e => e.SoTotal).HasColumnName("so_total");

                entity.Property(e => e.SoVat).HasColumnName("SO_VAT");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Saletran>(entity =>
            {
                entity.HasKey(e => new { e.Docnum, e.Salesdocdetnum, e.Salesbcode, e.Modulecode });

                entity.ToTable("SALETRANS");

                entity.Property(e => e.Docnum).HasColumnName("DOCNUM");

                entity.Property(e => e.Salesdocdetnum).HasColumnName("SALESDOCDETNUM");

                entity.Property(e => e.Salesbcode).HasColumnName("SALESBCODE");

                entity.Property(e => e.Modulecode).HasColumnName("MODULECODE");

                entity.Property(e => e.Credcontcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CREDCONTCODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Credcontname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREDCONTNAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Crudmode)
                    .HasColumnName("crudmode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Crudorder).HasColumnName("crudorder");

                entity.Property(e => e.Cuscode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSCODE");

                entity.Property(e => e.Cusname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CUSNAME");

                entity.Property(e => e.Docamt)
                    .HasColumnName("DOCAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Docnumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCNUMBER");

                entity.Property(e => e.Docref)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCREF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Doctotalexc)
                    .HasColumnName("DOCTOTALEXC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Docuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCUSER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Docvat)
                    .HasColumnName("DOCVAT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Goodscost)
                    .HasColumnName("GOODSCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invoicetype)
                    .HasColumnName("INVOICETYPE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invoicetypename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INVOICETYPENAME");

                entity.Property(e => e.Itmcode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITMCODE");

                entity.Property(e => e.Itmname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ITMNAME");

                entity.Property(e => e.Itmpack)
                    .HasColumnName("ITMPACK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itmprice).HasColumnName("ITMPRICE");

                entity.Property(e => e.Itmtax).HasColumnName("ITMTAX");

                entity.Property(e => e.Itmtotalcost).HasColumnName("ITMTOTALCOST");

                entity.Property(e => e.Itmtotalexc)
                    .HasColumnName("ITMTOTALEXC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itmtotalinc)
                    .HasColumnName("ITMTOTALINC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahtocode)
                    .HasColumnName("kahtocode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mempointsbuy)
                    .HasColumnName("MEMPOINTSBUY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mempointsredeem)
                    .HasColumnName("MEMPOINTSREDEEM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Myperiod)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("MYPERIOD");

                entity.Property(e => e.Pw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PW")
                    .IsFixedLength(true);

                entity.Property(e => e.Qtysold)
                    .HasColumnName("QTYSOLD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Qtysoldpw)
                    .HasColumnName("QTYSOLDPW")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Routecode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ROUTECODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Routename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ROUTENAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Saledate)
                    .HasColumnType("datetime")
                    .HasColumnName("SALEDATE");

                entity.Property(e => e.Salesbranch)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SALESBRANCH");

                entity.Property(e => e.Salesman)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SALESman");

                entity.Property(e => e.SalesmanCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SALESmanCODE");

                entity.Property(e => e.Saletime).HasColumnName("SALETIME");

                entity.Property(e => e.Stockpw)
                    .HasColumnName("STOCKPW")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Towncode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TOWNCODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Townname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOWNNAME")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ScJournal>(entity =>
            {
                entity.HasKey(e => new { e.ScJDetnum, e.Bcode })
                    .HasName("PK_SC_JOURNALS_1");

                entity.ToTable("SC_JOURNALS");

                entity.Property(e => e.ScJDetnum).HasColumnName("SC_J_DETNUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.AwbDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AWB_DATE");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Batchnum).HasColumnName("batchnum");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ClearingDate).HasColumnType("datetime");

                entity.Property(e => e.Companyid)
                    .HasColumnName("companyid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Contrabcode)
                    .HasColumnName("contrabcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DatePosted)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Posted")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeptCode)
                    .HasColumnName("dept_code")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Doconhold)
                    .HasColumnName("DOCONHOLD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dontshow)
                    .HasColumnName("dontshow")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EmpNum)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("emp_num")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Empname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("empname")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("exch_rate")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Forexacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("forexacct");

                entity.Property(e => e.Forexentrynum)
                    .HasColumnName("forexentrynum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forexgl)
                    .HasColumnName("forexgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fromhistory)
                    .HasColumnName("FROMHISTORY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Frompayroll)
                    .HasColumnName("frompayroll")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("G_CODE");

                entity.Property(e => e.Gljrnnum)
                    .HasColumnName("GLJRNNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Jvtype).HasColumnName("JVTYPE");

                entity.Property(e => e.Loanacct)
                    .HasColumnName("loanacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loanalloc)
                    .HasColumnName("loanalloc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mpesaentryno)
                    .HasColumnName("MPESAENTRYNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mpesatransid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MPESATRANSID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mpickbcode)
                    .HasColumnName("MPICKBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mpickno)
                    .HasColumnName("MPICKNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mydocref)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MYDOCREF");

                entity.Property(e => e.Neowhvat)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("NEOWHVAT")
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.Neowhvatamt)
                    .HasColumnName("NEOWHVATAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Newamt).HasColumnName("NEWAMT");

                entity.Property(e => e.Noemployee)
                    .HasColumnName("noemployee")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Revdoc)
                    .HasColumnName("revdoc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ScJAmount).HasColumnName("SC_J_AMOUNT");

                entity.Property(e => e.ScJContra)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_CONTRA");

                entity.Property(e => e.ScJDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SC_J_DATE");

                entity.Property(e => e.ScJDc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_DC");

                entity.Property(e => e.ScJDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_DESC");

                entity.Property(e => e.ScJInclusive).HasColumnName("SC_J_INCLUSIVE");

                entity.Property(e => e.ScJName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_NAME");

                entity.Property(e => e.ScJRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_REF");

                entity.Property(e => e.ScJSc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_SC");

                entity.Property(e => e.ScJTax)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_TAX");

                entity.Property(e => e.Sflag)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sflag");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Suppcleared)
                    .HasColumnName("SUPPCLEARED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Suppclearingdate)
                    .HasColumnType("datetime")
                    .HasColumnName("SUPPCLEARINGDATE");

                entity.Property(e => e.Tillno)
                    .HasColumnName("tillno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillsessno)
                    .HasColumnName("TILLSESSNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Usin).HasColumnName("usin_");

                entity.Property(e => e.Whvat)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("WHVAT")
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.Whvatamt)
                    .HasColumnName("WHVATAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Whvatjrn)
                    .HasColumnName("whvatjrn")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Whvatperc)
                    .HasColumnName("whvatperc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ScJournalsclose>(entity =>
            {
                entity.HasKey(e => e.ScJDetnum)
                    .IsClustered(false);

                entity.ToTable("SC_JOURNALSCLOSE");

                entity.Property(e => e.ScJDetnum).HasColumnName("SC_J_DETNUM");

                entity.Property(e => e.AwbDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AWB_DATE");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Batchnum).HasColumnName("batchnum");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ClearingDate).HasColumnType("datetime");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DatePosted)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Posted")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dontshow)
                    .HasColumnName("dontshow")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("exch_rate")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Fromhistory)
                    .HasColumnName("FROMHISTORY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("G_CODE");

                entity.Property(e => e.Jvtype).HasColumnName("JVTYPE");

                entity.Property(e => e.Mydocref)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MYDOCREF");

                entity.Property(e => e.Newamt).HasColumnName("NEWAMT");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.ScJAmount).HasColumnName("SC_J_AMOUNT");

                entity.Property(e => e.ScJContra)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_CONTRA");

                entity.Property(e => e.ScJDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SC_J_DATE");

                entity.Property(e => e.ScJDc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_DC");

                entity.Property(e => e.ScJDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_DESC");

                entity.Property(e => e.ScJInclusive).HasColumnName("SC_J_INCLUSIVE");

                entity.Property(e => e.ScJName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_NAME");

                entity.Property(e => e.ScJRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_REF");

                entity.Property(e => e.ScJSc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_SC");

                entity.Property(e => e.ScJTax)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_TAX");

                entity.Property(e => e.Sflag)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sflag");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Usin).HasColumnName("usin_");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ScJournalsforex>(entity =>
            {
                entity.HasKey(e => e.ScJDetnum)
                    .IsClustered(false);

                entity.ToTable("SC_JOURNALSFOREX");

                entity.Property(e => e.ScJDetnum)
                    .ValueGeneratedNever()
                    .HasColumnName("SC_J_DETNUM");

                entity.Property(e => e.AwbDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AWB_DATE");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Batchnum).HasColumnName("batchnum");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ClearingDate).HasColumnType("datetime");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DatePosted)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Posted")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dontshow)
                    .HasColumnName("dontshow")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("exch_rate")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Fromhistory)
                    .HasColumnName("FROMHISTORY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Frompayroll)
                    .HasColumnName("frompayroll")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("G_CODE");

                entity.Property(e => e.Jvtype).HasColumnName("JVTYPE");

                entity.Property(e => e.Mydocref)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MYDOCREF");

                entity.Property(e => e.Newamt).HasColumnName("NEWAMT");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.ScJAmount).HasColumnName("SC_J_AMOUNT");

                entity.Property(e => e.ScJContra)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_CONTRA");

                entity.Property(e => e.ScJDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SC_J_DATE");

                entity.Property(e => e.ScJDc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_DC");

                entity.Property(e => e.ScJDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_DESC");

                entity.Property(e => e.ScJEntrynum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SC_J_ENTRYNUM");

                entity.Property(e => e.ScJInclusive).HasColumnName("SC_J_INCLUSIVE");

                entity.Property(e => e.ScJName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_NAME");

                entity.Property(e => e.ScJRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_REF");

                entity.Property(e => e.ScJSc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_SC");

                entity.Property(e => e.ScJTax)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_TAX");

                entity.Property(e => e.Sflag)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sflag");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Usin).HasColumnName("usin_");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ScJournalsrep>(entity =>
            {
                entity.HasKey(e => new { e.ScJDetnum, e.Bcode });

                entity.ToTable("SC_JOURNALSREP");

                entity.HasIndex(e => e.ScJDetnum, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ScJDetnum).HasColumnName("SC_J_DETNUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.AwbDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AWB_DATE");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Batchnum).HasColumnName("batchnum");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ClearingDate).HasColumnType("datetime");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DatePosted)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Posted")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dontshow)
                    .HasColumnName("dontshow")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("exch_rate")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Fromhistory)
                    .HasColumnName("FROMHISTORY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.GCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("G_CODE");

                entity.Property(e => e.Jvtype).HasColumnName("JVTYPE");

                entity.Property(e => e.Mydocref)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MYDOCREF");

                entity.Property(e => e.Newamt).HasColumnName("NEWAMT");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.ScJAmount).HasColumnName("SC_J_AMOUNT");

                entity.Property(e => e.ScJContra)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_CONTRA");

                entity.Property(e => e.ScJDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SC_J_DATE");

                entity.Property(e => e.ScJDc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_DC");

                entity.Property(e => e.ScJDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_DESC");

                entity.Property(e => e.ScJInclusive).HasColumnName("SC_J_INCLUSIVE");

                entity.Property(e => e.ScJName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_NAME");

                entity.Property(e => e.ScJRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_REF");

                entity.Property(e => e.ScJSc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_SC");

                entity.Property(e => e.ScJTax)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("SC_J_TAX");

                entity.Property(e => e.Sflag)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sflag");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Usin).HasColumnName("usin_");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<ScreditDt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SCREDIT_DT");

                entity.HasIndex(e => e.ScreditDetNum, "GRET_DET_NUM")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Adjustment).HasColumnName("adjustment");

                entity.Property(e => e.Applic).HasColumnName("APPLIC");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Dbatched).HasColumnName("dbatched");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Oldprice).HasColumnName("OLDPRICE");

                entity.Property(e => e.Oldtotalcost).HasColumnName("OLDTOTALCOST");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.ScreditDetNum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SCREDIT_DET_NUM");

                entity.Property(e => e.ScreditNum).HasColumnName("SCREDIT_NUM");

                entity.Property(e => e.SinvDetNum).HasColumnName("SINV_DET_NUM");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<ScreditHd>(entity =>
            {
                entity.HasKey(e => e.ScreditNum);

                entity.ToTable("SCREDIT_HD");

                entity.HasIndex(e => e.ScreditNum, "GRET_NUM")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ScreditNum)
                    .ValueGeneratedNever()
                    .HasColumnName("SCREDIT_NUM");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.ContNum).HasColumnName("CONT_NUM");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.ScreditD).HasColumnName("SCREDIT_D");

                entity.Property(e => e.ScreditDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SCREDIT_DATE");

                entity.Property(e => e.ScreditNet).HasColumnName("SCREDIT_NET");

                entity.Property(e => e.ScreditNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SCREDIT_number");

                entity.Property(e => e.ScreditTotal).HasColumnName("SCREDIT_TOTAL");

                entity.Property(e => e.ScreditVat).HasColumnName("SCREDIT_VAT");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.SinvNum).HasColumnName("SINV_NUM");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_REF");

                entity.Property(e => e.SuppRefS)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_REF_S");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Selcusin>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SELCUSIN");

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Selcusinbranch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SELCUSINBRANCH");

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<SelectedDoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SELECTED_DOCS");

                entity.HasIndex(e => new { e.DocNumber, e.DocType }, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CurrentUser, "ndxCurUser")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocNumber, "ndxDocNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocType, "ndxDocType")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CurrentUser)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DocNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Selpay>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("selpay");

                entity.Property(e => e.PayDetnum).HasColumnName("pay_detnum");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<Selrep>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("selrep");

                entity.Property(e => e.RptDetnum).HasColumnName("rpt_detnum");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<Selsistabranch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SELSISTABRANCH");

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Cussup)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSSUP")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Detnum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("detnum");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.Sel)
                    .HasColumnName("SEL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Selsistum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SELSISTA");

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Cussup)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSSUP")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Detnum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("detnum");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.ManufacturerCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.Sel)
                    .HasColumnName("SEL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Sheet1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sheet1$");

                entity.Property(e => e.Endperiod)
                    .HasColumnType("datetime")
                    .HasColumnName("ENDPERIOD");

                entity.Property(e => e.Period).HasColumnName("PERIOD");

                entity.Property(e => e.Startperiod)
                    .HasColumnType("datetime")
                    .HasColumnName("STARTPERIOD");
            });

            modelBuilder.Entity<Sinvuser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SINVUSERS");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SlorderDt>(entity =>
            {
                entity.HasKey(e => e.SloDetNum)
                    .IsClustered(false);

                entity.ToTable("SLORDER_DT");

                entity.HasIndex(e => new { e.SloNum, e.SloDetNum }, "PrimaryKey")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SloNum, "ndxQuoNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCode, "ndxTaxCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SloNum, e.Mylineno }, "ndxlastnum")
                    .IsUnique();

                entity.Property(e => e.SloDetNum).HasColumnName("SLO_DET_NUM");

                entity.Property(e => e.An).HasColumnName("AN");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Icode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ICODE");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Manuf)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("manuf");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.SloNum).HasColumnName("SLO_NUM");

                entity.Property(e => e.Strength)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("strength");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<SlorderHd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SLORDER_HD");

                entity.HasIndex(e => e.SloNum, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SloDate, "ndxQuoDate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Batched)
                    .HasColumnName("batched")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Comments)
                    .HasMaxLength(4000)
                    .HasColumnName("comments");

                entity.Property(e => e.ContName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cont_name");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.ExchRate).HasColumnName("EXCH_RATE");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("printcopy")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RemndNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REMND_NUMBER");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALES_CODE");

                entity.Property(e => e.Salesman)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SALESMAN");

                entity.Property(e => e.Selected).HasColumnName("selected");

                entity.Property(e => e.SloD).HasColumnName("SLO_D");

                entity.Property(e => e.SloDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SLO_DATE");

                entity.Property(e => e.SloExpiry)
                    .HasColumnType("datetime")
                    .HasColumnName("SLO_EXPIRY");

                entity.Property(e => e.SloNet).HasColumnName("SLO_NET");

                entity.Property(e => e.SloNum).HasColumnName("SLO_NUM");

                entity.Property(e => e.SloNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("SLO_number");

                entity.Property(e => e.SloTotal).HasColumnName("SLO_total");

                entity.Property(e => e.SloVat).HasColumnName("SLO_VAT");

                entity.Property(e => e.SoNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SO_NUMBER");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Sm200>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SM200");

                entity.Property(e => e.Admin1cell)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADMIN1CELL");

                entity.Property(e => e.Admin1country)
                    .HasMaxLength(255)
                    .HasColumnName("ADMIN1COUNTRY");

                entity.Property(e => e.Admin1name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ADMIN1NAME");

                entity.Property(e => e.Admin2cell)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADMIN2CELL");

                entity.Property(e => e.Admin2country)
                    .HasMaxLength(255)
                    .HasColumnName("ADMIN2COUNTRY");

                entity.Property(e => e.Admin2name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ADMIN2NAME");

                entity.Property(e => e.Admin3cell)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADMIN3CELL");

                entity.Property(e => e.Admin3country)
                    .HasMaxLength(255)
                    .HasColumnName("ADMIN3COUNTRY");

                entity.Property(e => e.Admin3name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ADMIN3NAME");

                entity.Property(e => e.Defcountry)
                    .HasMaxLength(255)
                    .HasColumnName("DEFCOUNTRY");

                entity.Property(e => e.Freetextid)
                    .HasColumnName("FREETEXTID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextsmsid)
                    .HasColumnName("NEXTSMSID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Otpkey).HasColumnName("OTPKEY");

                entity.Property(e => e.Smcompany)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SMCOMPANY")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.SmsbalanceAmount)
                    .HasColumnName("SMSbalanceAmount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SmsbalanceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SMSBalanceDate");

                entity.Property(e => e.TheApikey).HasColumnName("TheAPIKey");

                entity.Property(e => e.TheApikeyRaw)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TheAPIKeyRAW");

                entity.Property(e => e.TheSenderId).HasColumnName("TheSenderID");

                entity.Property(e => e.TheSmsbalance).HasColumnName("TheSMSBalance");

                entity.Property(e => e.TheSmscount).HasColumnName("TheSMSCount");

                entity.Property(e => e.TheSmsrate).HasColumnName("TheSMSRate");

                entity.Property(e => e.TheSmsresponsePath)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TheSMSResponsePath");
            });

            modelBuilder.Entity<Sm201>(entity =>
            {
                entity.HasKey(e => e.Areaid);

                entity.ToTable("SM201");

                entity.Property(e => e.Areaid)
                    .ValueGeneratedNever()
                    .HasColumnName("AREAID");

                entity.Property(e => e.Admin1)
                    .HasColumnName("ADMIN1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Admin2)
                    .HasColumnName("ADMIN2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Admin3)
                    .HasColumnName("ADMIN3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Areacs)
                    .HasColumnName("AREACS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Areaname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AREANAME");

                entity.Property(e => e.Areauser)
                    .HasColumnName("AREAUSER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashierlimit)
                    .HasColumnName("CASHIERLIMIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cshlimit)
                    .HasColumnName("CSHLIMIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Deactivate)
                    .HasColumnName("DEACTIVATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Smessage)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SMESSAGE");

                entity.Property(e => e.Snvlimit)
                    .HasColumnName("SNVLIMIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spvlimit)
                    .HasColumnName("SPVLIMIT")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Sm201import>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SM201IMPORT$");

                entity.Property(e => e.Areaid).HasColumnName("AREAID");

                entity.Property(e => e.Areaname)
                    .HasMaxLength(255)
                    .HasColumnName("AREANAME");

                entity.Property(e => e.Smessage)
                    .HasMaxLength(255)
                    .HasColumnName("SMESSAGE");
            });

            modelBuilder.Entity<Sm202>(entity =>
            {
                entity.HasKey(e => e.Transid);

                entity.ToTable("SM202");

                entity.Property(e => e.Transid)
                    .ValueGeneratedNever()
                    .HasColumnName("TRANSID");

                entity.Property(e => e.Areaid).HasColumnName("AREAID");

                entity.Property(e => e.Retdate)
                    .HasColumnType("datetime")
                    .HasColumnName("RETDATE");

                entity.Property(e => e.Retstatus)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("RETSTATUS");

                entity.Property(e => e.Smcontact)
                    .IsUnicode(false)
                    .HasColumnName("SMCONTACT");

                entity.Property(e => e.Smdatesent)
                    .HasColumnType("datetime")
                    .HasColumnName("SMDATESENT")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Smessage)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SMESSAGE");

                entity.Property(e => e.Smstatus).HasColumnName("SMSTATUS");
            });

            modelBuilder.Entity<Sm203>(entity =>
            {
                entity.HasKey(e => e.Smcountry);

                entity.ToTable("SM203");

                entity.Property(e => e.Smcountry)
                    .HasMaxLength(255)
                    .HasColumnName("SMCOUNTRY");

                entity.Property(e => e.Smcountrycode)
                    .HasMaxLength(255)
                    .HasColumnName("SMCOUNTRYCODE");
            });

            modelBuilder.Entity<Sm204>(entity =>
            {
                entity.HasKey(e => e.Limitkey);

                entity.ToTable("SM204");

                entity.Property(e => e.Limitkey)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LIMITKEY");

                entity.Property(e => e.Cashierlimit)
                    .HasColumnName("CASHIERLIMIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cshlimit)
                    .HasColumnName("CSHLIMIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Snvlimit)
                    .HasColumnName("SNVLIMIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spvlimit)
                    .HasColumnName("SPVLIMIT")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Sm205>(entity =>
            {
                entity.HasKey(e => e.Delimiter);

                entity.ToTable("SM205");

                entity.Property(e => e.Delimiter)
                    .HasMaxLength(255)
                    .HasColumnName("DELIMITER");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("DESCRIPTION");
            });

            modelBuilder.Entity<Sm206>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SM206");

                entity.Property(e => e.Cellcountry)
                    .HasMaxLength(255)
                    .HasColumnName("CELLCOUNTRY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cellname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CELLNAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cellnumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CELLNUMBER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cmsux)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CMSUX")
                    .IsFixedLength(true);

                entity.Property(e => e.Cscode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CSCODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Csname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CSNAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Entrynum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("entrynum");

                entity.Property(e => e.Freetextid).HasColumnName("FREETEXTID");

                entity.Property(e => e.Smessage)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SMESSAGE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.X0).HasDefaultValueSql("((0))");

                entity.Property(e => e.X120).HasDefaultValueSql("((0))");

                entity.Property(e => e.X30).HasDefaultValueSql("((0))");

                entity.Property(e => e.X60).HasDefaultValueSql("((0))");

                entity.Property(e => e.X90).HasDefaultValueSql("((0))");

                entity.Property(e => e.Xbalance)
                    .HasColumnName("XBALANCE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Smarttype>(entity =>
            {
                entity.HasKey(e => e.Smartid);

                entity.ToTable("SMARTTYPE");

                entity.Property(e => e.Smartid)
                    .ValueGeneratedNever()
                    .HasColumnName("SMARTID");

                entity.Property(e => e.Smartname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SMARTNAME");
            });

            modelBuilder.Entity<Smsdefault>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SMSDEFAULTS");

                entity.Property(e => e.Apikey)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("APIKey");

                entity.Property(e => e.SenderId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SenderID");

                entity.Property(e => e.SmsR).HasColumnName("SMS_R");

                entity.Property(e => e.Smscount).HasColumnName("SMSCOUNT");

                entity.Property(e => e.SmsuserName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SMSUSerName");
            });

            modelBuilder.Entity<Snv4t>(entity =>
            {
                entity.HasKey(e => e.Docdetnum1);

                entity.ToTable("SNV4T");

                entity.HasIndex(e => new { e.SaleinvNum, e.SaleinvDetNum, e.Bcode }, "IX_SNV4T");

                entity.Property(e => e.Docdetnum1).HasColumnName("DOCDETNUM");

                entity.Property(e => e.ActiveIngredient)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_INGREDIENT");

                entity.Property(e => e.AdultChild)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("adult_child")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Authorisecode)
                    .HasColumnName("authorisecode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Authorisedby)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("authorisedby");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BARCODE");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Bcodefrom).HasColumnName("BCODEFROM");

                entity.Property(e => e.Bcodeto).HasColumnName("BCODETO");

                entity.Property(e => e.Blocked)
                    .HasColumnName("BLOCKED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonpwqty)
                    .HasColumnName("bonpwqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonus)
                    .HasColumnName("bonus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BranchCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_CODE");

                entity.Property(e => e.CashDiscount)
                    .HasColumnName("cash_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CashinvoiceDiscount)
                    .HasColumnName("cashinvoice_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpaid)
                    .HasColumnName("cashpaid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashsaleinvoice)
                    .HasColumnName("cashsaleinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Clcoreclosed)
                    .HasColumnName("CLCORECLOSED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Clcoreclosedate)
                    .HasColumnType("datetime")
                    .HasColumnName("CLCORECLOSEDATE");

                entity.Property(e => e.Clcoredoc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CLCOREDOC")
                    .HasDefaultValueSql("('PHM')")
                    .IsFixedLength(true);

                entity.Property(e => e.Clvisit)
                    .HasColumnName("CLVISIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Comments)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.Copay)
                    .HasColumnName("copay")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Copaycuscode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("copaycuscode")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CopayinvBcode)
                    .HasColumnName("copayinv_bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CopayinvDetNum)
                    .HasColumnName("copayinv_det_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CopayinvNum)
                    .HasColumnName("copayinv_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Copayinvoice)
                    .HasColumnName("copayinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Copayreason)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("copayreason")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Costofsale)
                    .HasColumnName("costofsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Country)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.CusRef2)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cuspoints)
                    .HasColumnName("CUSPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.D1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d1");

                entity.Property(e => e.D2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d2");

                entity.Property(e => e.D3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d3");

                entity.Property(e => e.Deleted)
                    .HasColumnName("DELETED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DeliveryNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERY_NO");

                entity.Property(e => e.DeptCode)
                    .HasColumnName("dept_code")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.DocDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DOC_DATE");

                entity.Property(e => e.DocDetnum).HasColumnName("DOC_DETNUM");

                entity.Property(e => e.DocNum).HasColumnName("DOC_NUM");

                entity.Property(e => e.Doconhold)
                    .HasColumnName("DOCONHOLD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Documentnumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTNUMBER");

                entity.Property(e => e.EmpNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EMP_NUM");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("EXCH_RATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Excise)
                    .HasColumnName("excise")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Expiry)
                    .HasColumnType("datetime")
                    .HasColumnName("expiry");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.Forapproval)
                    .HasColumnName("forapproval")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GlTradeaccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_TRADEACCOUNT");

                entity.Property(e => e.GrpDescription)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("grpDESCRIPTION");

                entity.Property(e => e.IbiDetNum)
                    .HasColumnName("ibi_det_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inclusive)
                    .HasColumnName("inclusive")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InstkNum).HasColumnName("INSTK_NUM");

                entity.Property(e => e.Instkentryno).HasColumnName("INSTKENTRYNO");

                entity.Property(e => e.Insure).HasColumnName("insure");

                entity.Property(e => e.InvAvgcost).HasColumnName("INV_AVGCOST");

                entity.Property(e => e.InvBrandgeneric)
                    .HasColumnName("INV_BRANDGENERIC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvCostprice).HasColumnName("INV_COSTPRICE");

                entity.Property(e => e.InvGroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_GROUPCODE");

                entity.Property(e => e.InvItemcontents)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_ITEMCONTENTS");

                entity.Property(e => e.InvLastunitcost).HasColumnName("INV_LASTUNITCOST");

                entity.Property(e => e.InvMaxprice).HasColumnName("INV_MAXPRICE");

                entity.Property(e => e.InvMinprice).HasColumnName("INV_MINPRICE");

                entity.Property(e => e.InvNotes)
                    .HasMaxLength(500)
                    .HasColumnName("inv_notes")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvPhysicalitem)
                    .HasColumnName("INV_PHYSICALITEM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvRetailprice).HasColumnName("INV_RETAILPRICE");

                entity.Property(e => e.InvSpecialprice).HasColumnName("INV_SPECIALPRICE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvTradeprice).HasColumnName("INV_TRADEPRICE");

                entity.Property(e => e.InvUnit)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.InvoiceDiscount)
                    .HasColumnName("invoice_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invoicetype)
                    .HasColumnName("invoicetype")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Invtrack)
                    .HasColumnName("invtrack")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Itemavgcost)
                    .HasColumnName("itemavgcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemselectionDone).HasColumnName("ITEMSELECTION_DONE");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTUPDATE");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Lineimported)
                    .HasColumnName("LINEIMPORTED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.ManufC)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("manufC");

                entity.Property(e => e.ManufDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("manufDESCRIPTION");

                entity.Property(e => e.Manufacturer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER");

                entity.Property(e => e.ManufacturerCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNO");

                entity.Property(e => e.MiscCharges).HasColumnName("MISC_CHARGES");

                entity.Property(e => e.ModuleCode)
                    .HasColumnName("Module_Code")
                    .HasDefaultValueSql("((4))");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Newprice).HasColumnName("NEWPRICE");

                entity.Property(e => e.Newtotalcost).HasColumnName("NEWTOTALCOST");

                entity.Property(e => e.Noexpiry)
                    .HasColumnName("noexpiry")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OrdQuantity)
                    .HasColumnName("ord_quantity")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.PackQty1)
                    .HasColumnName("PACK_QTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGE_CODE");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Patdiag)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("patdiag")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.PorderinDetNum)
                    .HasColumnName("PORDERIN_DET_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Posted)
                    .HasColumnName("POSTED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PreGrn)
                    .IsRequired()
                    .HasColumnName("Pre_GRN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Priceincl)
                    .HasColumnName("priceincl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pricingmode)
                    .HasColumnName("pricingmode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Printcopy).HasColumnName("PRINTCOPY");

                entity.Property(e => e.Printtime)
                    .HasColumnType("datetime")
                    .HasColumnName("printtime");

                entity.Property(e => e.ProcCode)
                    .HasColumnName("PROC_CODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Prodclass)
                    .HasColumnName("prodclass")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Proditem)
                    .HasColumnName("proditem")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Promoitem)
                    .HasColumnName("promoitem")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ProvisionCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PROVISION_CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyLeft).HasColumnName("Qty_Left");

                entity.Property(e => e.QtyOrdered).HasColumnName("QTY_ORDERED");

                entity.Property(e => e.QtyOut).HasColumnName("QTY_OUT");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Redeemed)
                    .HasColumnName("REDEEMED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RemndNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REMND_NUMBER");

                entity.Property(e => e.Returned)
                    .HasColumnName("returned")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rfldate)
                    .HasColumnType("datetime")
                    .HasColumnName("RFLDATE");

                entity.Property(e => e.Rmdays)
                    .HasColumnName("RMDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rmtype)
                    .HasColumnName("RMTYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SaleinvD).HasColumnName("SALEINV_D");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SALEINV_DATE");

                entity.Property(e => e.SaleinvDetNum).HasColumnName("SALEINV_DET_NUM");

                entity.Property(e => e.SaleinvExcise)
                    .HasColumnName("saleinv_excise")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SaleinvNet).HasColumnName("SALEINV_NET");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.SaleinvRef)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SALEINV_REF");

                entity.Property(e => e.SaleinvTotal).HasColumnName("SALEINV_TOTAL");

                entity.Property(e => e.SaleinvVat).HasColumnName("SALEINV_VAT");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales_Code");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Sbcode)
                    .HasColumnName("sbcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SbgrpDescription)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sbgrpDESCRIPTION");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.Smartbalanceinv)
                    .HasColumnName("smartbalanceinv")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Smartid)
                    .HasColumnName("SMARTID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Smartinvoice)
                    .HasColumnName("smartinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Smartreason)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("smartreason")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Smartstatus)
                    .HasColumnName("smartstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Snvupdatenum)
                    .HasColumnName("SNVUPDATENUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SoDetNum)
                    .HasColumnName("SO_DET_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StkBcode)
                    .HasColumnName("stkBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StkDescription)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("stkDESCRIPTION");

                entity.Property(e => e.StkInvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("stkINV_CODE");

                entity.Property(e => e.StkInvStrength)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("stkINV_STRENGTH")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.StkModuleCode).HasColumnName("stkMODULE_CODE");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.StkPackqty)
                    .HasColumnName("stkPACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StkPwqty)
                    .HasColumnName("stkPWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StkStkNum).HasColumnName("stkSTK_NUM");

                entity.Property(e => e.StkTaxCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stkTAX_CODE")
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.StkUsername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("stkUSERNAME");

                entity.Property(e => e.Stkentryno).HasColumnName("STKENTRYNO");

                entity.Property(e => e.Stkpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("stkpartwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Stkref)
                    .HasColumnName("STKREF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stksavetime)
                    .HasColumnType("datetime")
                    .HasColumnName("stksavetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Taken)
                    .HasColumnName("taken")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxAmt).HasColumnName("TAX_AMT");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Tillno)
                    .HasColumnName("TILLNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillsessno)
                    .HasColumnName("TILLSESSNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tltsweight)
                    .HasColumnName("tltsweight")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.Totrecs).HasColumnName("TOTRECS");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TranspCharge).HasColumnName("transp_charge");

                entity.Property(e => e.TranspCode).HasColumnName("transp_code");

                entity.Property(e => e.TransportVat).HasColumnName("TRANSPORT_VAT");

                entity.Property(e => e.Tsweight)
                    .HasColumnName("tsweight")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TtlWeight)
                    .HasColumnName("ttl_weight")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.Property(e => e.UnitQty).HasColumnName("UNIT_QTY");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime");

                entity.Property(e => e.Urgent)
                    .HasColumnName("urgent")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.W1).HasColumnName("w1");

                entity.Property(e => e.W2).HasColumnName("w2");

                entity.Property(e => e.WaybillNum).HasColumnName("waybill_num");

                entity.Property(e => e.Weborder)
                    .HasColumnName("weborder")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.WebquoDetNum)
                    .HasColumnName("webquo_det_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Snvin>(entity =>
            {
                entity.HasKey(e => new { e.SaleinvDetNum, e.Bcode })
                    .HasName("IX_SNVIN_CRUD");

                entity.ToTable("SNVIN");

                entity.HasIndex(e => e.Documentnumber, "ndxDocNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SaleinvNum, "ndxSaleInvNum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCode, "ndxTaxCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SaleinvDetNum).HasColumnName("SALEINV_DET_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.AdultChild)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("adult_child")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Authorisecode)
                    .HasColumnName("authorisecode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonpwqty)
                    .HasColumnName("bonpwqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonus)
                    .HasColumnName("bonus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Clcoredoc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CLCOREDOC")
                    .HasDefaultValueSql("('PHM')")
                    .IsFixedLength(true);

                entity.Property(e => e.Clvisit)
                    .HasColumnName("CLVISIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Copay)
                    .HasColumnName("copay")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Copaycuscode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("copaycuscode")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CopayinvBcode)
                    .HasColumnName("copayinv_bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CopayinvDetNum)
                    .HasColumnName("copayinv_det_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CopayinvNum)
                    .HasColumnName("copayinv_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Copayreason)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("copayreason")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Costofsale)
                    .HasColumnName("costofsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.D1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d1");

                entity.Property(e => e.D2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d2");

                entity.Property(e => e.D3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d3");

                entity.Property(e => e.DeliveryNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERY_NO");

                entity.Property(e => e.DeptCode)
                    .HasColumnName("dept_code")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Documentnumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTNUMBER");

                entity.Property(e => e.EmpNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EMP_NUM");

                entity.Property(e => e.Excise)
                    .HasColumnName("excise")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Expiry)
                    .HasColumnType("datetime")
                    .HasColumnName("expiry");

                entity.Property(e => e.IbiDetNum)
                    .HasColumnName("ibi_det_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inclusive)
                    .HasColumnName("inclusive")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.Itemavgcost)
                    .HasColumnName("itemavgcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.ManufC)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("manufC");

                entity.Property(e => e.ModuleCode)
                    .HasColumnName("Module_Code")
                    .HasDefaultValueSql("((4))");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Newprice).HasColumnName("NEWPRICE");

                entity.Property(e => e.Newtotalcost).HasColumnName("NEWTOTALCOST");

                entity.Property(e => e.OrdQuantity)
                    .HasColumnName("ord_quantity")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PorderinDetNum)
                    .HasColumnName("PORDERIN_DET_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PreGrn)
                    .IsRequired()
                    .HasColumnName("Pre_GRN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Priceincl)
                    .HasColumnName("priceincl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcCode)
                    .HasColumnName("PROC_CODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Promoitem)
                    .HasColumnName("promoitem")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyLeft).HasColumnName("Qty_Left");

                entity.Property(e => e.QtyOrdered).HasColumnName("QTY_ORDERED");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Returned)
                    .HasColumnName("returned")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rfldate)
                    .HasColumnType("datetime")
                    .HasColumnName("RFLDATE");

                entity.Property(e => e.Rmdays)
                    .HasColumnName("RMDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rmtype)
                    .HasColumnName("RMTYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.Sbcode)
                    .HasColumnName("sbcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Snvupdatenum)
                    .HasColumnName("SNVUPDATENUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SoDetNum)
                    .HasColumnName("SO_DET_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Taken)
                    .HasColumnName("taken")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxAmt).HasColumnName("TAX_AMT");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Tsweight)
                    .HasColumnName("tsweight")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.Property(e => e.W1).HasColumnName("w1");

                entity.Property(e => e.W2).HasColumnName("w2");

                entity.Property(e => e.WebquoDetNum)
                    .HasColumnName("webquo_det_num")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Snvinhd>(entity =>
            {
                entity.HasKey(e => new { e.SaleinvNum, e.Bcode })
                    .HasName("IX_SNVINHD_CRUD")
                    .IsClustered(false);

                entity.ToTable("SNVINHD");

                entity.HasIndex(e => e.CusCode, "ndxCusCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CusRef, "ndxCusRef")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SaleinvDate, e.Batched }, "ndxSaleDate")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SaleinvNumber, "ndxSaleInvNumber")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Amounttopay).HasColumnName("AMOUNTTOPAY");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Authorisedby)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("authorisedby");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BranchCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_CODE");

                entity.Property(e => e.Cashpaid)
                    .HasColumnName("cashpaid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashsaleinvoice)
                    .HasColumnName("cashsaleinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Clcoreclosed)
                    .HasColumnName("CLCORECLOSED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Clcoreclosedate)
                    .HasColumnType("datetime")
                    .HasColumnName("CLCORECLOSEDATE");

                entity.Property(e => e.Clcoredoc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CLCOREDOC")
                    .HasDefaultValueSql("('PHM')")
                    .IsFixedLength(true);

                entity.Property(e => e.Clvisit)
                    .HasColumnName("CLVISIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Comments)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.CopayinvBcode)
                    .HasColumnName("copayinv_bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CopayinvNum)
                    .HasColumnName("copayinv_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Copayinvoice)
                    .HasColumnName("copayinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.CusRef2)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cuspoints)
                    .HasColumnName("CUSPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Doconhold)
                    .HasColumnName("DOCONHOLD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("EXCH_RATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Forapproval)
                    .HasColumnName("forapproval")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GlTradeaccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_TRADEACCOUNT");

                entity.Property(e => e.Insure).HasColumnName("insure");

                entity.Property(e => e.Invoicetype)
                    .HasColumnName("invoicetype")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Invtrack)
                    .HasColumnName("invtrack")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemselectionDone).HasColumnName("ITEMSELECTION_DONE");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTUPDATE");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNO");

                entity.Property(e => e.MiscCharges).HasColumnName("MISC_CHARGES");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.Patdiag)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("patdiag")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Paying).HasColumnName("paying");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Pricingmode)
                    .HasColumnName("pricingmode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Printcopy).HasColumnName("PRINTCOPY");

                entity.Property(e => e.Printtime)
                    .HasColumnType("datetime")
                    .HasColumnName("printtime");

                entity.Property(e => e.Redeemed)
                    .HasColumnName("REDEEMED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RemndNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REMND_NUMBER");

                entity.Property(e => e.Rfldate)
                    .HasColumnType("datetime")
                    .HasColumnName("RFLDATE");

                entity.Property(e => e.SaleinvD).HasColumnName("SALEINV_D");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SALEINV_DATE");

                entity.Property(e => e.SaleinvExcise)
                    .HasColumnName("saleinv_excise")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SaleinvNet).HasColumnName("SALEINV_NET");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("SALEINV_NUMBER");

                entity.Property(e => e.SaleinvRef)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SALEINV_REF");

                entity.Property(e => e.SaleinvTotal).HasColumnName("SALEINV_TOTAL");

                entity.Property(e => e.SaleinvVat).HasColumnName("SALEINV_VAT");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales_Code");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Sbcode)
                    .HasColumnName("sbcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.Smartbalanceinv)
                    .HasColumnName("smartbalanceinv")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Smartid)
                    .HasColumnName("SMARTID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Smartinvoice)
                    .HasColumnName("smartinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Smartreason)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("smartreason")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Smartstatus)
                    .HasColumnName("smartstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Snvupdatenum)
                    .HasColumnName("SNVUPDATENUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillno)
                    .HasColumnName("TILLNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillsessno)
                    .HasColumnName("TILLSESSNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tltsweight)
                    .HasColumnName("tltsweight")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.TranspCharge).HasColumnName("transp_charge");

                entity.Property(e => e.TranspCode).HasColumnName("transp_code");

                entity.Property(e => e.TransportVat).HasColumnName("TRANSPORT_VAT");

                entity.Property(e => e.TtlWeight)
                    .HasColumnName("ttl_weight")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime");

                entity.Property(e => e.Urgent)
                    .HasColumnName("urgent")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WaybillNum).HasColumnName("waybill_num");

                entity.Property(e => e.Weborder)
                    .HasColumnName("weborder")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SpCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SP_CATEGORY");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.SpcatgCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_CODE");

                entity.Property(e => e.SpcatgGl)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_GL");

                entity.Property(e => e.SpcatgName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_NAME");
            });

            modelBuilder.Entity<Spcategory1>(entity =>
            {
                entity.HasKey(e => e.SpcatgCode);

                entity.ToTable("SPCATEGORY");

                entity.Property(e => e.SpcatgCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_CODE");

                entity.Property(e => e.SpcatgGl)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_GL");

                entity.Property(e => e.SpcatgName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_NAME");
            });

            modelBuilder.Entity<Spprice>(entity =>
            {
                entity.HasKey(e => new { e.SuppCode, e.InvCode })
                    .HasName("PK_SPPRICE_1");

                entity.ToTable("SPPRICE");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Bonus).HasColumnName("BONUS");

                entity.Property(e => e.Bonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BONUSPW");

                entity.Property(e => e.Discexpirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISCEXPIRYDATE");

                entity.Property(e => e.Discmode)
                    .HasColumnName("DISCMODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Disctype)
                    .HasColumnName("DISCTYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spbonus).HasColumnName("SPBONUS");

                entity.Property(e => e.Spbonuspw)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SPBONUSPW");

                entity.Property(e => e.Spdiscount)
                    .HasColumnName("SPDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppriceamt)
                    .HasColumnName("SPPRICEAMT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppriceapply)
                    .HasColumnName("SPPRICEAPPLY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppriceentrynum)
                    .HasColumnName("SPPRICEENTRYNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppwqty)
                    .HasColumnName("SPPWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tradeprice)
                    .HasColumnName("TRADEPRICE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StatementPeriod>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STATEMENT_PERIODS");

                entity.Property(e => e.Enddate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENDDATE");

                entity.Property(e => e.Ey)
                    .HasColumnName("EY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Leapenddate)
                    .HasColumnType("datetime")
                    .HasColumnName("LEAPENDDATE");

                entity.Property(e => e.Leapy)
                    .HasColumnName("LEAPY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Period)
                    .HasMaxLength(10)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Prplace).HasColumnName("PRPLACE");

                entity.Property(e => e.Startdate)
                    .HasColumnType("datetime")
                    .HasColumnName("STARTDATE");

                entity.Property(e => e.Sy)
                    .HasColumnName("SY")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<StatementPeriodssupp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STATEMENT_PERIODSSUPP");

                entity.Property(e => e.Enddate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENDDATE");

                entity.Property(e => e.Ey)
                    .HasColumnName("EY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Leapenddate)
                    .HasColumnType("datetime")
                    .HasColumnName("LEAPENDDATE");

                entity.Property(e => e.Leapy)
                    .HasColumnName("LEAPY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Period)
                    .HasMaxLength(10)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Prplace).HasColumnName("PRPLACE");

                entity.Property(e => e.Startdate)
                    .HasColumnType("datetime")
                    .HasColumnName("STARTDATE");

                entity.Property(e => e.Sy)
                    .HasColumnName("SY")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Statute>(entity =>
            {
                entity.HasKey(e => e.Payyear);

                entity.ToTable("STATUTES");

                entity.Property(e => e.Payyear)
                    .ValueGeneratedNever()
                    .HasColumnName("PAYYEAR");

                entity.Property(e => e.Daysperweek).HasColumnName("DAYSPERWEEK");

                entity.Property(e => e.Hoursperday).HasColumnName("HOURSPERDAY");

                entity.Property(e => e.Insurerelief).HasColumnName("INSURERELIEF");

                entity.Property(e => e.Loanintco)
                    .HasColumnName("loanintco")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loanintgov)
                    .HasColumnName("loanintgov")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Loanintlow)
                    .HasColumnName("loanintlow")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Maxadvanceperiod)
                    .HasColumnName("maxadvanceperiod")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Maxloanperiod)
                    .HasColumnName("maxloanperiod")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Maxloans)
                    .HasColumnName("maxloans")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.Nssfrate).HasColumnName("NSSFRATE");

                entity.Property(e => e.Otmode).HasColumnName("OTMODE");

                entity.Property(e => e.Taxrelief).HasColumnName("TAXRELIEF");
            });

            modelBuilder.Entity<Stktake>(entity =>
            {
                entity.HasKey(e => e.Stkref);

                entity.ToTable("STKTAKE");

                entity.HasIndex(e => e.Stkdate, "IX_STKTAKE");

                entity.Property(e => e.Stkref)
                    .ValueGeneratedNever()
                    .HasColumnName("STKREF");

                entity.Property(e => e.Batched)
                    .HasColumnName("batched")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Stkcount)
                    .HasColumnName("STKCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("STKDATE");

                entity.Property(e => e.Stkstatus)
                    .HasColumnName("STKSTATUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stkupdatemode)
                    .HasColumnName("STKUPDATEMODE")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Stktakeinvsubgroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STKTAKEINVSUBGROUP");

                entity.HasIndex(e => e.InvSubgroupcode, "IX_STKTAKEINVSUBGROUP")
                    .IsClustered();

                entity.HasIndex(e => new { e.Stkref, e.InvSubgroupcode, e.Bcode }, "IX_STKTAKEINVSUBGROUP_1")
                    .IsUnique();

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Doctype)
                    .HasColumnName("DOCTYPE")
                    .HasDefaultValueSql("((3))");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.Stkref).HasColumnName("STKREF");
            });

            modelBuilder.Entity<Stktakeuser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STKTAKEUSER");

                entity.HasIndex(e => e.Stockuser, "IX_STKTAKEUSER")
                    .IsClustered();

                entity.HasIndex(e => new { e.Stkref, e.Stockuser, e.Bcode }, "IX_STKTAKEUSER_1")
                    .IsUnique();

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Stkref).HasColumnName("STKREF");

                entity.Property(e => e.Stockuser)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STOCKUSER");
            });

            modelBuilder.Entity<Stktrin>(entity =>
            {
                entity.HasKey(e => new { e.StkNum, e.Stkentryno, e.Bcode });

                entity.ToTable("STKTRIN");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Stkentryno).HasColumnName("STKENTRYNO");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Bcodeto)
                    .HasColumnName("BCODETO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DocDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DOC_DATE");

                entity.Property(e => e.DocDetnum).HasColumnName("DOC_DETNUM");

                entity.Property(e => e.DocNum).HasColumnName("DOC_NUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.OutstkNum).HasColumnName("OUTSTK_NUM");

                entity.Property(e => e.Outstkentryno).HasColumnName("OUTSTKENTRYNO");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Posted)
                    .HasColumnName("POSTED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyBal)
                    .HasColumnName("QTY_BAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyIn).HasColumnName("QTY_IN");

                entity.Property(e => e.QtyOut).HasColumnName("QTY_OUT");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Stkref)
                    .HasColumnName("STKREF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Stktroutin>(entity =>
            {
                entity.HasKey(e => new { e.StkNum, e.Stkentryno, e.Bcode });

                entity.ToTable("STKTROUTIN");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Stkentryno).HasColumnName("STKENTRYNO");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Bcodeto)
                    .HasColumnName("BCODETO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DocDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DOC_DATE");

                entity.Property(e => e.DocDetnum).HasColumnName("DOC_DETNUM");

                entity.Property(e => e.DocNum).HasColumnName("DOC_NUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InstkNum).HasColumnName("INSTK_NUM");

                entity.Property(e => e.Instkentryno).HasColumnName("INSTKENTRYNO");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Posted)
                    .HasColumnName("POSTED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyOut).HasColumnName("QTY_OUT");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Stkref)
                    .HasColumnName("STKREF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<StockAdjustment>(entity =>
            {
                entity.HasKey(e => new { e.Nxtstkadj, e.Bcode })
                    .HasName("IX_STOCK_ADJUSTMENT_CRUD");

                entity.ToTable("STOCK_ADJUSTMENT");

                entity.Property(e => e.Nxtstkadj).HasColumnName("NXTSTKADJ");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.DatePosted)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Posted");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("inv_CODE");

                entity.Property(e => e.InvJContra)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inv_J_CONTRA");

                entity.Property(e => e.InvJCost).HasColumnName("inv_J_cost");

                entity.Property(e => e.InvJDate)
                    .HasColumnType("datetime")
                    .HasColumnName("inv_J_DATE");

                entity.Property(e => e.InvJDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_J_DESC");

                entity.Property(e => e.InvJDetnum).HasColumnName("inv_J_DETNUM");

                entity.Property(e => e.InvJIo)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("inv_J_io");

                entity.Property(e => e.InvJName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_J_NAME");

                entity.Property(e => e.InvJOrderref)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("inv_j_orderref");

                entity.Property(e => e.InvJQty).HasColumnName("inv_J_qty");

                entity.Property(e => e.InvJRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_J_REF");

                entity.Property(e => e.InvJTvalue).HasColumnName("inv_J_tvalue");

                entity.Property(e => e.Oldcost).HasColumnName("OLDCOST");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Stkref)
                    .HasColumnName("STKREF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("username")
                    .HasDefaultValueSql("('-')");
            });

            modelBuilder.Entity<Stockactivity>(entity =>
            {
                entity.HasKey(e => new { e.Periodnum, e.Username });

                entity.ToTable("STOCKACTIVITY");

                entity.Property(e => e.Periodnum).HasColumnName("PERIODNUM");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Adjqty)
                    .HasColumnName("ADJQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Avgcost)
                    .HasColumnName("AVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_code");

                entity.Property(e => e.InvName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_name");

                entity.Property(e => e.InvPack).HasColumnName("inv_pack");

                entity.Property(e => e.LastsaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTSALEINV_DATE");

                entity.Property(e => e.LastsinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTSINV_DATE");

                entity.Property(e => e.Onhandqty)
                    .HasColumnName("ONHANDQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Periodmonthname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PERIODMONTHNAME");

                entity.Property(e => e.Periodmonthnum).HasColumnName("PERIODMONTHNUM");

                entity.Property(e => e.Periodyear).HasColumnName("PERIODYEAR");

                entity.Property(e => e.Purchqty)
                    .HasColumnName("PURCHQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Salesqty)
                    .HasColumnName("SALESQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Salesvalue).HasColumnName("SALESVALUE");
            });

            modelBuilder.Entity<Stockbalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STOCKBALANCE");

                entity.HasIndex(e => e.BatchNum, "batch_num")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Area)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("batch_num");

                entity.Property(e => e.CustomerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DocNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Entryno).HasColumnName("ENTRYNO");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.QtyIn).HasColumnName("QTY_IN");

                entity.Property(e => e.QtyOut).HasColumnName("QTY_OUT");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");
            });

            modelBuilder.Entity<Stockskeydip>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STOCKSKEYDIP");

                entity.Property(e => e.Branchid).HasColumnName("BRANCHID");

                entity.Property(e => e.Branchname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CostAvgcostvalue)
                    .HasColumnName("COST_AVGCOSTVALUE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostLastcostvalue)
                    .HasColumnName("COST_LASTCOSTVALUE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Datecrit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DATECRIT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvGroup)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_GROUP")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvManuf)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_MANUF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("INV_NAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvPackqty)
                    .HasColumnName("INV_PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvPhysical)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("INV_PHYSICAL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvStockclassif)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_STOCKCLASSIF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvStockform)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("INV_STOCKFORM")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvStockmainclass)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("INV_STOCKMAINCLASS")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvSubgroup)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUP")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Othercrit)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("OTHERCRIT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Printuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRINTUSER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StockPw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STOCK_PW")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StockPwqty)
                    .HasColumnName("STOCK_PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StockQty)
                    .HasColumnName("STOCK_QTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StockValue)
                    .HasColumnName("STOCK_VALUE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");
            });

            modelBuilder.Entity<Stocktakeneo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STOCKTAKENEO");

                entity.Property(e => e.Bcode)
                    .HasColumnName("BCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");

                entity.Property(e => e.Fastmoving)
                    .HasColumnName("fastmoving")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Highvalue)
                    .HasColumnName("highvalue")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InStkPw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("InStkPW");

                entity.Property(e => e.InStkUnits).HasDefaultValueSql("((0))");

                entity.Property(e => e.InvSubgroupcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.Itemcode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ITEMCODE");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGE_CODE");

                entity.Property(e => e.PkSz).HasDefaultValueSql("((1))");

                entity.Property(e => e.Userdataid).HasColumnName("userdataid");
            });

            modelBuilder.Entity<Stocktemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STOCKTEMP");

                entity.HasIndex(e => e.BatchNum, "BATCH_NUM")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM");

                entity.Property(e => e.CompQty).HasColumnName("COMP_QTY");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.StockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOCK_DATE");

                entity.Property(e => e.StockQty).HasColumnName("STOCK_QTY");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UPDATEUSER");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Stocktran>(entity =>
            {
                entity.HasKey(e => new { e.StkNum, e.Stkentryno });

                entity.ToTable("STOCKTRANS");

                entity.HasIndex(e => new { e.StkNum, e.ModuleCode }, "xdelstocks");

                entity.HasIndex(e => new { e.StkNum, e.ModuleCode, e.InvCode }, "xupdatestocks");

                entity.HasIndex(e => new { e.ModuleCode, e.Username }, "xuserstocks");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Stkentryno)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STKENTRYNO");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Bcode)
                    .HasColumnName("BCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DocDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DOC_DATE");

                entity.Property(e => e.DocDetnum).HasColumnName("DOC_DETNUM");

                entity.Property(e => e.DocNum).HasColumnName("DOC_NUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.OutstkNum).HasColumnName("OUTSTK_NUM");

                entity.Property(e => e.Outstkentryno).HasColumnName("OUTSTKENTRYNO");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Posted)
                    .HasColumnName("POSTED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyBal)
                    .HasColumnName("QTY_BAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyIn).HasColumnName("QTY_IN");

                entity.Property(e => e.QtyOut).HasColumnName("QTY_OUT");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Stkref)
                    .HasColumnName("STKREF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Stocktransout>(entity =>
            {
                entity.HasKey(e => new { e.StkNum, e.Stkentryno });

                entity.ToTable("STOCKTRANSOUT");

                entity.HasIndex(e => new { e.StkNum, e.ModuleCode }, "xdelstock");

                entity.HasIndex(e => new { e.StkNum, e.ModuleCode, e.InvCode }, "xgetstock");

                entity.HasIndex(e => new { e.DocNum, e.Username }, "xuserstock");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Stkentryno)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STKENTRYNO");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Bcode)
                    .HasColumnName("BCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DocDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DOC_DATE");

                entity.Property(e => e.DocDetnum).HasColumnName("DOC_DETNUM");

                entity.Property(e => e.DocNum).HasColumnName("DOC_NUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InstkNum).HasColumnName("INSTK_NUM");

                entity.Property(e => e.Instkentryno).HasColumnName("INSTKENTRYNO");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Posted)
                    .HasColumnName("POSTED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyOut).HasColumnName("QTY_OUT");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Stkref)
                    .HasColumnName("STKREF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Stocktranstemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STOCKTRANSTEMP");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.DocDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DOC_DATE");

                entity.Property(e => e.DocDetnum).HasColumnName("DOC_DETNUM");

                entity.Property(e => e.DocNum).HasColumnName("DOC_NUM");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.Posted)
                    .HasColumnName("POSTED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.QtyIn).HasColumnName("QTY_IN");

                entity.Property(e => e.QtyOut).HasColumnName("QTY_OUT");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Stkentryno)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STKENTRYNO");
            });

            modelBuilder.Entity<SuppContact>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SUPP_CONTACTS");

                entity.HasIndex(e => e.ContNum, "CONT_NUM")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Cellphone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CELLPHONE");

                entity.Property(e => e.ContNum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CONT_NUM");

                entity.Property(e => e.Contact)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Fax)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.Phyaddress)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHYADDRESS");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TELEPHONE");
            });

            modelBuilder.Entity<SuppDiscount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SUPP_DISCOUNTS");

                entity.HasIndex(e => new { e.SuppCode, e.InvCode, e.DiscountCode, e.Worthqty }, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Expirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRYDATE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.SdiscNum).HasColumnName("SDISC_NUM");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Worthqty).HasColumnName("WORTHQTY");
            });

            modelBuilder.Entity<SuppItem>(entity =>
            {
                entity.HasKey(e => new { e.SuppCode, e.InvCode })
                    .IsClustered(false);

                entity.ToTable("SUPP_ITEMS");

                entity.HasIndex(e => new { e.SuppCode, e.InvCode }, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SuppCode, "ndxSuppCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.DiscountAvailable)
                    .HasColumnName("discount_available")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InvCode1)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE1");

                entity.Property(e => e.LastOrdered)
                    .HasColumnName("LAST_ORDERED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Lastdiscount)
                    .HasColumnName("LASTDISCOUNT")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Lastprice)
                    .HasColumnName("LASTPRICE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PreferredPrice)
                    .HasColumnName("PREFERRED_PRICE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Price)
                    .HasColumnName("PRICE")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<SuppItemscore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("supp_itemscore");

                entity.Property(e => e.DiscountAvailable).HasColumnName("discount_available");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvCode1)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE1");

                entity.Property(e => e.InvCode2)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE2");

                entity.Property(e => e.LastOrdered).HasColumnName("LAST_ORDERED");

                entity.Property(e => e.Lastdiscount).HasColumnName("LASTDISCOUNT");

                entity.Property(e => e.Lastprice).HasColumnName("LASTPRICE");

                entity.Property(e => e.PreferredPrice).HasColumnName("PREFERRED_PRICE");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");
            });

            modelBuilder.Entity<SuppRuntotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SUPP_RUNTOTALS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idkey)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDKEY");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_Code");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_date");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<SuppStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SUPP_STATEMENT");

                entity.HasIndex(e => new { e.Username, e.SuppCode }, "XSUPPUSER")
                    .IsClustered();

                entity.HasIndex(e => e.Username, "ndxuser");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Bfwd).HasColumnName("BFWD");

                entity.Property(e => e.Credit).HasColumnName("CREDIT");

                entity.Property(e => e.Debit).HasColumnName("DEBIT");

                entity.Property(e => e.Description)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Display)
                    .HasColumnName("display")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Docbal)
                    .HasColumnName("docbal")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("EXCH_RATE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Indexno).HasColumnName("INDEXNO");

                entity.Property(e => e.Ref)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("REF");

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");

                entity.Property(e => e.TransType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANS_TYPE");

                entity.Property(e => e.Unallocated)
                    .HasColumnName("UNALLOCATED")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Suppcheck2008>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("suppcheck2008");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("supp_code");
            });

            modelBuilder.Entity<SuppinvDt>(entity =>
            {
                entity.HasKey(e => new { e.SinvNum, e.Bcode, e.SinvDetNum })
                    .HasName("IX_SUPPINV_DT_CRUD");

                entity.ToTable("SUPPINV_DT");

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCode, "ndxTaxCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SinvNum, "ndxsInvNum")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SinvNum).HasColumnName("SINV_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.SinvDetNum).HasColumnName("SINV_DET_NUM");

                entity.Property(e => e.Bonus).HasColumnName("bonus");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Costfactor)
                    .HasColumnName("costfactor")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DeptCode)
                    .HasColumnName("dept_code")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Detpending).HasColumnName("detpending");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Excise)
                    .HasColumnName("excise")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inclusive)
                    .HasColumnName("inclusive")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Metquantity).HasColumnName("metquantity");

                entity.Property(e => e.ModuleCode)
                    .HasColumnName("Module_Code")
                    .HasDefaultValueSql("((12))");

                entity.Property(e => e.Mylineno).HasColumnName("mylineno");

                entity.Property(e => e.OrdQuantity).HasColumnName("ord_quantity");

                entity.Property(e => e.Ordered).HasColumnName("ORDERED");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PorderDetNum).HasColumnName("PORDER_DET_NUM");

                entity.Property(e => e.PreGrn)
                    .IsRequired()
                    .HasColumnName("Pre_GRN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PreferredPrice).HasColumnName("Preferred_Price");

                entity.Property(e => e.Prelpobcode)
                    .HasColumnName("PRELPOBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Prelponum)
                    .HasColumnName("PRELPONUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Priceincl)
                    .HasColumnName("priceincl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyLeft).HasColumnName("Qty_Left");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Remquantity).HasColumnName("remquantity");

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.Sbcode)
                    .HasColumnName("sbcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Snvdetnum)
                    .HasColumnName("SNVDETNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Snvnum)
                    .HasColumnName("SNVNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Taxamt)
                    .HasColumnName("taxamt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransNumber).HasColumnName("trans_number");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Txperc)
                    .HasColumnName("TXPERC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Txtype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TXTYPE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<SuppinvDtrep>(entity =>
            {
                entity.HasKey(e => new { e.SinvNum, e.SinvDetNum })
                    .IsClustered(false);

                entity.ToTable("SUPPINV_DTREP");

                entity.HasIndex(e => new { e.SinvNum, e.Mylineno }, "NDXLINE")
                    .IsUnique();

                entity.HasIndex(e => e.InvCode, "ndxInvCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SinvNum, e.SinvDetNum }, "ndxInvNumDetNum")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCode, "ndxTaxCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SinvNum, "ndxsInvNum")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SinvNum).HasColumnName("SINV_NUM");

                entity.Property(e => e.SinvDetNum).HasColumnName("SINV_DET_NUM");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bonus).HasColumnName("bonus");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Costfactor)
                    .HasColumnName("costfactor")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Detpending).HasColumnName("detpending");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Metquantity).HasColumnName("metquantity");

                entity.Property(e => e.ModuleCode)
                    .HasColumnName("Module_Code")
                    .HasDefaultValueSql("(12)");

                entity.Property(e => e.Mylineno).HasColumnName("mylineno");

                entity.Property(e => e.OrdQuantity).HasColumnName("ord_quantity");

                entity.Property(e => e.Ordered).HasColumnName("ORDERED");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PorderDetNum).HasColumnName("PORDER_DET_NUM");

                entity.Property(e => e.PreGrn)
                    .IsRequired()
                    .HasColumnName("Pre_GRN")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.PreferredPrice).HasColumnName("Preferred_Price");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.QtyLeft).HasColumnName("Qty_Left");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Remquantity).HasColumnName("remquantity");

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransNumber).HasColumnName("trans_number");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<SuppinvHd>(entity =>
            {
                entity.HasKey(e => new { e.SinvNum, e.Bcode })
                    .HasName("IX_SUPPINV_HD_CRUD")
                    .IsClustered(false);

                entity.ToTable("SUPPINV_HD");

                entity.HasIndex(e => e.Currencycode, "ndxCurrencyCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SinvDate, "ndxSinvDate")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SinvNumber, "ndxSinvNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SuppCode, "ndxSuppCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SinvNum).HasColumnName("SINV_NUM");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Amounttopay).HasColumnName("AMOUNTTOPAY");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Awbdate)
                    .HasColumnType("datetime")
                    .HasColumnName("AWBDATE");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpurchase).HasColumnName("CASHPURCHASE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.ContNum).HasColumnName("CONT_NUM");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Done).HasColumnName("DONE");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.GrnNum).HasColumnName("GRN_NUM");

                entity.Property(e => e.GrnNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GRN_NUMBER");

                entity.Property(e => e.IbiNum)
                    .HasColumnName("ibi_num")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Idfno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IDFNO");

                entity.Property(e => e.Importspv)
                    .HasColumnName("IMPORTSPV")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invoicetype).HasColumnName("invoicetype");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Myprintcopy).HasColumnName("myprintcopy");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Paying).HasColumnName("paying");

                entity.Property(e => e.Pending).HasColumnName("pending");

                entity.Property(e => e.Pricechange)
                    .HasColumnName("pricechange")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("printcopy")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Sbcode)
                    .HasColumnName("sbcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdone).HasColumnName("sdone");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.SinvD).HasColumnName("SINV_D");

                entity.Property(e => e.SinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SINV_DATE");

                entity.Property(e => e.SinvExcise)
                    .HasColumnName("sinv_excise")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SinvNet).HasColumnName("SINV_NET");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.SinvTotal).HasColumnName("SINV_TOTAL");

                entity.Property(e => e.SinvVat).HasColumnName("SINV_VAT");

                entity.Property(e => e.Snvnum)
                    .HasColumnName("SNVNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Snvnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SNVNUMBER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppInvoicenum)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SuppRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_REF")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Suppcleared)
                    .HasColumnName("SUPPCLEARED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Suppclearingdate)
                    .HasColumnType("datetime")
                    .HasColumnName("SUPPCLEARINGDATE");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Whvat)
                    .HasColumnName("whvat")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Whvatamt)
                    .HasColumnName("whvatamt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Whvatcode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("whvatcode")
                    .HasDefaultValueSql("('00')")
                    .IsFixedLength(true);

                entity.Property(e => e.Whvatperc)
                    .HasColumnName("whvatperc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SuppinvHdrep>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SUPPINV_HDREP");

                entity.HasIndex(e => e.SinvNum, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Currencycode, "ndxCurrencyCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SinvDate, "ndxSinvDate")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SinvNumber, "ndxSinvNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SuppCode, "ndxSuppCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Amounttopay).HasColumnName("AMOUNTTOPAY");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Awbdate)
                    .HasColumnType("datetime")
                    .HasColumnName("AWBDATE");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Cashpurchase).HasColumnName("CASHPURCHASE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.ContNum).HasColumnName("CONT_NUM");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Done).HasColumnName("DONE");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.GrnNum).HasColumnName("GRN_NUM");

                entity.Property(e => e.GrnNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GRN_NUMBER");

                entity.Property(e => e.Idfno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IDFNO");

                entity.Property(e => e.Invoicetype).HasColumnName("invoicetype");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Myprintcopy).HasColumnName("myprintcopy");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Paying).HasColumnName("paying");

                entity.Property(e => e.Pending).HasColumnName("pending");

                entity.Property(e => e.Printcopy)
                    .HasColumnName("printcopy")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Sdone).HasColumnName("sdone");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.SinvD).HasColumnName("SINV_D");

                entity.Property(e => e.SinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SINV_DATE");

                entity.Property(e => e.SinvNet).HasColumnName("SINV_NET");

                entity.Property(e => e.SinvNum).HasColumnName("SINV_NUM");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.SinvTotal).HasColumnName("SINV_TOTAL");

                entity.Property(e => e.SinvVat).HasColumnName("SINV_VAT");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppInvoicenum)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SuppRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_REF")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<SuppinvoiceC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("suppinvoice_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<Supplbalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SUPPLBALANCE");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");
            });

            modelBuilder.Entity<Supplier>(entity =>
            {
                entity.HasKey(e => e.SuppCode)
                    .HasName("IX_SUPPLIER_CRUD");

                entity.ToTable("SUPPLIER");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blocked)
                    .HasColumnName("BLOCKED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cellcountry)
                    .HasMaxLength(255)
                    .HasColumnName("cellcountry")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cellname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cellname")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cellnumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cellnumber")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Counter).HasColumnName("COUNTER");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.Currencycode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Fax)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.Lastpayamount).HasColumnName("LASTPAYAMOUNT");

                entity.Property(e => e.Lastpaydate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTPAYDATE");

                entity.Property(e => e.Openingbal)
                    .HasColumnName("openingbal")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OverAppliedBalance).HasColumnName("OverAPPLIED_BALANCE");

                entity.Property(e => e.Overapplied).HasColumnName("overapplied");

                entity.Property(e => e.Pdcheques)
                    .HasColumnName("PDCHEQUES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Phone)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHYSICALADD");

                entity.Property(e => e.Pinno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PINNO");

                entity.Property(e => e.Printstatement).HasColumnName("PRINTSTATEMENT");

                entity.Property(e => e.Smscontact)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SMSCONTACT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Smscontactname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SMSCONTACTNAME")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpcatgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_CODE");

                entity.Property(e => e.StatementCurrentbal).HasColumnName("STATEMENT_CURRENTBAL");

                entity.Property(e => e.SuppDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_DESC");

                entity.Property(e => e.Terms)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TERMS");

                entity.Property(e => e.TotalPurchases).HasColumnName("TOTAL_PURCHASES");

                entity.Property(e => e.Town)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TownCode).HasColumnName("town_code");

                entity.Property(e => e.Unapplied).HasColumnName("unapplied");

                entity.Property(e => e.UnappliedBalance).HasColumnName("UNAPPLIED_BALANCE");

                entity.Property(e => e.Used).HasColumnName("USED");

                entity.Property(e => e.Used2).HasColumnName("USED2");

                entity.Property(e => e.Using).HasColumnName("using");

                entity.Property(e => e.Using2).HasColumnName("using2");

                entity.Property(e => e.Vatno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VATNO");

                entity.Property(e => e.Xblocked).HasColumnName("XBLOCKED");
            });

            modelBuilder.Entity<SupplierStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SUPPLIER_STATEMENT");

                entity.HasIndex(e => new { e.Username, e.SuppCode }, "ndxsuppcode")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Username, "ndxuser");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.Credit).HasColumnName("CREDIT");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.Cstype)
                    .HasMaxLength(255)
                    .HasColumnName("cstype");

                entity.Property(e => e.Debit).HasColumnName("DEBIT");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Display)
                    .HasColumnName("display")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Docbal)
                    .HasColumnName("docbal")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("EXCH_RATE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Id1)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID1");

                entity.Property(e => e.Lastrptdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTRPTDATE");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Onetwenty).HasColumnName("onetwenty");

                entity.Property(e => e.Postcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("POSTCODE");

                entity.Property(e => e.ProvinceCode)
                    .HasMaxLength(255)
                    .HasColumnName("PROVINCE_CODE");

                entity.Property(e => e.Ref)
                    .HasMaxLength(255)
                    .HasColumnName("REF");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(255)
                    .HasColumnName("SALES_CODE");

                entity.Property(e => e.Showbalance).HasColumnName("SHOWBALANCE");

                entity.Property(e => e.Showcredit).HasColumnName("SHOWCREDIT");

                entity.Property(e => e.Showdebit).HasColumnName("SHOWDEBIT");

                entity.Property(e => e.Showunallocated).HasColumnName("SHOWUNALLOCATED");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.StatementCurrentbal).HasColumnName("STATEMENT_CURRENTBAL");

                entity.Property(e => e.Status)
                    .HasMaxLength(255)
                    .HasColumnName("STATUS");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(255)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppDesc)
                    .HasMaxLength(255)
                    .HasColumnName("SUPP_DESC");

                entity.Property(e => e.Suppbalance).HasColumnName("SUPPbalance");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TotalSales).HasColumnName("TOTAL_SALES");

                entity.Property(e => e.Town)
                    .HasMaxLength(255)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");

                entity.Property(e => e.TransType)
                    .HasMaxLength(255)
                    .HasColumnName("TRANS_TYPE");

                entity.Property(e => e.UnappliedBalance).HasColumnName("UNAPPLIED_BALANCE");

                entity.Property(e => e.Uptothirty).HasColumnName("uptothirty");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Supplieraged>(entity =>
            {
                entity.HasKey(e => e.Entryno);

                entity.ToTable("SUPPLIERAGED");

                entity.Property(e => e.Entryno).HasColumnName("entryno");

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Creditlimit)
                    .HasColumnName("CREDITLIMIT")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Debcred)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DEBCRED");

                entity.Property(e => e.Docamount).HasColumnName("DOCAMOUNT");

                entity.Property(e => e.Ninetyage)
                    .HasColumnName("NINETYAGE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Onetwentyage)
                    .HasColumnName("ONETWENTYAGE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Outstanding)
                    .HasColumnName("OUTSTANDING")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Phone)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Showpos)
                    .HasColumnName("showpos")
                    .HasDefaultValueSql("(2)");

                entity.Property(e => e.Sixtyage)
                    .HasColumnName("SIXTYAGE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_DESC");

                entity.Property(e => e.Thirtyage)
                    .HasColumnName("THIRTYAGE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Town)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOWN");

                entity.Property(e => e.Transdate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSDATE");

                entity.Property(e => e.Transdesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSDESC");

                entity.Property(e => e.Transno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSNO");

                entity.Property(e => e.Transtype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSTYPE");

                entity.Property(e => e.Turnover)
                    .HasColumnName("TURNOVER")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Zeroage)
                    .HasColumnName("ZEROAGE")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<Supptotradeapply>(entity =>
            {
                entity.HasKey(e => e.InvSubgroupcode);

                entity.ToTable("SUPPTOTRADEAPPLY");

                entity.Property(e => e.InvSubgroupcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");
            });

            modelBuilder.Entity<Supptotradecombo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SUPPTOTRADECOMBO");

                entity.Property(e => e.Entrynum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("entrynum");

                entity.Property(e => e.Suppdiscapply)
                    .HasColumnName("suppdiscapply")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Suppdiscfrom)
                    .HasColumnName("suppdiscfrom")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Suppdiscto)
                    .HasColumnName("suppdiscto")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Suppmarkupapply)
                    .HasColumnName("suppmarkupapply")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Sy>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SYS");

                entity.HasIndex(e => e.Company, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Acctlen).HasColumnName("ACCTLEN");

                entity.Property(e => e.Acctpds).HasColumnName("ACCTPDS");

                entity.Property(e => e.Acctpos).HasColumnName("ACCTPOS");

                entity.Property(e => e.Address1)
                    .HasMaxLength(66)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS1");

                entity.Property(e => e.Address2)
                    .HasMaxLength(66)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS2");

                entity.Property(e => e.Apacct)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("APACCT");

                entity.Property(e => e.Apagingpd)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("APAGINGPD");

                entity.Property(e => e.Apmemoprn).HasColumnName("APMEMOPRN");

                entity.Property(e => e.Apperiod)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("APPERIOD");

                entity.Property(e => e.Aracct)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("ARACCT");

                entity.Property(e => e.Aragingpd)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ARAGINGPD");

                entity.Property(e => e.Arcutoff).HasColumnName("ARCUTOFF");

                entity.Property(e => e.Ardiscacct)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("ARDISCACCT");

                entity.Property(e => e.Arlatefee).HasColumnName("ARLATEFEE");

                entity.Property(e => e.Armemoprn).HasColumnName("ARMEMOPRN");

                entity.Property(e => e.Arperiod)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ARPERIOD");

                entity.Property(e => e.Asset).HasColumnName("ASSET");

                entity.Property(e => e.Backorder).HasColumnName("BACKORDER");

                entity.Property(e => e.Bankaddr)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("BANKADDR");

                entity.Property(e => e.Bankbranch)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("BANKBRANCH");

                entity.Property(e => e.Bankcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BANKCODE");

                entity.Property(e => e.Bankencd)
                    .HasMaxLength(112)
                    .IsUnicode(false)
                    .HasColumnName("BANKENCD");

                entity.Property(e => e.Bankname)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("BANKNAME");

                entity.Property(e => e.Batch).HasColumnName("BATCH");

                entity.Property(e => e.Canada).HasColumnName("CANADA");

                entity.Property(e => e.Checkno).HasColumnName("CHECKNO");

                entity.Property(e => e.Chkjournal).HasColumnName("CHKJOURNAL");

                entity.Property(e => e.Chksprnted).HasColumnName("CHKSPRNTED");

                entity.Property(e => e.City)
                    .HasMaxLength(48)
                    .IsUnicode(false)
                    .HasColumnName("CITY");

                entity.Property(e => e.Ckdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CKDATE");

                entity.Property(e => e.Ckregprntd).HasColumnName("CKREGPRNTD");

                entity.Property(e => e.Company)
                    .HasMaxLength(66)
                    .IsUnicode(false)
                    .HasColumnName("COMPANY");

                entity.Property(e => e.Cshacct)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("CSHACCT");

                entity.Property(e => e.Cstctrlen).HasColumnName("CSTCTRLEN");

                entity.Property(e => e.Cstctrmask)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CSTCTRMASK");

                entity.Property(e => e.Cstctrpos).HasColumnName("CSTCTRPOS");

                entity.Property(e => e.Customer).HasColumnName("CUSTOMER");

                entity.Property(e => e.Dataset)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DATASET");

                entity.Property(e => e.Dfltport)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("DFLTPORT");

                entity.Property(e => e.Editmask)
                    .HasMaxLength(90)
                    .IsUnicode(false)
                    .HasColumnName("EDITMASK");

                entity.Property(e => e.Entity1st).HasColumnName("ENTITY1ST");

                entity.Property(e => e.Entlen).HasColumnName("ENTLEN");

                entity.Property(e => e.Entmask)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ENTMASK");

                entity.Property(e => e.Entpos).HasColumnName("ENTPOS");

                entity.Property(e => e.Extnddesc).HasColumnName("EXTNDDESC");

                entity.Property(e => e.Fadepcalc).HasColumnName("FADEPCALC");

                entity.Property(e => e.Fadepjrnl).HasColumnName("FADEPJRNL");

                entity.Property(e => e.Fax)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.Fedid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FEDID");

                entity.Property(e => e.FedidPr)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("FEDID_PR");

                entity.Property(e => e.Fedtax).HasColumnName("FEDTAX");

                entity.Property(e => e.Fedtxacct)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("FEDTXACCT");

                entity.Property(e => e.Ficaacct)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("FICAACCT");

                entity.Property(e => e.Futaacct)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("FUTAACCT");

                entity.Property(e => e.Futarate).HasColumnName("FUTARATE");

                entity.Property(e => e.Futawglmt).HasColumnName("FUTAWGLMT");

                entity.Property(e => e.Gl).HasColumnName("GL");

                entity.Property(e => e.Glperiod)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("GLPERIOD");

                entity.Property(e => e.Glsuppress).HasColumnName("GLSUPPRESS");

                entity.Property(e => e.Glyear)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("GLYEAR");

                entity.Property(e => e.Invjournal).HasColumnName("INVJOURNAL");

                entity.Property(e => e.Invsrkacct)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("INVSRKACCT");

                entity.Property(e => e.Ippurchord).HasColumnName("IPPURCHORD");

                entity.Property(e => e.Ipreceipt).HasColumnName("IPRECEIPT");

                entity.Property(e => e.Item).HasColumnName("ITEM");

                entity.Property(e => e.Lasercks).HasColumnName("LASERCKS");

                entity.Property(e => e.Laserinv).HasColumnName("LASERINV");

                entity.Property(e => e.Lateacct)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("LATEACCT");

                entity.Property(e => e.Latefeemin).HasColumnName("LATEFEEMIN");

                entity.Property(e => e.Length).HasColumnName("LENGTH");

                entity.Property(e => e.Liabacct)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("LIABACCT");

                entity.Property(e => e.Locs)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("LOCS");

                entity.Property(e => e.Maskchar)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("MASKCHAR");

                entity.Property(e => e.Mediacct)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("MEDIACCT");

                entity.Property(e => e.Medirate).HasColumnName("MEDIRATE");

                entity.Property(e => e.Mediwglmt).HasColumnName("MEDIWGLMT");

                entity.Property(e => e.Multiacct).HasColumnName("MULTIACCT");

                entity.Property(e => e.Multiloc).HasColumnName("MULTILOC");

                entity.Property(e => e.Nextbatch).HasColumnName("NEXTBATCH");

                entity.Property(e => e.Nextkit).HasColumnName("NEXTKIT");

                entity.Property(e => e.Oebkorder).HasColumnName("OEBKORDER");

                entity.Property(e => e.Oecloseinv).HasColumnName("OECLOSEINV");

                entity.Property(e => e.Oeinvoice).HasColumnName("OEINVOICE");

                entity.Property(e => e.Oeorder).HasColumnName("OEORDER");

                entity.Property(e => e.Oequote).HasColumnName("OEQUOTE");

                entity.Property(e => e.Pdend)
                    .HasColumnType("datetime")
                    .HasColumnName("PDEND");

                entity.Property(e => e.Pdstart)
                    .HasColumnType("datetime")
                    .HasColumnName("PDSTART");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Prcdec).HasColumnName("PRCDEC");

                entity.Property(e => e.Prcksprntd).HasColumnName("PRCKSPRNTD");

                entity.Property(e => e.Prcpic)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("PRCPIC");

                entity.Property(e => e.Prjrnprntd).HasColumnName("PRJRNPRNTD");

                entity.Property(e => e.Qtydec).HasColumnName("QTYDEC");

                entity.Property(e => e.Qtypic)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("QTYPIC");

                entity.Property(e => e.Reacct)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("REACCT");

                entity.Property(e => e.RefPr).HasColumnName("REF_PR");

                entity.Property(e => e.Reference).HasColumnName("REFERENCE");

                entity.Property(e => e.Reinit).HasColumnName("REINIT");

                entity.Property(e => e.Rollupchks).HasColumnName("ROLLUPCHKS");

                entity.Property(e => e.Rowguid).HasColumnName("rowguid");

                entity.Property(e => e.Rptpdend)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("RPTPDEND");

                entity.Property(e => e.Rptpdstart)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("RPTPDSTART");

                entity.Property(e => e.Slstxacct)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("SLSTXACCT");

                entity.Property(e => e.Ssrate).HasColumnName("SSRATE");

                entity.Property(e => e.Sswglmt).HasColumnName("SSWGLMT");

                entity.Property(e => e.State)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.Stateid)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("STATEID");

                entity.Property(e => e.Sutaacct)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("SUTAACCT");

                entity.Property(e => e.Sutarate).HasColumnName("SUTARATE");

                entity.Property(e => e.Sutawglmt).HasColumnName("SUTAWGLMT");

                entity.Property(e => e.Tmsprntd).HasColumnName("TMSPRNTD");

                entity.Property(e => e.Vendor).HasColumnName("VENDOR");

                entity.Property(e => e.Wordproc)
                    .HasMaxLength(140)
                    .IsUnicode(false)
                    .HasColumnName("WORDPROC");

                entity.Property(e => e.Zip)
                    .HasMaxLength(28)
                    .IsUnicode(false)
                    .HasColumnName("ZIP");
            });

            modelBuilder.Entity<Sysdefault>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SYSDEFAULTS");

                entity.Property(e => e.Acctbranch)
                    .HasColumnName("ACCTBRANCH")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Acctclosingstock)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCTCLOSINGSTOCK")
                    .HasDefaultValueSql("('00-00-2900')");

                entity.Property(e => e.Acctglopenbalacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("acctglopenbalacct");

                entity.Property(e => e.Acctopeningstock)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCTOPENINGSTOCK")
                    .HasDefaultValueSql("('00-00-2000')");

                entity.Property(e => e.Acctstockcontrol)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCTSTOCKCONTROL");

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Adjustpricefrompricepick)
                    .HasColumnName("adjustpricefrompricepick")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AdminPassword)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("Admin_Password");

                entity.Property(e => e.Agedll)
                    .HasColumnName("agedll")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AgeingEnd)
                    .HasColumnName("AGEING_END")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AgeingEnddate)
                    .HasColumnType("date")
                    .HasColumnName("AGEING_ENDDATE");

                entity.Property(e => e.AgeingStart)
                    .HasColumnName("AGEING_START")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ageingoninvoice)
                    .HasColumnName("ageingoninvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AlertOnPaymentsdue).HasColumnName("ALERT_ON_PAYMENTSDUE");

                entity.Property(e => e.Allocatebeforebatch)
                    .HasColumnName("ALLOCATEBEFOREBATCH")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Allocatepayonsave)
                    .HasColumnName("ALLOCATEPAYONSAVE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Allocatepdcheques)
                    .HasColumnName("allocatepdcheques")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AllowBankposting)
                    .HasColumnName("ALLOW_BANKPOSTING")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AllowPartialCashInvoiceCollection).HasDefaultValueSql("((0))");

                entity.Property(e => e.Allowcashpaidoncashinvoice)
                    .HasColumnName("allowcashpaidoncashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Allowexistingstock).HasColumnName("allowexistingstock");

                entity.Property(e => e.Allowexpinvoicebackdate)
                    .HasColumnName("allowexpinvoicebackdate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Allowmorecashpaid)
                    .HasColumnName("allowmorecashpaid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Allowpacksizealteration)
                    .HasColumnName("allowpacksizealteration")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Alterpostedcashinvoice)
                    .HasColumnName("alterpostedcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Alterpostedsalesinvoice)
                    .HasColumnName("alterpostedsalesinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Alterspdocs)
                    .HasColumnName("alterspdocs")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Alterspinvoice)
                    .HasColumnName("alterspinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Applycosttotradecombo)
                    .HasColumnName("applycosttotradecombo")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Applysupptotradecombo)
                    .HasColumnName("applysupptotradecombo")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Approvelpo)
                    .HasColumnName("approvelpo")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Approvereqonbatch)
                    .HasColumnName("approvereqonbatch")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Assetpurchaseintegrate)
                    .HasColumnName("assetpurchaseintegrate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Assortedsearch)
                    .HasColumnName("ASSORTEDSEARCH")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Authorisesale)
                    .HasColumnName("authorisesale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Autoacct)
                    .HasColumnName("autoacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Autoacctcatg)
                    .HasColumnName("autoacctcatg")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoallocateCnote)
                    .HasColumnName("AUTOALLOCATE_CNOTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AutobatchBom)
                    .HasColumnName("AUTOBATCH_BOM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AutobatchBranchorder)
                    .HasColumnName("autobatch_branchorder")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AutobatchBrn)
                    .HasColumnName("AUTOBATCH_BRN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AutobatchBtrans)
                    .HasColumnName("AUTOBATCH_BTRANS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AutobatchCashsale)
                    .IsRequired()
                    .HasColumnName("AUTOBATCH_CASHSALE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AutobatchCnote)
                    .IsRequired()
                    .HasColumnName("AUTOBATCH_CNOTE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AutobatchDispense)
                    .HasColumnName("AUTOBATCH_DISPENSE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AutobatchGret).HasColumnName("AUTOBATCH_GRET");

                entity.Property(e => e.AutobatchIbi)
                    .HasColumnName("AUTOBATCH_IBI")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AutobatchInvoice)
                    .IsRequired()
                    .HasColumnName("AUTOBATCH_INVOICE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AutobatchMnf)
                    .HasColumnName("AUTOBATCH_MNF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AutobatchQuotation)
                    .HasColumnName("autobatch_quotation")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AutobatchReq)
                    .HasColumnName("AUTOBATCH_REQ")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AutobatchSuppinvoice)
                    .HasColumnName("AUTOBATCH_suppinvoice")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Autobonus)
                    .HasColumnName("AUTOBONUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Autoclockout)
                    .HasColumnName("autoclockout")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Autoclockouttime)
                    .HasColumnType("datetime")
                    .HasColumnName("autoclockouttime")
                    .HasDefaultValueSql("('01/01/1900 18:00:00')");

                entity.Property(e => e.Autocuscode)
                    .HasColumnName("autocuscode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Autofillibi)
                    .HasColumnName("autofillibi")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Autominprice)
                    .HasColumnName("AUTOMINPRICE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Autoprintinvoice)
                    .HasColumnName("autoprintinvoice")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Autosbgcode)
                    .HasColumnName("AUTOSBGCODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Autostockcode)
                    .HasColumnName("autostockcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Autosubacct)
                    .HasColumnName("autosubacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Autosuppcode)
                    .HasColumnName("autosuppcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Autotillreconcile)
                    .HasColumnName("autotillreconcile")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BackupPath)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("backup_path");

                entity.Property(e => e.Barcode)
                    .HasColumnName("BARCODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Barcodetransact)
                    .HasColumnName("barcodetransact")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Batchbtransonprint)
                    .HasColumnName("BATCHBTRANSONPRINT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Batchdispenseonprint)
                    .HasColumnName("batchdispenseonprint")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Batchexpiry)
                    .HasColumnName("BATCHEXPIRY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Batchinvoiceonprint).HasColumnName("batchinvoiceonprint");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Binstockinquiry)
                    .HasColumnName("binstockinquiry")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blankcashierpaymode)
                    .HasColumnName("blankcashierpaymode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BlockPbdCnote)
                    .HasColumnName("block_pbd_cnote")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BlockPbdCsale)
                    .HasColumnName("block_pbd_csale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BlockPbdGret)
                    .HasColumnName("block_pbd_gret")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BlockPbdSaleinv)
                    .HasColumnName("block_pbd_saleinv")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BlockPbdSaleinvcash)
                    .HasColumnName("block_pbd_saleinvcash")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BlockPbdSinv)
                    .HasColumnName("block_pbd_sinv")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockcashsales)
                    .HasColumnName("blockcashsales")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockcusonsale)
                    .HasColumnName("blockcusonsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockgrn)
                    .HasColumnName("blockgrn")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blockpartallocation)
                    .HasColumnName("BLOCKPARTALLOCATION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blocksalesorders)
                    .HasColumnName("blocksalesorders")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Blocksupponpurchase)
                    .HasColumnName("blocksupponpurchase")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Blockvat)
                    .HasColumnName("blockvat")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bmtprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("BMTPREFIX")
                    .HasDefaultValueSql("('BMT')");

                entity.Property(e => e.BonusAvgcost)
                    .HasColumnName("BONUS_AVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchgl)
                    .HasColumnName("branchgl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("branchorderprefix")
                    .HasDefaultValueSql("('BOD')");

                entity.Property(e => e.Branchpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("branchpartwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Branchreceiptprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("branchreceiptprefix")
                    .HasDefaultValueSql("('BRN')");

                entity.Property(e => e.Branchtogl)
                    .HasColumnName("branchtogl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchtransferprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("branchtransferprefix")
                    .HasDefaultValueSql("('BTR')");

                entity.Property(e => e.Branchtransfromorder)
                    .HasColumnName("branchtransfromorder")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Brandgenericsale)
                    .HasColumnName("brandgenericsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Breceiptnoupdate)
                    .HasColumnName("breceiptnoupdate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Brnfromitems)
                    .HasColumnName("brnfromitems")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Brnpriceupdate)
                    .HasColumnName("brnpriceupdate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Btranscopies)
                    .HasColumnName("btranscopies")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Btransexporttype)
                    .HasColumnName("btransexporttype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Btransnocheck)
                    .HasColumnName("btransnocheck")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Btrbarcode)
                    .HasColumnName("btrbarcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.C1Default).HasColumnName("C1_DEFAULT");

                entity.Property(e => e.C2Default).HasColumnName("C2_DEFAULT");

                entity.Property(e => e.C3Default).HasColumnName("C3_DEFAULT");

                entity.Property(e => e.C4Default).HasColumnName("C4_DEFAULT");

                entity.Property(e => e.C5Default).HasColumnName("C5_DEFAULT");

                entity.Property(e => e.C6Default).HasColumnName("C6_DEFAULT");

                entity.Property(e => e.C7Default).HasColumnName("C7_DEFAULT");

                entity.Property(e => e.C8Default).HasColumnName("C8_DEFAULT");

                entity.Property(e => e.Calcweight)
                    .HasColumnName("calcweight")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CashBankAcct)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cash_bank_acct");

                entity.Property(e => e.CashSaleCrystal)
                    .IsRequired()
                    .HasColumnName("CashSale_Crystal")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Cashdebtoracct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CASHDEBTORACCT")
                    .HasDefaultValueSql("('00-00-5110')");

                entity.Property(e => e.Cashierpaymodebanks)
                    .HasColumnName("cashierpaymodebanks")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashierprinter)
                    .HasColumnName("cashierprinter")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Cashinvoicecopies)
                    .HasColumnName("cashinvoicecopies")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Cashinvoiceprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cashinvoiceprefix")
                    .HasDefaultValueSql("('CNV')");

                entity.Property(e => e.Cashpoints)
                    .HasColumnName("CASHPOINTS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Cashpricelist)
                    .HasColumnName("cashpricelist")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashpurchasecode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cashpurchasecode");

                entity.Property(e => e.Cashsalecopies)
                    .HasColumnName("cashsalecopies")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.Cashsalecreditnote)
                    .HasColumnName("CASHSALECREDITNOTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashsalefromquote)
                    .HasColumnName("cashsalefromquote")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashsaleprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cashsaleprefix")
                    .HasDefaultValueSql("('CS')");

                entity.Property(e => e.Centraldb)
                    .HasColumnName("centraldb")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CheckPendingOrders).HasDefaultValueSql("((0))");

                entity.Property(e => e.Checkcorestock2020)
                    .HasColumnName("checkcorestock2020")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checklasttransactiondate)
                    .HasColumnName("CHECKLASTTRANSACTIONDATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checksupppricechange)
                    .HasColumnName("checksupppricechange")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checkunbatchedstock)
                    .HasColumnName("CHECKUNBATCHEDSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CheckuserLoginbcode)
                    .HasColumnName("checkuserLOGINbcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Checstockprocessdate)
                    .HasColumnName("CHECSTOCKPROCESSDATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Choosedoccopies)
                    .HasColumnName("choosedoccopies")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Choosedoccopiescash)
                    .HasColumnName("choosedoccopiescash")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Clearunusedquotation)
                    .HasColumnName("clearunusedquotation")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Clinicdbint)
                    .HasColumnName("clinicdbint")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Clinicdbname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("clinicdbname");

                entity.Property(e => e.Clinicdbsos)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("clinicdbsos");

                entity.Property(e => e.Clinicdisp)
                    .HasColumnName("clinicdisp")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Clocksystem)
                    .HasColumnName("CLOCKSYSTEM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CnoteUseformula)
                    .IsRequired()
                    .HasColumnName("CNOTE_USEFORMULA")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Collectcashinvoice)
                    .HasColumnName("collectcashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CommentsMultipleglpayments)
                    .HasColumnName("COMMENTS_MULTIPLEGLPAYMENTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Company)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Companybarcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COMPANYBARCODE");

                entity.Property(e => e.Companybranch)
                    .HasColumnName("companybranch")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Copaycuscode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("copaycuscode")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Copayglacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("copayglacct")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Copayinvoice)
                    .HasColumnName("copayinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Copayperc)
                    .HasColumnName("copayperc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CoreBranch)
                    .HasColumnName("coreBranch")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CoreGl)
                    .HasColumnName("coreGL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CoreHr)
                    .HasColumnName("coreHr")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Corepasscomplex)
                    .HasColumnName("corepasscomplex")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Costcentre)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("COSTCENTRE")
                    .IsFixedLength(true);

                entity.Property(e => e.Costofsales)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("COSTOFSALES");

                entity.Property(e => e.Costswithvat)
                    .HasColumnName("costswithvat")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Crddocid)
                    .HasColumnName("crddocid")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Credcontrolstatementfilter)
                    .HasColumnName("credcontrolstatementfilter")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Creddiscounts).HasColumnName("CREDDISCOUNTS");

                entity.Property(e => e.Creditnotecopies)
                    .HasColumnName("creditnotecopies")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Creditnotepenalty)
                    .HasColumnName("creditnotepenalty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Creditnotepenaltyacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("creditnotepenaltyacct")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Creditnotepenaltyamt)
                    .HasColumnName("creditnotepenaltyamt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Creditnotepenaltyperc)
                    .HasColumnName("creditnotepenaltyperc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Creditnoteprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("creditnoteprefix")
                    .HasDefaultValueSql("('CCD')");

                entity.Property(e => e.CrystalConn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('dsn=phamasql;uid=mansion;pwd=mansion;')");

                entity.Property(e => e.CrystalPath)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CRYSTAL_PATH");

                entity.Property(e => e.CsaleComment)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CSALE_COMMENT");

                entity.Property(e => e.CsaleOffset)
                    .HasColumnName("CSALE_OFFSET")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Csbranch)
                    .HasColumnName("CSBRANCH")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Csldocid)
                    .HasColumnName("csldocid")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CurrentEnddate)
                    .HasColumnType("datetime")
                    .HasColumnName("CURRENT_ENDDATE");

                entity.Property(e => e.CurrentMonth)
                    .HasColumnName("CURRENT_MONTH")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CurrentPeriod)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENT_PERIOD");

                entity.Property(e => e.CurrentStartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CURRENT_STARTDATE");

                entity.Property(e => e.CurrentYear)
                    .HasColumnName("CURRENT_YEAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Currentstocktake)
                    .HasColumnType("datetime")
                    .HasColumnName("CURRENTSTOCKTAKE")
                    .HasDefaultValueSql("('01/01/1900')");

                entity.Property(e => e.CursordefaultItemcode)
                    .HasColumnName("CURSORDEFAULT_ITEMCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CustomerIndex)
                    .HasColumnName("CUSTOMER_INDEX")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CustomerMemberNoPrefix)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('PP')");

                entity.Property(e => e.Customermarginactive)
                    .HasColumnName("customermarginactive")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Customermargintype)
                    .HasColumnName("customermargintype")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DebtorDefaultcashsale)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("debtor_defaultcashsale")
                    .HasDefaultValueSql("('CAP')");

                entity.Property(e => e.DebtorDefaultinvoice)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("debtor_defaultinvoice")
                    .HasDefaultValueSql("('TRD')");

                entity.Property(e => e.DefLoc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEF_LOC");

                entity.Property(e => e.DefaultBatch)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_BATCH");

                entity.Property(e => e.DefaultExpiry)
                    .HasColumnType("datetime")
                    .HasColumnName("DEFAULT_EXPIRY");

                entity.Property(e => e.DefaultTaxcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULT_TAXCODE");

                entity.Property(e => e.Defaultcashdiscount).HasColumnName("DEFAULTCASHDISCOUNT");

                entity.Property(e => e.Defcashsalecomment)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEFCASHSALECOMMENT")
                    .HasDefaultValueSql("('Wish You Quick Recovery')");

                entity.Property(e => e.Defjournalcost)
                    .HasColumnName("defjournalcost")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Defpricingmode)
                    .HasColumnName("defpricingmode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Defpricingmodecash)
                    .HasColumnName("defpricingmodecash")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DeftaxCode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("DEFTAX_CODE");

                entity.Property(e => e.Deletepayrep)
                    .HasColumnName("deletepayrep")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Delnorecycle)
                    .HasColumnName("delnorecycle")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Diagoninvoice)
                    .HasColumnName("diagoninvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Directcashprint)
                    .HasColumnName("directcashprint")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Directstocksearch)
                    .HasColumnName("directstocksearch")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Discminprice)
                    .HasColumnName("discminprice")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DiscountCashsalebal)
                    .HasColumnName("DISCOUNT_CASHSALEBAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Discountonsalesaccount)
                    .HasColumnName("DISCOUNTONSALESACCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dispatchdirect)
                    .HasColumnName("dispatchdirect")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DisplayMaxitemdiscount)
                    .HasColumnName("DISPLAY_MAXITEMDISCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Distributor).HasColumnName("DISTRIBUTOR");

                entity.Property(e => e.Docgldatefrom)
                    .HasColumnType("datetime")
                    .HasColumnName("docgldatefrom")
                    .HasDefaultValueSql("('01/01/1900')");

                entity.Property(e => e.Docgldateto)
                    .HasColumnType("datetime")
                    .HasColumnName("docgldateto")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dokahapi)
                    .HasColumnName("dokahapi")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DokahapiLpo)
                    .HasColumnName("dokahapiLPO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dokahapibranchorder)
                    .HasColumnName("dokahapibranchorder")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dontlockcusinvoice)
                    .HasColumnName("dontlockcusinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dontlocksupponinvoice)
                    .HasColumnName("dontlocksupponinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dopareto)
                    .HasColumnName("dopareto")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Doubleledgercard)
                    .HasColumnName("doubleledgercard")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dropcuscombo)
                    .HasColumnName("dropcuscombo")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EnforceTerms)
                    .HasColumnName("ENFORCE_TERMS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Entity)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ENTITY")
                    .IsFixedLength(true);

                entity.Property(e => e.EntryType).HasDefaultValueSql("((0))");

                entity.Property(e => e.Expirydays).HasColumnName("EXPIRYDAYS");

                entity.Property(e => e.Expiryperiod).HasColumnName("expiryperiod");

                entity.Property(e => e.Fax)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Fifo).HasColumnName("FIFO");

                entity.Property(e => e.FinEnddate)
                    .HasColumnType("datetime")
                    .HasColumnName("FIN_ENDDATE");

                entity.Property(e => e.FinPrdend)
                    .HasColumnName("FIN_PRDEND")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FinPrdstart)
                    .HasColumnName("FIN_PRDSTART")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FinStartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("FIN_STARTDATE");

                entity.Property(e => e.FinyearStartmonth)
                    .HasColumnName("FINYEAR_STARTMONTH")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fixedtransfer)
                    .HasColumnName("fixedtransfer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ForceInvshelfclass)
                    .HasColumnName("force_invshelfclass")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ForceInvstockformulation)
                    .HasColumnName("force_invstockformulation")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ForceInvstockmainclass)
                    .HasColumnName("force_invstockmainclass")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forcebanking)
                    .HasColumnName("forcebanking")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forcebankingtime)
                    .HasColumnType("datetime")
                    .HasColumnName("forcebankingtime");

                entity.Property(e => e.Forcecusref)
                    .HasColumnName("forcecusref")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forcepasscashbook)
                    .HasColumnName("forcepasscashbook")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forcepaycomments)
                    .HasColumnName("forcepaycomments")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forcereturncomments)
                    .HasColumnName("FORCERETURNCOMMENTS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Forcesalesman)
                    .HasColumnName("FORCESALESMAN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forcesalesmancsale)
                    .HasColumnName("forcesalesmancsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forcesalesmanibi)
                    .HasColumnName("forcesalesmanibi")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forcetilloncashinvreturn)
                    .HasColumnName("forcetilloncashinvreturn")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forcetransfercomments)
                    .HasColumnName("FORCETRANSFERCOMMENTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forrefillbranchcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("forrefillbranchcode");

                entity.Property(e => e.Freezempesacashierdate)
                    .HasColumnName("FREEZEMPESACASHIERDATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fyekadays)
                    .HasColumnName("fyekadays")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.GetOrderlocation)
                    .HasColumnName("GET_ORDERLOCATION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GlCashBookDiscountAccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_CashBookDiscount_Account");

                entity.Property(e => e.GlCostOfSalesAccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_CostOfSales_Account");

                entity.Property(e => e.GlCusjournalcontraacct)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("gl_cusjournalcontraacct");

                entity.Property(e => e.GlCustomerAccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_Customer_Account");

                entity.Property(e => e.GlExciseAccount)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GL_excise_account");

                entity.Property(e => e.GlForexacct)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("gl_forexacct");

                entity.Property(e => e.GlGitAccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_git_account");

                entity.Property(e => e.GlGoodsInTransitAccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Gl_GoodsInTransitAccount");

                entity.Property(e => e.GlInsuranceprovisionacct)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("gl_insuranceprovisionacct");

                entity.Property(e => e.GlIntegratestocks)
                    .HasColumnName("GL_INTEGRATESTOCKS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GlInvAdjustmentAccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_Inv_Adjustment_Account");

                entity.Property(e => e.GlInventoryAccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_Inventory_Account");

                entity.Property(e => e.GlMiscAccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_misc_account");

                entity.Property(e => e.GlPostcustomercategory)
                    .HasColumnName("gl_postcustomercategory")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GlPostdirect)
                    .HasColumnName("GL_POSTDIRECT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GlPostsuppliercategory).HasColumnName("gl_postsuppliercategory");

                entity.Property(e => e.GlPurchasesAccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_Purchases_Account");

                entity.Property(e => e.GlSalesAccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_Sales_Account");

                entity.Property(e => e.GlShortlandedgoodsacct)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("gl_shortlandedgoodsacct");

                entity.Property(e => e.GlSuppjournalcontraacct)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("gl_suppjournalcontraacct");

                entity.Property(e => e.GlSupplierAccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_Supplier_Account");

                entity.Property(e => e.GlVatAccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_Vat_Account");

                entity.Property(e => e.GlWhtaxAccount)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GL_WHTAX_Account");

                entity.Property(e => e.Glyear)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("GLYEAR");

                entity.Property(e => e.Gobackpareto)
                    .HasColumnName("gobackpareto")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Goodsreceivedprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("goodsreceivedprefix")
                    .HasDefaultValueSql("('GRN')");

                entity.Property(e => e.Goodsreturnedprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("goodsreturnedprefix")
                    .HasDefaultValueSql("('GRN')");

                entity.Property(e => e.GretCrystal)
                    .IsRequired()
                    .HasColumnName("GRET_CRYSTAL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.GrnDefault).HasColumnName("GRN_DEFAULT");

                entity.Property(e => e.GrnProvisions)
                    .HasColumnName("GRN_PROVISIONS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HideOrdercreditinfo)
                    .HasColumnName("HIDE_ORDERCREDITINFO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Hideinvcode)
                    .HasColumnName("hideinvcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Hidemargin)
                    .HasColumnName("HIDEMARGIN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Holding).HasColumnName("HOLDING");

                entity.Property(e => e.Housekeepminutes)
                    .HasColumnName("housekeepminutes")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Housekeepstatus)
                    .HasColumnName("housekeepstatus")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Housekeeptime)
                    .HasColumnType("datetime")
                    .HasColumnName("housekeeptime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Ibifromrequest)
                    .HasColumnName("IBIFROMREQUEST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ibiprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ibiprefix")
                    .HasDefaultValueSql("('ALT')");

                entity.Property(e => e.IgnoreAudit)
                    .HasColumnName("IGNORE_AUDIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IgnoreExpiry)
                    .HasColumnName("IGNORE_EXPIRY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IgnoreItempricerounding)
                    .HasColumnName("IGNORE_ITEMPRICEROUNDING")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IgnoreMail)
                    .HasColumnName("IGNORE_MAIL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IgnoreSalesitemselection)
                    .HasColumnName("IGNORE_SALESITEMSELECTION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Importer)
                    .HasColumnName("IMPORTER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Importlastcost)
                    .HasColumnName("importlastcost")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IncrementRctref)
                    .IsRequired()
                    .HasColumnName("INCREMENT_RCTREF")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Integratedinvoice)
                    .HasColumnName("integratedinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invbcodesearch)
                    .HasColumnName("invbcodesearch")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Invbcodestockdate)
                    .HasColumnType("datetime")
                    .HasColumnName("INVBCODESTOCKDATE");

                entity.Property(e => e.Invfromquotecheck)
                    .HasColumnName("invfromquotecheck")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invhyphen)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("invhyphen")
                    .HasDefaultValueSql("('SCL')");

                entity.Property(e => e.InvoiceCommentsCaption)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceCommentsCaptioncash)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvoiceCrystal)
                    .IsRequired()
                    .HasColumnName("Invoice_Crystal")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvoiceMsg).HasMaxLength(2500);

                entity.Property(e => e.InvoiceOrderCaption)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceOrderCaptioncash)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvoiceReferenceCaption)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceReferenceCaptioncash)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Invoicecopies)
                    .HasColumnName("invoicecopies")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invoicepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("invoicepartwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Invsearchlike)
                    .HasColumnName("invsearchlike")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Invsearchpw)
                    .HasColumnName("INVSEARCHPW")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invtoquote)
                    .HasColumnName("INVTOQUOTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Issmartrelax)
                    .HasColumnName("issmartrelax")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IssueOnbatch)
                    .HasColumnName("ISSUE_ONBATCH")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itemcodebyname)
                    .HasColumnName("itemcodebyname")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Itemcodestyle)
                    .HasColumnName("itemcodestyle")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahaccounts)
                    .HasColumnName("kahaccounts")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Kahawadirect)
                    .HasColumnName("kahawadirect")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahawaftp)
                    .HasColumnName("kahawaftp")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahawalink)
                    .HasColumnName("KAHAWALINK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kahawastart)
                    .HasColumnName("kahawastart")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Kahawastartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("kahawastartdate")
                    .HasDefaultValueSql("('10/01/2008')");

                entity.Property(e => e.Kahcustomer)
                    .HasColumnName("kahcustomer")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Kahsupplier)
                    .HasColumnName("kahsupplier")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Kmaxpoints)
                    .HasColumnName("KMAXPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kmaxredeem)
                    .HasColumnName("KMAXREDEEM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Kmaxvalue)
                    .HasColumnName("KMAXVALUE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Knockolddebt)
                    .HasColumnName("knockolddebt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Knockolddebtsupp)
                    .HasColumnName("knockolddebtsupp")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Kra)
                    .HasColumnName("kra")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastageingrun)
                    .HasColumnType("date")
                    .HasColumnName("lastageingrun");

                entity.Property(e => e.Lastdocdelaction)
                    .HasColumnName("lastdocdelaction")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastdocdelrun)
                    .HasColumnType("datetime")
                    .HasColumnName("lastdocdelrun")
                    .HasDefaultValueSql("('01/01/1900')");

                entity.Property(e => e.Lastdocglaction)
                    .HasColumnName("lastdocglaction")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastdocglrun)
                    .HasColumnType("datetime")
                    .HasColumnName("lastdocglrun")
                    .HasDefaultValueSql("('01/01/1900')");

                entity.Property(e => e.Laststocktake)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTSTOCKTAKE")
                    .HasDefaultValueSql("('01/01/1900')");

                entity.Property(e => e.Lasttransrun)
                    .HasColumnType("date")
                    .HasColumnName("LASTTRANSRUN")
                    .HasDefaultValueSql("('01/01/2021')");

                entity.Property(e => e.Likesearch)
                    .HasColumnName("likesearch")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LinkLocationSalescode)
                    .HasColumnName("LINK_LOCATION_SALESCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Linkstock)
                    .HasColumnName("linkstock")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lite)
                    .HasColumnName("lite")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Locationreturnprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("locationreturnprefix")
                    .HasDefaultValueSql("('RET')");

                entity.Property(e => e.Locationtransferprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("locationtransferprefix")
                    .HasDefaultValueSql("('ILT')");

                entity.Property(e => e.LockCashsalecustomer)
                    .IsRequired()
                    .HasColumnName("LOCK_CASHSALECUSTOMER")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Lockbtrprice)
                    .HasColumnName("lockbtrprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockcashsalebonus)
                    .HasColumnName("lockcashsalebonus")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Lockdefpricingmode)
                    .HasColumnName("lockdefpricingmode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockdescriptionchange)
                    .HasColumnName("lockdescriptionchange")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockdescriptionchangesupp)
                    .HasColumnName("lockdescriptionchangesupp")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockdiscount)
                    .HasColumnName("lockdiscount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockdiscountinvoice)
                    .HasColumnName("lockdiscountinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockdiscountinvoicecash)
                    .HasColumnName("lockdiscountinvoicecash")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockinvoicebonus)
                    .HasColumnName("lockinvoicebonus")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Lockinvoicebonuscash)
                    .HasColumnName("lockinvoicebonuscash")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockjrnbranch)
                    .HasColumnName("lockjrnbranch")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Locklinediscount)
                    .HasColumnName("locklinediscount")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Locklinediscountcash)
                    .HasColumnName("locklinediscountcash")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Locklocations)
                    .HasColumnName("locklocations")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Locklposuppitems)
                    .HasColumnName("locklposuppitems")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Locknewpacksize)
                    .HasColumnName("locknewpacksize")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpartwhole)
                    .HasColumnName("lockpartwhole")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockpaycomments)
                    .HasColumnName("lockpaycomments")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockquotation)
                    .HasColumnName("lockquotation")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Locksalesprice)
                    .HasColumnName("locksalesprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Locksalespriceinvoice)
                    .HasColumnName("locksalespriceinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Locksalespriceinvoicecash)
                    .HasColumnName("locksalespriceinvoicecash")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Locktotalcost)
                    .HasColumnName("locktotalcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Locktransactiondates)
                    .HasColumnName("LOCKTRANSACTIONDATES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Locktransferprices)
                    .HasColumnName("locktransferprices")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockvatonpurchase)
                    .HasColumnName("lockvatonpurchase")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lockvatonsale)
                    .HasColumnName("lockvatonsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Logerrormsg)
                    .HasColumnName("LOGERRORMSG")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Managenonreg)
                    .HasColumnName("managenonreg")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Manminprice)
                    .HasColumnName("manminprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Manualclose)
                    .HasColumnName("manualclose")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Margintype)
                    .HasColumnName("margintype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Masaah)
                    .HasColumnType("datetime")
                    .HasColumnName("masaah")
                    .HasDefaultValueSql("('18:00')");

                entity.Property(e => e.MaxPostRecords).HasDefaultValueSql("((0))");

                entity.Property(e => e.Maxcashsalediscount)
                    .HasColumnName("maxcashsalediscount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Maxcashsalediscountperc)
                    .HasColumnName("maxcashsalediscountperc")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MaximumPointsToTranfer).HasDefaultValueSql("((0))");

                entity.Property(e => e.Maxmorecashpaid)
                    .HasColumnName("maxmorecashpaid")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.MinimumPointsToHaveToEnableTranfer).HasDefaultValueSql("((0))");

                entity.Property(e => e.MinimumPointsToTranfer).HasDefaultValueSql("((0))");

                entity.Property(e => e.Minpricemarkup)
                    .HasColumnName("MINPRICEMARKUP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mkupstyle)
                    .HasColumnName("mkupstyle")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mnfprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MNFPREFIX")
                    .HasDefaultValueSql("('MNF')");

                entity.Property(e => e.MonitorPrintcopy)
                    .HasColumnName("MONITOR_PRINTCOPY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Monitorexpiry).HasColumnName("MONITOREXPIRY");

                entity.Property(e => e.MpesaBankAcct)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("MPESA_BANK_ACCT");

                entity.Property(e => e.Mpesaanyaccount)
                    .HasColumnName("MPESAANYACCOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mpesacbook)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MPESACBOOK")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Multibranch)
                    .HasColumnName("multibranch")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Multilocations)
                    .HasColumnName("multilocations")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Multiminprice)
                    .HasColumnName("multiminprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Multiuserinvoicing).HasColumnName("multiuserinvoicing");

                entity.Property(e => e.Mycustcurdate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mycustcurdate")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mycustninetydate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mycustninetydate")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mycustonetwentydate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mycustonetwentydate")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mycustsixtydate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mycustsixtydate")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mycustthirtydate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("mycustthirtydate")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NBaudrate)
                    .HasColumnName("nBaudrate")
                    .HasDefaultValueSql("((115200))");

                entity.Property(e => e.NSerialPort)
                    .HasColumnName("nSerialPort")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.Ndp)
                    .HasColumnName("ndp")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.Nearestshilling)
                    .HasColumnName("nearestshilling")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Neohybridorder)
                    .HasColumnName("NEOHYBRIDORDER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Newcusageing)
                    .HasColumnName("newcusageing")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Newsuppageing)
                    .HasColumnName("newsuppageing")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NextCsalenum)
                    .HasColumnName("NEXT_CSALENUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NextInvoicenum)
                    .HasColumnName("NEXT_INVOICENUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nextautobtrnum)
                    .HasColumnName("NEXTAUTOBTRNUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextretNum)
                    .HasColumnName("Nextret_num")
                    .HasDefaultValueSql("((50000000))");

                entity.Property(e => e.Nextsnvupdatenum)
                    .HasColumnName("NEXTSNVUPDATENUM")
                    .HasDefaultValueSql("((1000000000))");

                entity.Property(e => e.Nhifdone)
                    .HasColumnName("nhifdone")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nocashbooktillrecon)
                    .HasColumnName("NOCASHBOOKTILLRECON")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nodocdeleting)
                    .HasColumnName("nodocdeleting")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nolocationonsearch)
                    .HasColumnName("nolocationonsearch")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nonregcashinvprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("nonregcashinvprefix")
                    .HasDefaultValueSql("('XNJ')");

                entity.Property(e => e.Nonregcnoteprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("nonregcnoteprefix")
                    .HasDefaultValueSql("('XNC')");

                entity.Property(e => e.Nonreginvprefix)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("nonreginvprefix")
                    .HasDefaultValueSql("('XNI')");

                entity.Property(e => e.Noreminder).HasColumnName("NOREMINDER");

                entity.Property(e => e.Norepeatitem)
                    .HasColumnName("norepeatitem")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nosaleabovemaxprice)
                    .HasColumnName("NOSALEABOVEMAXPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nosalebelowaveragecost)
                    .HasColumnName("nosalebelowaveragecost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nosalebelowlastcost)
                    .HasColumnName("nosalebelowlastcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nosalebelowminimumprice)
                    .HasColumnName("nosalebelowminimumprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Notransfer)
                    .HasColumnName("notransfer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nrstshill)
                    .HasColumnName("nrstshill")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nrstshillmanf)
                    .HasColumnName("nrstshillmanf")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nrstshillsupp)
                    .HasColumnName("nrstshillsupp")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OneDayTill).HasDefaultValueSql("((0))");

                entity.Property(e => e.Openitem)
                    .HasColumnName("OPENITEM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Openstock)
                    .HasColumnName("OPENSTOCK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OptimiseSalesentry)
                    .HasColumnName("OPTIMISE_SALESENTRY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Orderprice)
                    .HasColumnName("ORDERPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Orderpriceprocess)
                    .HasColumnName("orderpriceprocess")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PartBreakdown).HasColumnName("PART_BREAKDOWN");

                entity.Property(e => e.Partwhole)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Passage)
                    .HasColumnName("passage")
                    .HasDefaultValueSql("((30))");

                entity.Property(e => e.Passcomplex)
                    .HasColumnName("passcomplex")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Passhistory)
                    .HasColumnName("passhistory")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Passmaxtry)
                    .HasColumnName("passmaxtry")
                    .HasDefaultValueSql("((3))");

                entity.Property(e => e.Passminlength)
                    .HasColumnName("passminlength")
                    .HasDefaultValueSql("((6))");

                entity.Property(e => e.PastelDatapath)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PASTEL_DATAPATH");

                entity.Property(e => e.PastelGlpath)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PASTEL_GLPATH");

                entity.Property(e => e.Paydateischqdate)
                    .HasColumnName("PAYDATEISCHQDATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Paymentcentral)
                    .HasColumnName("paymentcentral")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PaymodeTillAlter).HasDefaultValueSql("((0))");

                entity.Property(e => e.Pdcashbookopendate)
                    .HasColumnName("PDCASHBOOKOPENDATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PdqBankAcct)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("PDQ_BANK_ACCT");

                entity.Property(e => e.Pdqaccount)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PDQACCOUNT");

                entity.Property(e => e.Pdqcommision)
                    .HasColumnName("PDQCOMMISION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pdtoglonmaturity)
                    .HasColumnName("pdtoglonmaturity")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Periodcount).HasColumnName("periodcount");

                entity.Property(e => e.Phamacoreproduction)
                    .HasColumnName("phamacoreproduction")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Phamakpr)
                    .HasColumnName("PHAMAKPR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pharmacy)
                    .HasColumnName("pharmacy")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Phone)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PhysicalAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Pickcheque)
                    .HasColumnName("pickcheque")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pickchequeonly)
                    .HasColumnName("pickchequeonly")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pickcredref)
                    .HasColumnName("pickcredref")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Pickcustdiscount)
                    .HasColumnName("pickcustdiscount")
                    .HasDefaultValueSql("((3))");

                entity.Property(e => e.Pickdepartment)
                    .HasColumnName("pickdepartment")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pickdeptforce)
                    .HasColumnName("pickdeptforce")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pickpriceadjustmkup)
                    .HasColumnName("pickpriceadjustmkup")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pinno)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("PINNO");

                entity.Property(e => e.Placcount)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PLACCOUNT");

                entity.Property(e => e.PointsCustomerAcct)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PointsExpenseAcct)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PointsSalesAcct)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Pointsystem)
                    .HasColumnName("POINTSYSTEM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PorderCrystal)
                    .IsRequired()
                    .HasColumnName("PORDER_CRYSTAL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Porderdirect)
                    .HasColumnName("porderdirect")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pos).HasColumnName("pos");

                entity.Property(e => e.Prembilling)
                    .HasColumnName("PREMBILLING")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Prembusiness)
                    .HasColumnName("PREMBUSINESS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Prembusinesssales)
                    .HasColumnName("PREMBUSINESSSALES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Prembusinessstocks)
                    .HasColumnName("PREMBUSINESSSTOCKS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Premcontacts)
                    .HasColumnName("PREMCONTACTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Premfa)
                    .HasColumnName("PREMFA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Prempayroll)
                    .HasColumnName("PREMPAYROLL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pricecheckalways)
                    .HasColumnName("pricecheckalways")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pricewarningpopup)
                    .HasColumnName("pricewarningpopup")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pricingwhole)
                    .HasColumnName("pricingwhole")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Printcsalefromcashier)
                    .HasColumnName("printcsalefromcashier")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Printdelvafterinvoice)
                    .HasColumnName("PRINTDELVAFTERINVOICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Printduostatement)
                    .HasColumnName("printduostatement")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Printduostatementsupp)
                    .HasColumnName("printduostatementsupp")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PrintinvoicePersalescode)
                    .HasColumnName("PRINTINVOICE_PERSALESCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Printlabelonsave)
                    .HasColumnName("printlabelonsave")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Printlocalcurrencystatement)
                    .HasColumnName("PRINTLOCALCURRENCYSTATEMENT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Printpostedreceiptsonly)
                    .HasColumnName("printpostedreceiptsonly")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Printreceiptonsave)
                    .HasColumnName("PRINTRECEIPTONSAVE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Processrefills)
                    .HasColumnName("processrefills")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Prodpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("prodpartwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PurchasecodeDefaultinvoice)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Purchasecode_defaultinvoice")
                    .IsFixedLength(true);

                entity.Property(e => e.Purchaseorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("purchaseorderprefix")
                    .HasDefaultValueSql("('POD')");

                entity.Property(e => e.Purchasepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("purchasepartwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PurchasetransactionlevelPosting)
                    .HasColumnName("PURCHASETRANSACTIONLEVEL_POSTING")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Purchsalesbranchdocs)
                    .HasColumnName("purchsalesbranchdocs")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QuotationCrystal).HasColumnName("QUOTATION_CRYSTAL");

                entity.Property(e => e.Quotationdays)
                    .HasColumnName("quotationdays")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quotationprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("quotationprefix")
                    .HasDefaultValueSql("('QUT')");

                entity.Property(e => e.Quotationpricefree)
                    .HasColumnName("quotationpricefree")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quotepriceprocess)
                    .HasColumnName("quotepriceprocess")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RctrefPrefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("RCTREF_PREFIX")
                    .IsFixedLength(true);

                entity.Property(e => e.Receiptprice)
                    .HasColumnName("RECEIPTPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ReceiptsCrystal).HasColumnName("RECEIPTS_CRYSTAL");

                entity.Property(e => e.Reconchequedate).HasColumnName("reconchequedate");

                entity.Property(e => e.Redeemcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("REDEEMcode");

                entity.Property(e => e.Redeempoints)
                    .HasColumnName("REDEEMPOINTS")
                    .HasDefaultValueSql("((1000))");

                entity.Property(e => e.RefillchargeinvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("refillchargeinv_code");

                entity.Property(e => e.Refillijrntypenum)
                    .HasColumnName("refillijrntypenum")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Refreshinventory)
                    .HasColumnName("refreshinventory")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Registered).HasColumnName("registered");

                entity.Property(e => e.Reinforceexpiry)
                    .HasColumnName("reinforceexpiry")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Relaxcashterms)
                    .HasColumnName("RELAXCASHTERMS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Remoteapprove)
                    .HasColumnName("remoteapprove")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Remoteauthorise)
                    .HasColumnName("remoteauthorise")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ReorderBysales).HasColumnName("REORDER_BYSALES");

                entity.Property(e => e.ReorderDuration)
                    .HasColumnName("REORDER_DURATION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ReorderMax)
                    .HasColumnName("REORDER_MAX")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ReorderMin)
                    .HasColumnName("REORDER_MIN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Reprintinvoicepages)
                    .HasColumnName("reprintinvoicepages")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Retaildbname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("retaildbname");

                entity.Property(e => e.Retaildbsource)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("retaildbsource");

                entity.Property(e => e.Retailsale).HasColumnName("retailsale");

                entity.Property(e => e.Retailwholesale)
                    .HasColumnName("retailwholesale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Returndescsort)
                    .HasColumnName("returndescsort")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Returndocpickanyitem)
                    .HasColumnName("RETURNDOCPICKANYITEM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Returndocpickanyitemgret)
                    .HasColumnName("RETURNDOCPICKANYITEMGRET")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Returnfromitems)
                    .HasColumnName("returnfromitems")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Returnpart)
                    .HasColumnName("returnpart")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RoundupPrice)
                    .HasColumnName("ROUNDUP_PRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Runbal)
                    .HasColumnName("runbal")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Salebelowmin)
                    .HasColumnName("salebelowmin")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Saleinvdirect)
                    .HasColumnName("saleinvdirect")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Salepartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("salepartwhole")
                    .HasDefaultValueSql("('P')")
                    .IsFixedLength(true);

                entity.Property(e => e.SalesanalysisA)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("salesanalysis_a")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesanalysisB)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("salesanalysis_B")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesanalysisC)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("salesanalysis_C")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesanalysisD)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("salesanalysis_D")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesanalysisE)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("salesanalysis_E")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesanalysisF)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("salesanalysis_f")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesanalysisG)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("salesanalysis_g")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesanalysisH)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("salesanalysis_h")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesanalysisI)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("salesanalysis_i")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesanalysisJ)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("salesanalysis_j")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesanalysisK)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("salesanalysis_k")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesanalysisL)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("salesanalysis_l")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesanalysisM)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("salesanalysis_m")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesanalysisN)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("salesanalysis_n")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesanalysisO)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("salesanalysis_o")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalescodeDefaultcsale)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALESCODE_DEFAULTCSALE");

                entity.Property(e => e.SalescodeDefaultinvoice)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALESCODE_DEFAULTINVOICE");

                entity.Property(e => e.Salescodefromcuscode)
                    .HasColumnName("SALESCODEFROMCUSCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Salesdeliverybeforepost)
                    .HasColumnName("salesdeliverybeforepost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Salesdeliverybeforepostcash)
                    .HasColumnName("salesdeliverybeforepostcash")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Salesdp)
                    .HasColumnName("salesdp")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.Salesinvapproval)
                    .HasColumnName("salesinvapproval")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Salesinvoicelines)
                    .HasColumnName("salesinvoicelines")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Salesinvoiceprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("salesinvoiceprefix")
                    .HasDefaultValueSql("('SNV')");

                entity.Property(e => e.SalesorderCrystal)
                    .IsRequired()
                    .HasColumnName("SALESORDER_CRYSTAL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Salesorderprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("salesorderprefix")
                    .HasDefaultValueSql("('SOD')");

                entity.Property(e => e.SalestransactionlevelPosting)
                    .HasColumnName("SALESTRANSACTIONLEVEL_POSTING")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SearchActiveing)
                    .HasColumnName("SEARCH_ACTIVEING")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Seperatecashcreditstatements)
                    .HasColumnName("seperatecashcreditstatements")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Seperatecashinvoice)
                    .HasColumnName("seperatecashinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Shelfclass)
                    .HasColumnName("shelfclass")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Shortcompany)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("shortcompany");

                entity.Property(e => e.Showcostofsales).HasColumnName("SHOWCOSTOFSALES");

                entity.Property(e => e.Showlastcashdisc)
                    .HasColumnName("showlastcashdisc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Showlastcostsearch)
                    .HasColumnName("showlastcostsearch")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Shownobonus)
                    .HasColumnName("shownobonus")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Showspecialprice)
                    .HasColumnName("showspecialprice")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Showspecialpriceinvoice)
                    .HasColumnName("showspecialpriceinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Singlecashier)
                    .HasColumnName("singlecashier")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Singlecashsalelogin)
                    .HasColumnName("singlecashsalelogin")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Singletill)
                    .HasColumnName("singletill")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Singleuserlogout)
                    .HasColumnName("singleuserlogout")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Singleuserlogoutborder)
                    .HasColumnName("singleuserlogoutborder")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Singleuserlogoutbtr)
                    .HasColumnName("singleuserlogoutbtr")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SinvNotmorethanSorder).HasColumnName("sinv_notmorethan_sorder");

                entity.Property(e => e.SinvWSorder).HasColumnName("sinv_w_sorder");

                entity.Property(e => e.SinvWTransporter).HasColumnName("sinv_w_transporter");

                entity.Property(e => e.Smartcheck)
                    .HasColumnName("SMARTCHECK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Smuprice)
                    .HasColumnName("smuprice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sortorderbysubgroup)
                    .HasColumnName("sortorderbysubgroup")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Specialnocheck)
                    .HasColumnName("specialnocheck")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Spinvgrnpickfull)
                    .HasColumnName("spinvgrnpickfull")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Splockcash)
                    .HasColumnName("splockcash")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Splockinv)
                    .HasColumnName("splockinv")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sppriceanddisc)
                    .HasColumnName("sppriceanddisc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StatementByperiod)
                    .IsRequired()
                    .HasColumnName("STATEMENT_BYPERIOD")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StatementByperiodsupp)
                    .HasColumnName("STATEMENT_BYPERIODSUPP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StatementCrystal)
                    .HasColumnName("STATEMENT_CRYSTAL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StatementEnddate)
                    .HasColumnType("datetime")
                    .HasColumnName("STATEMENT_ENDDATE");

                entity.Property(e => e.StatementMessage)
                    .HasMaxLength(2500)
                    .HasColumnName("STATEMENT_MESSAGE");

                entity.Property(e => e.StatementObjectname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATEMENT_OBJECTNAME");

                entity.Property(e => e.StatementStartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("STATEMENT_STARTDATE");

                entity.Property(e => e.StatementToday)
                    .HasColumnType("datetime")
                    .HasColumnName("STATEMENT_TODAY");

                entity.Property(e => e.StatementUseformula)
                    .HasColumnName("STATEMENT_USEFORMULA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stkref)
                    .HasColumnName("stkref")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stkstatus)
                    .HasColumnName("stkstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stktableupdate)
                    .HasColumnName("stktableupdate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stktakebarcode)
                    .HasColumnName("stktakebarcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stkupdatemode)
                    .HasColumnName("stkupdatemode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StockEnddate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOCK_ENDDATE");

                entity.Property(e => e.StockStartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOCK_STARTDATE");

                entity.Property(e => e.Stockadjastgl)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("stockadjastgl");

                entity.Property(e => e.Stockadjexpgl)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("stockadjexpgl");

                entity.Property(e => e.Stockbranch)
                    .HasColumnName("STOCKBRANCH")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stockinlocation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stockinlocation");

                entity.Property(e => e.Stockmoveincludebt)
                    .HasColumnName("stockmoveincludebt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stockonsave)
                    .HasColumnName("stockonsave")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stockoutlocation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stockoutlocation");

                entity.Property(e => e.Stockprocessdate)
                    .HasColumnType("date")
                    .HasColumnName("STOCKPROCESSDATE")
                    .HasDefaultValueSql("('01/01/1900')");

                entity.Property(e => e.StocksanalysisA)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stocksanalysis_a");

                entity.Property(e => e.StocksanalysisB)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stocksanalysis_b");

                entity.Property(e => e.StocksanalysisC)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stocksanalysis_c");

                entity.Property(e => e.StocksanalysisD)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stocksanalysis_d");

                entity.Property(e => e.StocksanalysisE)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stocksanalysis_e");

                entity.Property(e => e.StocksanalysisF)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stocksanalysis_f")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StocksanalysisG)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stocksanalysis_g")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StocksanalysisH)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stocksanalysis_h")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StocksanalysisI)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stocksanalysis_i")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StocksanalysisJ)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stocksanalysis_j")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StocksanalysisK)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stocksanalysis_k")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StocksanalysisL)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stocksanalysis_l")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StocksanalysisM)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stocksanalysis_m")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StocksanalysisN)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stocksanalysis_n")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StocksanalysisO)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stocksanalysis_o")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Stocksonly)
                    .HasColumnName("STOCKSONLY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stocktakegl)
                    .HasColumnName("stocktakegl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stocktakemode)
                    .HasColumnName("stocktakemode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Stocktakemodifymainclass)
                    .HasColumnName("STOCKTAKEMODIFYMAINCLASS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stocktakemodifyshelfclass)
                    .HasColumnName("STOCKTAKEMODIFYSHELFCLASS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stocktakpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("stocktakpartwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.StockupdateAllownonsubgrouptrans)
                    .HasColumnName("stockupdate_allownonsubgrouptrans")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StockupdateCheckvariance)
                    .HasColumnName("stockupdate_checkvariance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StockupdateallLoc)
                    .HasColumnName("stockupdateall_loc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SuppPrice).HasColumnName("supp_price");

                entity.Property(e => e.Suppbarcode)
                    .HasColumnName("suppbarcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Suppinvcheckpendingbranchorder)
                    .HasColumnName("suppinvcheckpendingbranchorder")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Supplierentrycode)
                    .HasColumnName("supplierentrycode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Supplierinvoiceprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("supplierinvoiceprefix")
                    .HasDefaultValueSql("('SPV')");

                entity.Property(e => e.Supppricelist)
                    .HasColumnName("supppricelist")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SuppstatementCrystal).HasColumnName("suppstatement_crystal");

                entity.Property(e => e.SupstatementEnddate)
                    .HasColumnType("datetime")
                    .HasColumnName("SUPSTATEMENT_ENDDATE");

                entity.Property(e => e.SupstatementStartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("SUPSTATEMENT_STARTDATE");

                entity.Property(e => e.SupstatementToday)
                    .HasColumnType("datetime")
                    .HasColumnName("SUPSTATEMENT_TODAY");

                entity.Property(e => e.SysDateformat)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SYS_DATEFORMAT");

                entity.Property(e => e.Tempstocktake)
                    .HasColumnType("datetime")
                    .HasColumnName("TEMPSTOCKTAKE");

                entity.Property(e => e.Tgstockdepth0)
                    .HasColumnName("tgstockdepth0")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tgstockdepth1)
                    .HasColumnName("tgstockdepth1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Theatreprefix)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("theatreprefix")
                    .HasDefaultValueSql("('THT')");

                entity.Property(e => e.Till)
                    .HasColumnName("till")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillbanking)
                    .HasColumnName("tillbanking")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillexcessacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TILLEXCESSACCT");

                entity.Property(e => e.Tillgl)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tillgl")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tillprintlogout)
                    .HasColumnName("tillprintlogout")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillsafeacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TILLSAFEACCT");

                entity.Property(e => e.Town)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Trackbtr)
                    .HasColumnName("TRACKBTR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transactcontrol)
                    .HasColumnName("TRANSACTCONTROL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transferdisc)
                    .HasColumnName("transferdisc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transferminutes)
                    .HasColumnName("transferminutes")
                    .HasDefaultValueSql("((30))");

                entity.Property(e => e.Transferpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("transferpartwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Transferprice)
                    .HasColumnName("TRANSFERPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transfertime)
                    .HasColumnType("datetime")
                    .HasColumnName("transfertime");

                entity.Property(e => e.Translockdays)
                    .HasColumnName("translockdays")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Twocashinvoices)
                    .HasColumnName("twocashinvoices")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Twocashsales)
                    .HasColumnName("twocashsales")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Twocnotes)
                    .HasColumnName("twocnotes")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Twoinvoices)
                    .HasColumnName("twoinvoices")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Twolabels)
                    .HasColumnName("twolabels")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Twoquotations)
                    .HasColumnName("twoquotations")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UnbatchDocs).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdateAvgcost)
                    .HasColumnName("UPDATE_AVGCOST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdateRetailpriceonsale)
                    .HasColumnName("UPDATE_RETAILPRICEONSALE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Updateavgcostontransfer)
                    .HasColumnName("UPDATEAVGCOSTONTRANSFER")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Updatecostontransfer)
                    .HasColumnName("UPDATECOSTONTRANSFER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Updateinventoryontransfer)
                    .HasColumnName("UPDATEINVENTORYONTRANSFER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Updatelastcostontransfer)
                    .HasColumnName("UPDATELASTCOSTONTRANSFER")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Updatemaxpriceontransfer)
                    .HasColumnName("UPDATEMAXPRICEONTRANSFER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Updateminpriceontransfer)
                    .HasColumnName("UPDATEMINPRICEONTRANSFER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Updateretailpriceontransfer)
                    .HasColumnName("UPDATERETAILPRICEONTRANSFER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Updatespecialpriceontransfer)
                    .HasColumnName("UPDATESPECIALPRICEONTRANSFER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Updatetradepriceontransfer)
                    .HasColumnName("UPDATETRADEPRICEONTRANSFER")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UseAgeingperiod)
                    .HasColumnName("USE_AGEINGPERIOD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UseCdate)
                    .HasColumnName("USE_CDATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UseChequedate)
                    .HasColumnName("USE_CHEQUEDATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UseDelivery)
                    .HasColumnName("USE_DELIVERY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UsePreferredprice)
                    .HasColumnName("USE_PREFERREDPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UseRetailprice)
                    .HasColumnName("USE_RETAILPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UseTechgel)
                    .HasColumnName("USE_TECHGEL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Usecombinedstockorders)
                    .HasColumnName("usecombinedstockorders")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Usecuspricelist)
                    .HasColumnName("usecuspricelist")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Usesupplierprice)
                    .HasColumnName("USESUPPLIERPRICE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.V10label)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v10label");

                entity.Property(e => e.V1label)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v1label");

                entity.Property(e => e.V2label)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v2label");

                entity.Property(e => e.V3label)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v3label");

                entity.Property(e => e.V4label)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v4label");

                entity.Property(e => e.V5label)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v5label");

                entity.Property(e => e.V6label)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v6label");

                entity.Property(e => e.V7label)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v7label");

                entity.Property(e => e.V8label)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v8label");

                entity.Property(e => e.V9label)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("v9label");

                entity.Property(e => e.Valueforpoints)
                    .HasColumnName("valueforpoints")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.Vatno)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VATNO");

                entity.Property(e => e.Verif2)
                    .HasColumnName("VERIF2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Viewtoakill)
                    .HasColumnType("datetime")
                    .HasColumnName("viewtoakill");

                entity.Property(e => e.Viewuncollectedtoday)
                    .HasColumnName("viewuncollectedtoday")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Warddone)
                    .HasColumnName("warddone")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Whvatcode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("WHVATCODE")
                    .HasDefaultValueSql("('12')");

                entity.Property(e => e.Yesreorder).HasColumnName("yesreorder");

                entity.Property(e => e.Zerolevel).HasColumnName("ZEROLEVEL");

                entity.Property(e => e.Zeroprice)
                    .HasColumnName("zeroprice")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Sysmodule>(entity =>
            {
                entity.HasKey(e => e.ModuleCode);

                entity.ToTable("SYSMODULES");

                entity.HasIndex(e => e.ModuleCode, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ModuleCode)
                    .ValueGeneratedNever()
                    .HasColumnName("MODULE_CODE");

                entity.Property(e => e.Area)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AREA");

                entity.Property(e => e.Loadable).HasColumnName("LOADABLE");

                entity.Property(e => e.Modul)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MODUL_");
            });

            modelBuilder.Entity<Sysnextnumber>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SYSNEXTNUMBERS");

                entity.Property(e => e.Cashpricepromoentrynum)
                    .HasColumnName("CASHPRICEPROMOENTRYNUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextBmtNum)
                    .HasColumnName("nextBMT_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextBrinDetNum)
                    .HasColumnName("nextBRIN_DET_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextBrnDetNum)
                    .HasColumnName("nextBRN_DET_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextBtransDetNum)
                    .HasColumnName("nextBTRANS_DET_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextCashpricepromoentrynum)
                    .HasColumnName("nextCASHPRICEPROMOENTRYNUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextIbiDetNum)
                    .HasColumnName("nextIBI_DET_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextMnfDetNum)
                    .HasColumnName("nextMNF_DET_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextMnfNum)
                    .HasColumnName("nextMNF_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextMsgnum)
                    .HasColumnName("NEXT_MSGNUM")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NextNxtstkadj)
                    .HasColumnName("nextNXTSTKADJ")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextPaymodenum)
                    .HasColumnName("nextPAYMODENUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextPrice)
                    .HasColumnName("NEXT_PRICE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NextQuoDetNumon)
                    .HasColumnName("nextQUO_DET_NUMON")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextSppriceentrynum)
                    .HasColumnName("nextSPPRICEENTRYNUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextacctcatgcode)
                    .HasColumnName("NEXTACCTCATGCODE")
                    .HasDefaultValueSql("((20))");

                entity.Property(e => e.NextauthNum)
                    .HasColumnName("nextauth_num")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Nextautobtrnum)
                    .HasColumnName("NEXTAUTOBTRNUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbillNum)
                    .HasColumnName("NEXTBILL_NUM")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Nextbnkcode)
                    .HasColumnName("NEXTBNKCODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextborderDetNum)
                    .HasColumnName("nextborder_det_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextborderNum)
                    .HasColumnName("nextborder_num")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Nextbranchcode)
                    .HasColumnName("NEXTBRANCHCODE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NextbrepNum)
                    .HasColumnName("nextbrep_num")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NextbrnNum)
                    .HasColumnName("nextbrn_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextbtransNum)
                    .HasColumnName("nextbtrans_num")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NextcashPriceentrynum)
                    .HasColumnName("nextcashPRICEENTRYNUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcinvNum)
                    .HasColumnName("nextcinv_num")
                    .HasDefaultValueSql("((90000001))");

                entity.Property(e => e.Nextclasscode)
                    .HasColumnName("nextclasscode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcnoteDetNum)
                    .HasColumnName("nextcnote_det_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcnoteNum)
                    .HasColumnName("NEXTCNOTE_NUM")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NextcontNum)
                    .HasColumnName("nextcont_num")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NextcsaleDetNum)
                    .HasColumnName("nextcsale_det_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextcsaleNum)
                    .HasColumnName("NEXTCSALE_NUM")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NextcusCode).HasColumnName("NEXTCUS_CODE");

                entity.Property(e => e.NextdedNum)
                    .HasColumnName("NEXTDED_NUM")
                    .HasDefaultValueSql("((5))");

                entity.Property(e => e.NextdeptCode)
                    .HasColumnName("NEXTDEPT_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextdeptNum)
                    .HasColumnName("NEXTDEPT_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextdispatchnum)
                    .HasColumnName("NEXTDISPATCHNUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextedCode)
                    .HasColumnName("NEXTED_CODE")
                    .HasDefaultValueSql("((21))");

                entity.Property(e => e.NextempNum)
                    .HasColumnName("NEXTEMP_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NexternNum)
                    .HasColumnName("NEXTERN_NUM")
                    .HasDefaultValueSql("((5))");

                entity.Property(e => e.NexteventNum)
                    .HasColumnName("Nextevent_num")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Nextforexentrynum)
                    .HasColumnName("nextforexentrynum")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextformcode)
                    .HasColumnName("nextformcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextgljNum)
                    .HasColumnName("NEXTGLJ_NUM")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Nextgljrnnum)
                    .HasColumnName("NEXTGLJRNNUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextgp1code)
                    .HasColumnName("nextgp1code")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Nextgp2code)
                    .HasColumnName("nextgp2code")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Nextgp3code)
                    .HasColumnName("nextgp3code")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Nextgp4code)
                    .HasColumnName("nextgp4code")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Nextgpcode)
                    .HasColumnName("NEXTGPCODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextgretNum)
                    .HasColumnName("NEXTGRET_NUM")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NextgrnNum)
                    .HasColumnName("NEXTGRN_NUM")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Nexthrsid)
                    .HasColumnName("NEXTHRSID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextibiNum).HasColumnName("Nextibi_num");

                entity.Property(e => e.Nextijrnnum)
                    .HasColumnName("NEXTIJRNNUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextinvCode)
                    .HasColumnName("nextinv_code")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextinvjNum)
                    .HasColumnName("NEXTINVJ_NUM")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NextjournNum)
                    .HasColumnName("NEXTJOURN_NUM")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Nextloan)
                    .HasColumnName("NEXTLOAN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextlocCode)
                    .HasColumnName("NEXTLOC_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextloydetnum)
                    .HasColumnName("NEXTLOYDETNUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextloynum)
                    .HasColumnName("NEXTLOYNUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextmemberno)
                    .HasColumnName("NEXTMEMBERNO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Nextmnfcode)
                    .HasColumnName("NEXTMNFCODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextmutliselnum)
                    .HasColumnName("NEXTMUTLISELNUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextnoncnoteNum)
                    .HasColumnName("nextnoncnote_num")
                    .HasDefaultValueSql("((60000000))");

                entity.Property(e => e.NextnonregcashinvNum)
                    .HasColumnName("nextnonregcashinv_num")
                    .HasDefaultValueSql("((70000000))");

                entity.Property(e => e.NextnonreginvNum)
                    .HasColumnName("nextnonreginv_num")
                    .HasDefaultValueSql("((60000000))");

                entity.Property(e => e.Nextot)
                    .HasColumnName("NEXTOT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextpacklist)
                    .HasColumnName("NEXTPACKLIST")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextpayDetnum)
                    .HasColumnName("nextpay_detnum")
                    .HasDefaultValueSql("((10000))");

                entity.Property(e => e.Nextpayalloc)
                    .HasColumnName("nextpayalloc")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Nextpayauto)
                    .HasColumnName("NEXTPAYAUTO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextpensNum)
                    .HasColumnName("NEXTPENS_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextpkgCode)
                    .HasColumnName("nextpkg_code")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextpmNum)
                    .HasColumnName("NEXTPM_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextporderNum)
                    .HasColumnName("NEXTPORDER_NUM")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NextprescNum)
                    .HasColumnName("nextpresc_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextquoNum)
                    .HasColumnName("NEXTQUO_NUM")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NextrecurrCode)
                    .HasColumnName("NEXTRECURR_CODE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NextremndNum)
                    .HasColumnName("nextremnd_num")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NextreqNum)
                    .HasColumnName("NEXTreq_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextrptDetnum)
                    .HasColumnName("nextrpt_detnum")
                    .HasDefaultValueSql("((10000))");

                entity.Property(e => e.Nextrptalloc)
                    .HasColumnName("nextrptalloc")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Nextrptcat)
                    .HasColumnName("NEXTRPTCAT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsaleinvDetNum)
                    .HasColumnName("nextsaleinv_det_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsaleinvNum)
                    .HasColumnName("NEXTSALEINV_NUM")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Nextsbgcode)
                    .HasColumnName("NEXTSBGCODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextscjournNum)
                    .HasColumnName("nextscjourn_num")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsinvNum)
                    .HasColumnName("NEXTSINV_NUM")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Nextsmancode)
                    .HasColumnName("NEXTSMANCODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsoNum)
                    .HasColumnName("NEXTSO_NUM")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NextstkNum)
                    .HasColumnName("NEXTSTK_NUM")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NextstkadjNum).HasColumnName("NEXTSTKADJ_NUM");

                entity.Property(e => e.NextstkoutNum).HasColumnName("NEXTSTKOUT_NUM");

                entity.Property(e => e.Nextstkpricenum)
                    .HasColumnName("NEXTSTKPRICENUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextstkref)
                    .HasColumnName("nextstkref")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextsuppCode).HasColumnName("NEXTSUPP_CODE");

                entity.Property(e => e.NexttheatreNum)
                    .HasColumnName("NEXTTHEATRE_NUM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nextusertoken)
                    .HasColumnName("nextusertoken")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextvehCode)
                    .HasColumnName("NEXTVEH_CODE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextvehDeliveryid)
                    .HasColumnName("NEXTVEH_DELIVERYID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextvehMakeid)
                    .HasColumnName("NEXTVEH_MAKEID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Userdataid)
                    .HasColumnName("userdataid")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<TabNam>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TabNam");

                entity.Property(e => e.CompQty).HasColumnName("COMP_QTY");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("text")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.InvCode)
                    .HasColumnType("text")
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasColumnType("text")
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .HasColumnType("text")
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.LocCode)
                    .HasColumnType("text")
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.StockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOCK_DATE");

                entity.Property(e => e.StockQty).HasColumnName("STOCK_QTY");
            });

            modelBuilder.Entity<TaxType>(entity =>
            {
                entity.HasKey(e => e.TaxCode)
                    .HasName("PK_TAX_TYPES")
                    .IsClustered(false);

                entity.ToTable("TAX_TYPE");

                entity.HasIndex(e => e.Description, "DESCRIPTION")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Amount, "UNQTAXAMT")
                    .IsUnique();

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");
            });

            modelBuilder.Entity<Taxis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TAXES");

                entity.HasIndex(e => e.Taxcode, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Taxcode).HasColumnName("TAXCODE");

                entity.Property(e => e.Taxvalue).HasColumnName("TAXVALUE");
            });

            modelBuilder.Entity<Taxtable>(entity =>
            {
                entity.HasKey(e => e.Taxpos);

                entity.ToTable("TAXTABLE");

                entity.Property(e => e.Taxpos)
                    .ValueGeneratedNever()
                    .HasColumnName("TAXPOS");

                entity.Property(e => e.Incomebracket)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("INCOMEBRACKET");

                entity.Property(e => e.Payyear)
                    .HasColumnName("PAYYEAR")
                    .HasDefaultValueSql("((2010))");

                entity.Property(e => e.Taxincome).HasColumnName("TAXINCOME");

                entity.Property(e => e.Taxontaaxableincome)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TAXONTAAXABLEINCOME");

                entity.Property(e => e.Taxrate).HasColumnName("TAXRATE");
            });

            modelBuilder.Entity<TblMonth>(entity =>
            {
                entity.HasKey(e => e.SalesMonth)
                    .IsClustered(false);

                entity.ToTable("tblMonths");

                entity.Property(e => e.SalesMonth).ValueGeneratedNever();

                entity.Property(e => e.MonthName)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblReminder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblReminders");

                entity.Property(e => e.Reminder)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tblvwgldoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TBLVWGLDOCS");

                entity.HasIndex(e => e.ModuleCode, "IX_TBLVWGLDOCS");

                entity.HasIndex(e => e.Docnumber, "IX_TBLVWGLDOCS_1");

                entity.Property(e => e.Cfromacc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CFROMACC");

                entity.Property(e => e.Cfromname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CFROMNAME");

                entity.Property(e => e.Cusname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUSNAME");

                entity.Property(e => e.Docnum).HasColumnName("DOCNUM");

                entity.Property(e => e.Docnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCNUMBER");

                entity.Property(e => e.Doctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DOCTYPE");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.Reference)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCE");

                entity.Property(e => e.Scode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SCODE");

                entity.Property(e => e.Whichamt).HasColumnName("WHICHAMT");

                entity.Property(e => e.Whichcode).HasColumnName("WHICHCODE");
            });

            modelBuilder.Entity<TheatreC>(entity =>
            {
                entity.HasKey(e => new { e.Thenumber, e.Username });

                entity.ToTable("THEATRE_c");

                entity.Property(e => e.Thenumber).HasColumnName("thenumber");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Thecheck).HasColumnName("thecheck");
            });

            modelBuilder.Entity<TheatreDt>(entity =>
            {
                entity.HasKey(e => e.TheatreDetNum)
                    .IsClustered(false);

                entity.ToTable("THEATRE_DT");

                entity.Property(e => e.TheatreDetNum).HasColumnName("THEATRE_DET_NUM");

                entity.Property(e => e.AdultChild)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("adult_child")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Authorisecode)
                    .HasColumnName("authorisecode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonus)
                    .HasColumnName("bonus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.Clcoredoc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CLCOREDOC")
                    .HasDefaultValueSql("('PHM')")
                    .IsFixedLength(true);

                entity.Property(e => e.Clvisit)
                    .HasColumnName("CLVISIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Costofsale)
                    .HasColumnName("costofsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.D1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d1");

                entity.Property(e => e.D2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d2");

                entity.Property(e => e.D3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("d3");

                entity.Property(e => e.DeliveryNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERY_NO");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Documentnumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTNUMBER");

                entity.Property(e => e.Excise)
                    .HasColumnName("excise")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Expiry)
                    .HasColumnType("datetime")
                    .HasColumnName("expiry");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.ManufC)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("manufC");

                entity.Property(e => e.ModuleCode)
                    .HasColumnName("Module_Code")
                    .HasDefaultValueSql("((4))");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Newprice).HasColumnName("NEWPRICE");

                entity.Property(e => e.Newtotalcost).HasColumnName("NEWTOTALCOST");

                entity.Property(e => e.OrdQuantity)
                    .HasColumnName("ord_quantity")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PreGrn)
                    .IsRequired()
                    .HasColumnName("Pre_GRN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.ProcCode)
                    .HasColumnName("PROC_CODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyLeft).HasColumnName("Qty_Left");

                entity.Property(e => e.QtyOrdered).HasColumnName("QTY_ORDERED");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Returned)
                    .HasColumnName("returned")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SoDetNum)
                    .HasColumnName("SO_DET_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.Taken)
                    .HasColumnName("taken")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxAmt).HasColumnName("TAX_AMT");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.TheatreNum).HasColumnName("THEATRE_NUM");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.Property(e => e.W1).HasColumnName("w1");

                entity.Property(e => e.W2).HasColumnName("w2");
            });

            modelBuilder.Entity<TheatreHd>(entity =>
            {
                entity.HasKey(e => e.TheatreNum)
                    .IsClustered(false);

                entity.ToTable("THEATRE_HD");

                entity.Property(e => e.TheatreNum)
                    .ValueGeneratedNever()
                    .HasColumnName("THEATRE_NUM");

                entity.Property(e => e.Amounttopay).HasColumnName("AMOUNTTOPAY");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Authorisedby)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("authorisedby");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bposted)
                    .HasColumnName("bposted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BranchCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH_CODE");

                entity.Property(e => e.Cashsaleinvoice)
                    .HasColumnName("cashsaleinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Clcoreclosed)
                    .HasColumnName("CLCORECLOSED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Clcoreclosedate)
                    .HasColumnType("datetime")
                    .HasColumnName("CLCORECLOSEDATE");

                entity.Property(e => e.Clcoredoc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CLCOREDOC")
                    .HasDefaultValueSql("('PHM')")
                    .IsFixedLength(true);

                entity.Property(e => e.Clvisit)
                    .HasColumnName("CLVISIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Comments)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.Cuspoints)
                    .HasColumnName("CUSPOINTS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("EXCH_RATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Forapproval)
                    .HasColumnName("forapproval")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GlTradeaccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_TRADEACCOUNT");

                entity.Property(e => e.Insure).HasColumnName("insure");

                entity.Property(e => e.Invoicetype)
                    .HasColumnName("invoicetype")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Invtrack)
                    .HasColumnName("invtrack")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemselectionDone).HasColumnName("ITEMSELECTION_DONE");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTUPDATE");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNO");

                entity.Property(e => e.MiscCharges).HasColumnName("MISC_CHARGES");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Paying).HasColumnName("paying");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Printcopy).HasColumnName("PRINTCOPY");

                entity.Property(e => e.Redeemed)
                    .HasColumnName("REDEEMED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RemndNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REMND_NUMBER");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales_Code");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.TheatreD).HasColumnName("THEATRE_D");

                entity.Property(e => e.TheatreDate)
                    .HasColumnType("datetime")
                    .HasColumnName("THEATRE_DATE");

                entity.Property(e => e.TheatreExcise)
                    .HasColumnName("THEATRE_excise")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TheatreNet).HasColumnName("THEATRE_NET");

                entity.Property(e => e.TheatreNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("THEATRE_number");

                entity.Property(e => e.TheatreRef)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("THEATRE_REF");

                entity.Property(e => e.TheatreTotal).HasColumnName("THEATRE_TOTAL");

                entity.Property(e => e.TheatreVat).HasColumnName("THEATRE_VAT");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.TranspCharge).HasColumnName("transp_charge");

                entity.Property(e => e.TranspCode).HasColumnName("transp_code");

                entity.Property(e => e.TransportVat).HasColumnName("TRANSPORT_VAT");

                entity.Property(e => e.TtlWeight)
                    .HasColumnName("ttl_weight")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Urgent)
                    .HasColumnName("urgent")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WaybillNum).HasColumnName("waybill_num");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Till>(entity =>
            {
                entity.HasKey(e => new { e.Tillno, e.Bcode });

                entity.ToTable("TILLS");

                entity.Property(e => e.Tillno).HasColumnName("TILLNO");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("bank_acct")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Cbrow)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("CBROW");

                entity.Property(e => e.Defusername)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DEFUSERNAME");

                entity.Property(e => e.Nexttillsessno)
                    .HasColumnName("NEXTTILLSESSNO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Tillactive)
                    .HasColumnName("TILLACTIVE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillmaximum)
                    .HasColumnName("TILLMAXIMUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TILLNAME");

                entity.Property(e => e.Tillsessno).HasColumnName("TILLSESSNO");

                entity.Property(e => e.Tilluser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TILLUSER");
            });

            modelBuilder.Entity<TillrepsHd>(entity =>
            {
                entity.HasKey(e => e.TrpDetnum)
                    .IsClustered(false);

                entity.ToTable("TILLREPS_HD");

                entity.HasIndex(e => e.BankAcct, "ndxBankAcct")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Currencycode, "ndxRptCurrency")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Gcode, "ndxRptGCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TrpDetnum, "pay_detnum")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TrpDetnum).HasColumnName("TRP_detnum");

                entity.Property(e => e.Amountpaid).HasColumnName("amountpaid");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_acct");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHQ_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("currencycode");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.Gcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GCODE");

                entity.Property(e => e.Gcs)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("GCS");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("paymode");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reference");

                entity.Property(e => e.Referenceother)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("referenceother");

                entity.Property(e => e.Tillno)
                    .HasColumnName("TILLNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillsessno)
                    .HasColumnName("TILLSESSNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TrpDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRP_date");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Tillshift>(entity =>
            {
                entity.HasKey(e => new { e.Tillno, e.Tilluser, e.Tillsessno });

                entity.ToTable("TILLSHIFTS");

                entity.Property(e => e.Tillno).HasColumnName("TILLNO");

                entity.Property(e => e.Tilluser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TILLUSER");

                entity.Property(e => e.Tillsessno).HasColumnName("TILLSESSNO");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Cashinrecon)
                    .HasColumnName("CASHINRECON")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashintill)
                    .HasColumnName("CASHINTILL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Datein)
                    .HasColumnType("datetime")
                    .HasColumnName("DATEIN");

                entity.Property(e => e.Dateout)
                    .HasColumnType("datetime")
                    .HasColumnName("DATEOUT");

                entity.Property(e => e.Finalcash)
                    .HasColumnName("finalcash")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Finaltill)
                    .HasColumnName("finaltill")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Killsess)
                    .HasColumnName("KILLSESS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tilltotal).HasColumnName("TILLTOTAL");

                entity.Property(e => e.Timein)
                    .HasColumnType("datetime")
                    .HasColumnName("TIMEIN");

                entity.Property(e => e.Timeout)
                    .HasColumnType("datetime")
                    .HasColumnName("TIMEOUT");
            });

            modelBuilder.Entity<Town>(entity =>
            {
                entity.HasKey(e => e.TownCode)
                    .IsClustered(false);

                entity.ToTable("TOWNS");

                entity.HasIndex(e => e.TownCode, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TownCode).HasColumnName("TOWN_CODE");

                entity.Property(e => e.ProvinceCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PROVINCE_CODE");

                entity.Property(e => e.Town1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TOWN");
            });

            modelBuilder.Entity<Trackcollect>(entity =>
            {
                entity.HasKey(e => e.Collectnum);

                entity.ToTable("TRACKCOLLECT");

                entity.Property(e => e.Collectnum).HasColumnName("COLLECTNUM");

                entity.Property(e => e.Batched)
                    .HasColumnName("BATCHED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("BCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CmCode).HasColumnName("CM_CODE");

                entity.Property(e => e.Collectcontrol)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COLLECTCONTROL");

                entity.Property(e => e.Collectdate)
                    .HasColumnType("datetime")
                    .HasColumnName("COLLECTDATE");

                entity.Property(e => e.Collectedby)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COLLECTEDBY");

                entity.Property(e => e.Collectid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COLLECTID");

                entity.Property(e => e.Collectpackages)
                    .HasColumnName("COLLECTPACKAGES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Collectstartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("COLLECTSTARTDATE");

                entity.Property(e => e.Collectstarttime)
                    .HasColumnType("datetime")
                    .HasColumnName("COLLECTSTARTTIME");

                entity.Property(e => e.Collecttime)
                    .HasColumnType("datetime")
                    .HasColumnName("COLLECTTIME");

                entity.Property(e => e.Collectturnaround)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COLLECTTURNAROUND")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Collectweight)
                    .HasColumnName("COLLECTWEIGHT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CtCode).HasColumnName("CT_CODE");

                entity.Property(e => e.Dispatched)
                    .HasColumnName("DISPATCHED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dispatchedby)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DISPATCHEDBY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Dispatchnum)
                    .HasColumnName("DISPATCHNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Doctype)
                    .HasColumnName("doctype")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Hrsid)
                    .HasColumnName("HRSID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Hrsiddrv)
                    .HasColumnName("HRSIDDRV")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packlistno).HasColumnName("PACKLISTNO");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SALES_CODE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sameascontrol)
                    .HasColumnName("SAMEASCONTROL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TranspCode)
                    .HasColumnName("TRANSP_CODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VehCode).HasColumnName("VEH_CODE");

                entity.Property(e => e.VehDeliveryid)
                    .HasColumnName("VEH_DELIVERYID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VehDriver)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VEH_DRIVER");

                entity.Property(e => e.VehDriverid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VEH_DRIVERID");

                entity.Property(e => e.VehMake)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VEH_MAKE");

                entity.Property(e => e.VehReg)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VEH_REG");
            });

            modelBuilder.Entity<Trackcollectdispatch>(entity =>
            {
                entity.HasKey(e => new { e.Dispatchnum, e.SaleinvNum, e.Bcode });

                entity.ToTable("TRACKCOLLECTDISPATCH");

                entity.Property(e => e.Dispatchnum).HasColumnName("DISPATCHNUM");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Collectnum).HasColumnName("COLLECTNUM");

                entity.Property(e => e.CtCode).HasColumnName("CT_CODE");

                entity.Property(e => e.Dispatchcomments)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("DISPATCHCOMMENTS");

                entity.Property(e => e.Dispatchdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISPATCHDATE");

                entity.Property(e => e.Dispatchdetnum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DISPATCHDETNUM");

                entity.Property(e => e.Dispatchnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DISPATCHNUMBER");

                entity.Property(e => e.Dispatchuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DISPATCHUSER");

                entity.Property(e => e.Dispbatched)
                    .HasColumnName("DISPBATCHED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Docrecall)
                    .HasColumnName("DOCRECALL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Doctype).HasColumnName("DOCTYPE");

                entity.Property(e => e.Hrsiddrv).HasColumnName("HRSIDDRV");

                entity.Property(e => e.Routecode).HasColumnName("ROUTECODE");

                entity.Property(e => e.VehDeliveryid).HasColumnName("VEH_DELIVERYID");
            });

            modelBuilder.Entity<Trackcollectdispatchrecall>(entity =>
            {
                entity.HasKey(e => new { e.Dispatchnumber, e.Recallref });

                entity.ToTable("TRACKCOLLECTDISPATCHRECALL");

                entity.Property(e => e.Dispatchnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DISPATCHNUMBER");

                entity.Property(e => e.Recallref)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RECALLREF");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Collectnum).HasColumnName("COLLECTNUM");

                entity.Property(e => e.Doctype).HasColumnName("DOCTYPE");

                entity.Property(e => e.Recallby)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RECALLBY");

                entity.Property(e => e.Recalldate)
                    .HasColumnType("datetime")
                    .HasColumnName("RECALLDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");
            });

            modelBuilder.Entity<Trackdeliver>(entity =>
            {
                entity.HasKey(e => e.Delivernum);

                entity.ToTable("TRACKDELIVER");

                entity.Property(e => e.Delivernum).HasColumnName("DELIVERNUM");

                entity.Property(e => e.Batched)
                    .HasColumnName("BATCHED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("BCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DelCode).HasColumnName("DEL_CODE");

                entity.Property(e => e.Delivercontrol)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERCONTROL");

                entity.Property(e => e.Deliverdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DELIVERDATE");

                entity.Property(e => e.Deliveredby)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELIVEREDBY");

                entity.Property(e => e.Deliverid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERID");

                entity.Property(e => e.Deliverpackages)
                    .HasColumnName("DELIVERPACKAGES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Deliverstartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DELIVERSTARTDATE");

                entity.Property(e => e.Deliverstarttime)
                    .HasColumnType("datetime")
                    .HasColumnName("DELIVERSTARTTIME");

                entity.Property(e => e.Delivertime)
                    .HasColumnType("datetime")
                    .HasColumnName("DELIVERTIME");

                entity.Property(e => e.Deliverturnaround)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERTURNAROUND")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Deliverweight)
                    .HasColumnName("DELIVERWEIGHT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Docrecall)
                    .HasColumnName("DOCRECALL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Doctype)
                    .HasColumnName("doctype")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DstatCode).HasColumnName("DSTAT_CODE");

                entity.Property(e => e.Hrsid)
                    .HasColumnName("HRSID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Hrsiddrv)
                    .HasColumnName("HRSIDDRV")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invamountpaid)
                    .HasColumnName("INVAMOUNTPAID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invoicecopy)
                    .HasColumnName("INVOICECOPY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Invpaytype)
                    .HasColumnName("INVPAYTYPE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nodelivery)
                    .HasColumnName("NODELIVERY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Receivedby)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RECEIVEDBY")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Receivedid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RECEIVEDID");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.Sameascontrol)
                    .HasColumnName("SAMEASCONTROL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VehCode).HasColumnName("VEH_CODE");

                entity.Property(e => e.VehDeliveryid)
                    .HasColumnName("VEH_DELIVERYID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VehDriver)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VEH_DRIVER");

                entity.Property(e => e.VehDriverid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VEH_DRIVERID");

                entity.Property(e => e.VehMake)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VEH_MAKE");

                entity.Property(e => e.VehReg)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VEH_REG");
            });

            modelBuilder.Entity<Trackdeliverrecall>(entity =>
            {
                entity.HasKey(e => new { e.Delivernum, e.Recallref });

                entity.ToTable("TRACKDELIVERRECALL");

                entity.Property(e => e.Delivernum).HasColumnName("DELIVERNUM");

                entity.Property(e => e.Recallref)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RECALLREF");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Doctype).HasColumnName("DOCTYPE");

                entity.Property(e => e.Recallby)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RECALLBY");

                entity.Property(e => e.Recalldate)
                    .HasColumnType("datetime")
                    .HasColumnName("RECALLDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");
            });

            modelBuilder.Entity<Trackdispatch>(entity =>
            {
                entity.HasKey(e => e.Dispnum);

                entity.ToTable("TRACKDISPATCH");

                entity.Property(e => e.Dispnum).HasColumnName("DISPNUM");

                entity.Property(e => e.Batched)
                    .HasColumnName("BATCHED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("BCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dispatchedby)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DISPATCHEDBY");

                entity.Property(e => e.Dispcontrol)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DISPCONTROL");

                entity.Property(e => e.Dispdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISPDATE");

                entity.Property(e => e.Disppackages)
                    .HasColumnName("DISPPACKAGES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dispstartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISPSTARTDATE");

                entity.Property(e => e.Dispstarttime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISPSTARTTIME");

                entity.Property(e => e.Disptime)
                    .HasColumnType("datetime")
                    .HasColumnName("DISPTIME");

                entity.Property(e => e.Dispturnaround)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DISPTURNAROUND")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Dispweight)
                    .HasColumnName("DISPWEIGHT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packlistno).HasColumnName("PACKLISTNO");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");
            });

            modelBuilder.Entity<Trackstore>(entity =>
            {
                entity.HasKey(e => e.Storenum);

                entity.ToTable("TRACKSTORE");

                entity.Property(e => e.Storenum).HasColumnName("STORENUM");

                entity.Property(e => e.Batched)
                    .HasColumnName("BATCHED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("BCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Doctype)
                    .HasColumnName("doctype")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Hrsid)
                    .HasColumnName("HRSID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mutliselnum)
                    .HasColumnName("MUTLISELNUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.Removedby)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REMOVEDBY");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.Sameascontrol)
                    .HasColumnName("SAMEASCONTROL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Storecontrol)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STORECONTROL");

                entity.Property(e => e.Storedate)
                    .HasColumnType("datetime")
                    .HasColumnName("STOREDATE");

                entity.Property(e => e.Storepackage)
                    .HasColumnName("STOREPACKAGE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Storestartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("STORESTARTDATE");

                entity.Property(e => e.Storestarttime)
                    .HasColumnType("datetime")
                    .HasColumnName("STORESTARTTIME");

                entity.Property(e => e.Storetime)
                    .HasColumnType("datetime")
                    .HasColumnName("STORETIME");

                entity.Property(e => e.Storeturnaround)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STORETURNAROUND")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Storeweight)
                    .HasColumnName("STOREWEIGHT")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Trackstoremultisel>(entity =>
            {
                entity.HasKey(e => new { e.Multiselnum, e.Multiselnumdet });

                entity.ToTable("TRACKSTOREMULTISEL");

                entity.HasIndex(e => new { e.SaleinvNum, e.Bcode }, "IX_TRACKSTOREMULTISEL");

                entity.Property(e => e.Multiselnum).HasColumnName("MULTISELNUM");

                entity.Property(e => e.Multiselnumdet)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MULTISELNUMDET");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Doctype).HasColumnName("DOCTYPE");

                entity.Property(e => e.Multiseldate)
                    .HasColumnType("datetime")
                    .HasColumnName("MULTISELDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Multiseluser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MULTISELUSER");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");
            });

            modelBuilder.Entity<Trackverify>(entity =>
            {
                entity.HasKey(e => e.Verifnum);

                entity.ToTable("TRACKVERIFY");

                entity.Property(e => e.Verifnum).HasColumnName("VERIFNUM");

                entity.Property(e => e.Batched)
                    .HasColumnName("BATCHED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("BCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Doctype)
                    .HasColumnName("doctype")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Hrsid)
                    .HasColumnName("HRSID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packlistno).HasColumnName("PACKLISTNO");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.Sameascontrol)
                    .HasColumnName("SAMEASCONTROL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Verifcontrol)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VERIFCONTROL");

                entity.Property(e => e.Verifdate)
                    .HasColumnType("datetime")
                    .HasColumnName("VERIFDATE");

                entity.Property(e => e.Verifiedby)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VERIFIEDBY");

                entity.Property(e => e.Verifpackages)
                    .HasColumnName("VERIFPACKAGES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Verifstartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("VERIFSTARTDATE");

                entity.Property(e => e.Verifstarttime)
                    .HasColumnType("datetime")
                    .HasColumnName("VERIFSTARTTIME");

                entity.Property(e => e.Veriftime)
                    .HasColumnType("datetime")
                    .HasColumnName("VERIFTIME");

                entity.Property(e => e.Verifturnaround)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VERIFTURNAROUND")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Verifweight)
                    .HasColumnName("VERIFWEIGHT")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Trackverifytwo>(entity =>
            {
                entity.HasKey(e => e.Veriftwonum);

                entity.ToTable("TRACKVERIFYTWO");

                entity.Property(e => e.Veriftwonum).HasColumnName("VERIFTWONUM");

                entity.Property(e => e.Batched)
                    .HasColumnName("BATCHED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bcode)
                    .HasColumnName("BCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Doctype)
                    .HasColumnName("doctype")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Hrsid)
                    .HasColumnName("HRSID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Packlistno).HasColumnName("PACKLISTNO");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.Sameascontrol)
                    .HasColumnName("SAMEASCONTROL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Verifiedbytwo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VERIFIEDBYTWO");

                entity.Property(e => e.Veriftwocontrol)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VERIFTWOCONTROL");

                entity.Property(e => e.Veriftwodate)
                    .HasColumnType("datetime")
                    .HasColumnName("VERIFTWODATE");

                entity.Property(e => e.Veriftwopackages)
                    .HasColumnName("VERIFTWOPACKAGES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Veriftwostartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("VERIFTWOSTARTDATE");

                entity.Property(e => e.Veriftwostarttime)
                    .HasColumnType("datetime")
                    .HasColumnName("VERIFTWOSTARTTIME");

                entity.Property(e => e.Veriftwotime)
                    .HasColumnType("datetime")
                    .HasColumnName("VERIFTWOTIME");

                entity.Property(e => e.Veriftwoturnaround)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VERIFTWOTURNAROUND")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Veriftwoweight)
                    .HasColumnName("VERIFTWOWEIGHT")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Transferpoint>(entity =>
            {
                entity.HasKey(e => e.EntryNo);

                entity.ToTable("TRANSFERPOINTS");

                entity.Property(e => e.Comments)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MemberNoFrom)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MemberNoTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransferDate).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Transporter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("transporter");

                entity.HasIndex(e => e.TranspCode, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Kgrate)
                    .HasColumnName("kgrate")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TranspCode)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("transp_code");
            });

            modelBuilder.Entity<Tx001>(entity =>
            {
                entity.HasKey(e => e.Txtype);

                entity.ToTable("TX001");

                entity.Property(e => e.Txtype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TXTYPE")
                    .IsFixedLength(true);

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Txglacct)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TXGLACCT");

                entity.Property(e => e.Txname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TXNAME");

                entity.Property(e => e.Withholdvat)
                    .HasColumnName("withholdvat")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Unallocatedcu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UNALLOCATEDCUS");

                entity.HasIndex(e => new { e.Username, e.CusCode }, "IX_UNALLOCATEDCUS");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Docamount)
                    .HasColumnName("DOCAMOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Docbalance)
                    .HasColumnName("DOCBALANCE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Docdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DOCDATE");

                entity.Property(e => e.Docdays)
                    .HasColumnName("DOCDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Docnum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DOCNUM");

                entity.Property(e => e.Docref)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DOCREF");

                entity.Property(e => e.Doctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DOCTYPE");

                entity.Property(e => e.Entrytype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENTRYTYPE");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Unallocatedsupp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UNALLOCATEDSUPP");

                entity.HasIndex(e => new { e.Username, e.SuppCode }, "IX_UNALLOCATEDSUPP");

                entity.Property(e => e.Docamount)
                    .HasColumnName("DOCAMOUNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Docbalance)
                    .HasColumnName("DOCBALANCE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Docdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DOCDATE");

                entity.Property(e => e.Docdays)
                    .HasColumnName("DOCDAYS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Docnum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DOCNUM");

                entity.Property(e => e.Docref)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DOCREF");

                entity.Property(e => e.Doctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DOCTYPE");

                entity.Property(e => e.Entrytype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENTRYTYPE");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Unbatchlog>(entity =>
            {
                entity.HasKey(e => e.Transdet);

                entity.ToTable("unbatchlog");

                entity.Property(e => e.Transdet).HasColumnName("transdet");

                entity.Property(e => e.Docdate)
                    .HasColumnType("datetime")
                    .HasColumnName("docdate");

                entity.Property(e => e.Docdescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docdescription");

                entity.Property(e => e.Docnum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docnum");

                entity.Property(e => e.ModuleCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("module_code");

                entity.Property(e => e.Unbatchdate)
                    .HasColumnType("datetime")
                    .HasColumnName("unbatchdate");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<Unit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("units");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(255)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvUnit)
                    .HasMaxLength(255)
                    .HasColumnName("INV_UNIT");
            });

            modelBuilder.Entity<UpliftsDt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UPLIFTS_DT");

                entity.HasIndex(e => new { e.UpliftCode, e.Pricename }, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Constant).HasColumnName("CONSTANT");

                entity.Property(e => e.Factor).HasColumnName("FACTOR");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Pricename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PRICENAME");

                entity.Property(e => e.Priceorder)
                    .HasColumnName("priceorder")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UpliftCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UPLIFT_CODE");

                entity.Property(e => e.Valuename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VALUENAME");
            });

            modelBuilder.Entity<UpliftsHd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UPLIFTS_HD");

                entity.HasIndex(e => e.UpliftCode, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Priceauto)
                    .HasColumnName("priceauto")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Priceautotype)
                    .HasColumnName("priceautotype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pscheme)
                    .HasColumnName("pscheme")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ptypecode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ptypecode")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ptypename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ptypename")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UpliftCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UPLIFT_CODE");
            });

            modelBuilder.Entity<UpliftsItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UPLIFTS_ITEM");

                entity.HasIndex(e => e.Username, "IX_UPLIFTS_ITEM");

                entity.HasIndex(e => e.InvCode, "IX_UPLIFTS_ITEM_1")
                    .IsClustered();

                entity.Property(e => e.InvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.Username);

                entity.ToTable("USERS");

                entity.HasIndex(e => e.Username, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Blocked)
                    .HasColumnName("blocked")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cellcountry)
                    .HasMaxLength(255)
                    .HasColumnName("cellcountry")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cellname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cellname")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cellnumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cellnumber")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fullusername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FULLUSERNAME");

                entity.Property(e => e.Passexpired)
                    .HasColumnName("passexpired")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Passlockout)
                    .HasColumnName("passlockout")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Passtartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("passtartdate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Passtry)
                    .HasColumnName("passtry")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("PASSWORD");

                entity.Property(e => e.Pricescheme)
                    .HasColumnName("PRICESCHEME")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillno)
                    .HasColumnName("TILLNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tillsessno)
                    .HasColumnName("TILLSESSNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Uid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UID");

                entity.Property(e => e.UserGroup)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("USER_GROUP");

                entity.Property(e => e.Userbranchlist)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("USERBRANCHLIST")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usergrouplist)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("usergrouplist");

                entity.Property(e => e.Xpass)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("xpass");
            });

            modelBuilder.Entity<UserAccess>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("USER_ACCESS");

                entity.HasIndex(e => new { e.Username, e.ModuleCode }, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<UserAudittrail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("USER_AUDITTRAIL");

                entity.HasIndex(e => e.EntryNo, "EntryNo")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Activity)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleCode).HasColumnName("Module_Code");

                entity.Property(e => e.TableName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Table_Name");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Date");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserGroup>(entity =>
            {
                entity.HasKey(e => e.UserGroup1);

                entity.ToTable("USER_GROUPS");

                entity.HasIndex(e => e.UserGroup1, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.UserGroup1)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("USER_GROUP");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");
            });

            modelBuilder.Entity<Userallocationnumber>(entity =>
            {
                entity.HasKey(e => e.Uid)
                    .HasName("PK_USERRECEIPTNUMBER");

                entity.ToTable("USERALLOCATIONNUMBER");

                entity.Property(e => e.Uid)
                    .ValueGeneratedNever()
                    .HasColumnName("UID");

                entity.Property(e => e.Receiptnumber).HasColumnName("RECEIPTNUMBER");
            });

            modelBuilder.Entity<UsergroupRight>(entity =>
            {
                entity.HasKey(e => new { e.UserGroup, e.ModuleCode });

                entity.ToTable("USERGROUP_RIGHTS");

                entity.HasIndex(e => new { e.UserGroup, e.ModuleCode }, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.UserGroup)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("USER_GROUP");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.Status).HasColumnName("STATUS");
            });

            modelBuilder.Entity<Userlog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("USERLOG");

                entity.HasIndex(e => e.Counter, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.LoginDate, "ndxlogdate")
                    .IsClustered();

                entity.Property(e => e.Counter)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("COUNTER");

                entity.Property(e => e.LoginDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOGIN_DATE");

                entity.Property(e => e.LoginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("LOGIN_TIME");

                entity.Property(e => e.LogoutDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOGOUT_DATE");

                entity.Property(e => e.LogoutTime)
                    .HasColumnType("datetime")
                    .HasColumnName("LOGOUT_TIME");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Usermessage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("USERMESSAGES");

                entity.HasIndex(e => e.Counter, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SentDate, "ndxSentDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Username, "ndxUserName")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Username, e.Tblname }, "ndxupdate");

                entity.HasIndex(e => new { e.Tblname, e.Username, e.Updatemsg, e.Rcvd, e.Updatedone }, "ndxusermsg");

                entity.Property(e => e.Counter)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("COUNTER");

                entity.Property(e => e.RcvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RCV_DATE");

                entity.Property(e => e.RcvTime)
                    .HasColumnType("datetime")
                    .HasColumnName("RCV_TIME");

                entity.Property(e => e.Rcvd).HasColumnName("RCVD");

                entity.Property(e => e.Sender)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SENDER");

                entity.Property(e => e.SentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SENT_DATE");

                entity.Property(e => e.SentTime)
                    .HasColumnType("datetime")
                    .HasColumnName("SENT_TIME");

                entity.Property(e => e.Tblname)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TBLNAME");

                entity.Property(e => e.Updatedone).HasColumnName("UPDATEDONE");

                entity.Property(e => e.Updatemsg).HasColumnName("UPDATEMSG");

                entity.Property(e => e.Usermessage1)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("USERMESSAGE");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Usermessagesauthority>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("USERMESSAGESAUTHORITY");

                entity.HasIndex(e => e.Counter, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SentDate, "ndxSentDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Username, "ndxUserName")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Authoritycode)
                    .HasColumnName("AUTHORITYCODE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Authoritynum).HasColumnName("AUTHORITYNUM");

                entity.Property(e => e.Counter)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("COUNTER");

                entity.Property(e => e.Desc1)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("DESC1");

                entity.Property(e => e.Desc2)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("DESC2");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.RcvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RCV_DATE");

                entity.Property(e => e.RcvTime)
                    .HasColumnType("datetime")
                    .HasColumnName("RCV_TIME");

                entity.Property(e => e.Rcvd).HasColumnName("RCVD");

                entity.Property(e => e.Ref1)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("REF1");

                entity.Property(e => e.Ref2)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("REF2");

                entity.Property(e => e.Sender)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SENDER");

                entity.Property(e => e.SentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SENT_DATE");

                entity.Property(e => e.SentTime)
                    .HasColumnType("datetime")
                    .HasColumnName("SENT_TIME");

                entity.Property(e => e.Updatedone).HasColumnName("UPDATEDONE");

                entity.Property(e => e.Updatemsg).HasColumnName("UPDATEMSG");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Usermessagesauthorityrmt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("USERMESSAGESAUTHORITYRMT");

                entity.HasIndex(e => e.Counter, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SentDate, "ndxSentDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Username, "ndxUserName")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Authoritycode)
                    .HasColumnName("AUTHORITYCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Authoritynum).HasColumnName("AUTHORITYNUM");

                entity.Property(e => e.Bposted).HasColumnName("bposted");

                entity.Property(e => e.Counter)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("COUNTER");

                entity.Property(e => e.Desc1)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("DESC1");

                entity.Property(e => e.Desc2)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("DESC2");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.RcvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RCV_DATE");

                entity.Property(e => e.RcvTime)
                    .HasColumnType("datetime")
                    .HasColumnName("RCV_TIME");

                entity.Property(e => e.Rcvd).HasColumnName("RCVD");

                entity.Property(e => e.Ref1)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("REF1");

                entity.Property(e => e.Ref2)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("REF2");

                entity.Property(e => e.Sender)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SENDER");

                entity.Property(e => e.SentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SENT_DATE");

                entity.Property(e => e.SentTime)
                    .HasColumnType("datetime")
                    .HasColumnName("SENT_TIME");

                entity.Property(e => e.Updatedone).HasColumnName("UPDATEDONE");

                entity.Property(e => e.Updatemsg).HasColumnName("UPDATEMSG");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Userpasshistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("USERPASSHISTORY");

                entity.HasIndex(e => new { e.Username, e.Password }, "IX_USERPASSHISTORY")
                    .IsUnique();

                entity.Property(e => e.Passentrynum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("passentrynum");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("PASSWORD");

                entity.Property(e => e.Uid).HasColumnName("UID");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Userprofile>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("USERPROFILE");

                entity.HasIndex(e => e.Username, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BackupPath)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("backup_path");

                entity.Property(e => e.PastelDatapath)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PASTEL_DATAPATH");

                entity.Property(e => e.PastelGlpath)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PASTEL_GLPATH");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Usersbranch>(entity =>
            {
                entity.HasKey(e => new { e.Bcode, e.Username });

                entity.ToTable("USERSBRANCH");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Branchname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHNAME");
            });

            modelBuilder.Entity<Usersdoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("USERSDOCS");

                entity.Property(e => e.Docname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docname");

                entity.Property(e => e.Printuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("printuser");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Userrows).HasColumnName("userrows");
            });

            modelBuilder.Entity<Usersusergroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("USERSUSERGROUPS");

                entity.HasIndex(e => new { e.UserGroup, e.Username }, "IX_USERSUSERGROUPS")
                    .IsUnique();

                entity.Property(e => e.UserGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_GROUP");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Usertimefootprint>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("USERTIMEFOOTPRINT");

                entity.Property(e => e.Lognumber).HasColumnName("LOGNUMBER");

                entity.Property(e => e.Timelog)
                    .HasColumnType("datetime")
                    .HasColumnName("TIMELOG");

                entity.Property(e => e.Transdesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSDESC");

                entity.Property(e => e.Transname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRANSNAME");

                entity.Property(e => e.Transtype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRANSTYPE");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Usertimelog>(entity =>
            {
                entity.HasKey(e => new { e.Username, e.DateIn, e.Lognumber });

                entity.ToTable("USERTIMELOG");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.DateIn)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_IN");

                entity.Property(e => e.Lognumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LOGNUMBER");

                entity.Property(e => e.Autologout)
                    .HasColumnName("AUTOLOGOUT")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.DateOut)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_OUT");

                entity.Property(e => e.TimeIn)
                    .HasColumnType("datetime")
                    .HasColumnName("TIME_IN");

                entity.Property(e => e.TimeOut)
                    .HasColumnType("datetime")
                    .HasColumnName("TIME_OUT");
            });

            modelBuilder.Entity<VatToclaim>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("VAT_TOCLAIM");

                entity.HasIndex(e => e.Counter, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Counter).HasColumnName("COUNTER");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_NO");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");

                entity.Property(e => e.Vat).HasColumnName("VAT");

                entity.Property(e => e.Vatpaid).HasColumnName("VATPAID");
            });

            modelBuilder.Entity<VatTopay>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("VAT_TOPAY");

                entity.HasIndex(e => e.Counter, "PrimaryKey")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Counter).HasColumnName("COUNTER");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_NO");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");

                entity.Property(e => e.Vat).HasColumnName("VAT");

                entity.Property(e => e.Vatpaid).HasColumnName("VATPAID");
            });

            modelBuilder.Entity<VehDelivery>(entity =>
            {
                entity.ToTable("VEH_DELIVERY");

                entity.HasIndex(e => e.VehRegno, "IX_VEH_DELIVERY")
                    .IsUnique();

                entity.Property(e => e.VehDeliveryid)
                    .ValueGeneratedNever()
                    .HasColumnName("VEH_DELIVERYID");

                entity.Property(e => e.VehCode).HasColumnName("VEH_CODE");

                entity.Property(e => e.VehComments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("VEH_COMMENTS");

                entity.Property(e => e.VehMakeid).HasColumnName("VEH_MAKEID");

                entity.Property(e => e.VehRegno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VEH_REGNO");
            });

            modelBuilder.Entity<VehMake>(entity =>
            {
                entity.ToTable("VEH_MAKES");

                entity.HasIndex(e => e.VehMakename, "IX_VEH_MAKES")
                    .IsUnique();

                entity.Property(e => e.VehMakeid)
                    .ValueGeneratedNever()
                    .HasColumnName("VEH_MAKEID");

                entity.Property(e => e.VehMakename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VEH_MAKENAME");
            });

            modelBuilder.Entity<VehType>(entity =>
            {
                entity.HasKey(e => e.VehCode);

                entity.ToTable("VEH_TYPES");

                entity.HasIndex(e => e.VehName, "IX_VEH_TYPES")
                    .IsUnique();

                entity.Property(e => e.VehCode)
                    .ValueGeneratedNever()
                    .HasColumnName("VEH_CODE");

                entity.Property(e => e.VehName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VEH_NAME");
            });

            modelBuilder.Entity<VwAgeingCreditsMatched>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeing_CreditsMatched");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Saleinv_number");

                entity.Property(e => e.SourceDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TargetDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwAgeingCreditsMatched21102004>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeing_CreditsMatched21102004");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Saleinv_number");

                entity.Property(e => e.SourceDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TargetDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwAgeingCreditsMatchedTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeing_CreditsMatchedTotals");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Saleinv_number");

                entity.Property(e => e.TargetDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAgeingDebitsBalanceMonthBasis>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeing_DebitsBalance_MonthBasis");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAgeingDebitsBalanceMonthBasisNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeing_DebitsBalance_MonthBasis_New");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAgeingDebitsBalanceMonthBasisNormal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeing_DebitsBalance_MonthBasis_Normal");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAgeingDebitsBalanceMonthBasisOrig>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeing_DebitsBalance_MonthBasis_Orig");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAgeingDebitsBalancePeriodBasis>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeing_DebitsBalance_PeriodBasis");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAgeingDebitsBalancePeriodBasis21junBak>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeing_DebitsBalance_PeriodBasis_21JunBak");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAgeingDebitsBalancePeriodBasis22jun>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeing_DebitsBalance_PeriodBasis_22Jun");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAgeingDebitsMatchedTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeing_DebitsMatchedTotals");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.SourceDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAgeingMonthBasisDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeing_MonthBasisDetails");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAgeingPeriodBasisDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeing_PeriodBasisDetails");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAgeingPeriodBasisDetails20201119>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeing_PeriodBasisDetails20201119");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAgeingPeriodBasisDetailsBak22dec>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeing_PeriodBasisDetails_Bak_22Dec");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAgeingSourceMatchedTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeing_SourceMatchedTotals");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.SourceDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAgeingSourceMatchedTotals160204>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeing_SourceMatchedTotals160204");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.SourceDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAgeingSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeingSummary");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwAgeingSummary2008>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeingSummary2008");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwAgeingSummary21102004>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeingSummary21102004");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwAgeingSummaryBak>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeingSummary_Bak");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwAgeingSummaryBak07Jan2004>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeingSummary_bak07Jan2004");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwAgeingSummaryCred>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeingSummaryCred");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwAgeingSummaryCredit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeingSummary_Credits");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");
            });

            modelBuilder.Entity<VwAgeingSummaryDebit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeingSummary_Debits");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwAgeingSummaryNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeingSummary_New");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwAgeingSummaryType1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeingSummary_Type1");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");
            });

            modelBuilder.Entity<VwAgeingSummaryType2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeingSummary_Type2");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");
            });

            modelBuilder.Entity<VwAgeingSummarydeB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeingSummarydeB");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwAgeingUnallocatedCredit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeing_UnallocatedCredits");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocRef)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SourceDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAgeingUnallocatedCredits160204>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAgeing_UnallocatedCredits160204");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocRef)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SourceDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwApd1973>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAPD1973");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwApplyReceiptTo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwApplyReceiptTo");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Contrabcode).HasColumnName("contrabcode");

                entity.Property(e => e.CurCurrency)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Customercurrency)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("CUSTOMERCurrency");

                entity.Property(e => e.Exchangerate).HasColumnName("exchangerate");

                entity.Property(e => e.Gcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GCODE");

                entity.Property(e => e.Gcs)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("GCS");

                entity.Property(e => e.RptDetnum).HasColumnName("RPT_detnum");

                entity.Property(e => e.RptNum).HasColumnName("RPT_NUM");

                entity.Property(e => e.Rptcounter).HasColumnName("rptcounter");

                entity.Property(e => e.Saleinvnumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("saleinvnumber");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("supp_code");
            });

            modelBuilder.Entity<VwAuc1973>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAUC1973");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocRef)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SourceDocType)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwBranchReceiptPart>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwBranchReceiptPart");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Bcodeto).HasColumnName("BCODETO");

                entity.Property(e => e.BtransDetNum).HasColumnName("BTRANS_DET_NUM");

                entity.Property(e => e.BtransNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("BTRANS_NUMBER");

                entity.Property(e => e.Description)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.Partbalance)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partbalance");

                entity.Property(e => e.Partreturned)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partreturned");

                entity.Property(e => e.Parttaken).HasColumnName("parttaken");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .IsFixedLength(true);

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.Unit).HasColumnName("unit");
            });

            modelBuilder.Entity<VwBranchTransferPart>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwBranchTransferPart");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Bcodefrom).HasColumnName("BCODEFROM");

                entity.Property(e => e.BrinDetNum).HasColumnName("BRIN_DET_NUM");

                entity.Property(e => e.BrinNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BRIN_NUMBER");

                entity.Property(e => e.Description)
                    .HasMaxLength(132)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Docsort)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DOCSORT");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.Partbalance)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partbalance");

                entity.Property(e => e.Partbalancepwqty).HasColumnName("partbalancepwqty");

                entity.Property(e => e.Partreturned)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partreturned");

                entity.Property(e => e.Parttaken).HasColumnName("parttaken");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .IsFixedLength(true);

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.Unit).HasColumnName("unit");
            });

            modelBuilder.Entity<VwCashSaleCreditNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCashSaleCreditNote");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Cnoteqty).HasColumnName("CNOTEQTY");

                entity.Property(e => e.CsaleDetNum).HasColumnName("CSALE_DET_NUM");

                entity.Property(e => e.CsaleNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CSALE_number");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .IsFixedLength(true);

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("unit");
            });

            modelBuilder.Entity<VwCashSaleCreditNotePart>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCashSaleCreditNotePart");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Cnoteqty).HasColumnName("CNOTEQTY");

                entity.Property(e => e.CsaleDetNum).HasColumnName("CSALE_DET_NUM");

                entity.Property(e => e.CsaleNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CSALE_number");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.PartCnoteqty)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partCNOTEQTY");

                entity.Property(e => e.Partbalance)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partbalance");

                entity.Property(e => e.Partquantity)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partquantity");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .IsFixedLength(true);

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Unit).HasColumnName("unit");
            });

            modelBuilder.Entity<VwCashSaleReceiptsCrystal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCashSaleReceipts_Crystal");

                entity.Property(e => e.Address)
                    .HasMaxLength(150)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BANK_ACCT");

                entity.Property(e => e.BankName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("bank_name");

                entity.Property(e => e.Bonusamt).HasColumnName("BONUSAMT");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.CashCollector)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cash_collector");

                entity.Property(e => e.Cashbalance).HasColumnName("cashbalance");

                entity.Property(e => e.Cashpaid).HasColumnName("cashpaid");

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHQ_DATE");

                entity.Property(e => e.Comments)
                    .HasMaxLength(244)
                    .IsUnicode(false);

                entity.Property(e => e.CsaleDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CSALE_DATE");

                entity.Property(e => e.CsaleDetNum).HasColumnName("CSALE_DET_NUM");

                entity.Property(e => e.CsaleNet).HasColumnName("CSALE_NET");

                entity.Property(e => e.CsaleNum).HasColumnName("CSALE_NUM");

                entity.Property(e => e.CsaleNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("csale_number");

                entity.Property(e => e.CsaleTotal).HasColumnName("CSALE_TOTAL");

                entity.Property(e => e.CsaleVat).HasColumnName("CSALE_VAT");

                entity.Property(e => e.Currencyname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYNAME");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("customer_name");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Description2)
                    .HasMaxLength(302)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION2");

                entity.Property(e => e.Disc).HasColumnName("disc");

                entity.Property(e => e.Discount).HasColumnName("DISCOUNT");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.Excl).HasColumnName("EXCL");

                entity.Property(e => e.Excl2).HasColumnName("EXCL2");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAYMODE");

                entity.Property(e => e.Phone)
                    .HasMaxLength(150)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.QtyOrdered).HasColumnName("QTY_ORDERED");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reference");

                entity.Property(e => e.Strength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("STRENGTH");

                entity.Property(e => e.Symbol)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SYMBOL");

                entity.Property(e => e.Taxamount).HasColumnName("TAXAMOUNT");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.Unit)
                    .HasMaxLength(23)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCombinedPurchase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCombinedPurchases");

                entity.Property(e => e.Closingsales).HasColumnName("CLOSINGSALES");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("loc_code");

                entity.Property(e => e.Unitpurchases).HasColumnName("UNITPURCHASES");
            });

            modelBuilder.Entity<VwCombinedPurchaseAverage21102004>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCombinedPurchase_Average21102004");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");
            });

            modelBuilder.Entity<VwCombinedPurchases21102004>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCombinedPurchases21102004");

                entity.Property(e => e.Closingsales).HasColumnName("CLOSINGSALES");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Qty).HasColumnName("qty");

                entity.Property(e => e.Totalcost).HasColumnName("totalcost");
            });

            modelBuilder.Entity<VwCombinedPurchasesAverage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCombinedPurchases_Average");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Qt).HasColumnName("QT");
            });

            modelBuilder.Entity<VwCombinedPurchasesPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCombinedPurchases_Price");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");
            });

            modelBuilder.Entity<VwCombinedSale>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCombinedSales");

                entity.Property(e => e.Closingsales).HasColumnName("CLOSINGSALES");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("loc_code");

                entity.Property(e => e.Unitsales).HasColumnName("UNITSALES");
            });

            modelBuilder.Entity<VwCombinedSales21102004>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCombinedSales21102004");

                entity.Property(e => e.Closingsales).HasColumnName("CLOSINGSALES");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.Unitsales).HasColumnName("UNITSALES");
            });

            modelBuilder.Entity<VwCombinedSalesAverage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCombinedSales_Average");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Qt).HasColumnName("QT");
            });

            modelBuilder.Entity<VwCombinedSalesAverage21102004>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCombinedSales_Average21102004");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");
            });

            modelBuilder.Entity<VwCombinedSalesPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCombinedSales_Price");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");
            });

            modelBuilder.Entity<VwCombinedSalesPrice21102004>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCombinedSales_Price21102004");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            });

            modelBuilder.Entity<VwCreditNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCreditNote");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .IsFixedLength(true);

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.SaleinvDetNum).HasColumnName("SALEINV_DET_NUM");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("unit");
            });

            modelBuilder.Entity<VwCreditNotePart>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCreditNotePart");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.Partbalance)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partbalance");

                entity.Property(e => e.Partreturned)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partreturned");

                entity.Property(e => e.Parttaken)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("parttaken");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .IsFixedLength(true);

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.SaleinvDetNum).HasColumnName("SALEINV_DET_NUM");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.Unit).HasColumnName("unit");
            });

            modelBuilder.Entity<VwCusBroughtForward>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCusBroughtForward");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");
            });

            modelBuilder.Entity<VwCusStatementDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCusStatementDetails");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Docbal).HasColumnName("docbal");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate).HasColumnType("datetime");

                entity.Property(e => e.TransDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransType)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Unalloc).HasColumnName("UNALLOC");
            });

            modelBuilder.Entity<VwCusStatementDetails2000>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCusStatementDetails2000");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Docbal).HasColumnName("docbal");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate).HasColumnType("datetime");

                entity.Property(e => e.TransDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransType)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Unalloc).HasColumnName("UNALLOC");
            });

            modelBuilder.Entity<VwCusStatementDetailsOpenitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCusStatementDetails_OPENITEM");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Display).HasColumnName("display");

                entity.Property(e => e.Docbal).HasColumnName("docbal");

                entity.Property(e => e.Docnum)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("docnum");

                entity.Property(e => e.Doctype)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("doctype");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransDesc)
                    .HasMaxLength(211)
                    .IsUnicode(false);

                entity.Property(e => e.TransNo)
                    .HasMaxLength(503)
                    .IsUnicode(false);

                entity.Property(e => e.TransType)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwCusStatementDetailsOpenitem21102004>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCusStatementDetails_OPENITEM21102004");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Docbal).HasColumnName("docbal");

                entity.Property(e => e.Docnum)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("docnum");

                entity.Property(e => e.Doctype)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("doctype");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransType)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwCusStatementDetailsOpenitemjune2005>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCusStatementDetails_OPENITEMjune2005");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Display).HasColumnName("display");

                entity.Property(e => e.Docbal).HasColumnName("docbal");

                entity.Property(e => e.Docnum)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("docnum");

                entity.Property(e => e.Doctype)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("doctype");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransDesc)
                    .HasMaxLength(211)
                    .IsUnicode(false);

                entity.Property(e => e.TransNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransType)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwCusStatementDetailsRunbal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCusStatementDetails_RUNBAL");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Display).HasColumnName("display");

                entity.Property(e => e.Docbal).HasColumnName("docbal");

                entity.Property(e => e.Docnum)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("docnum");

                entity.Property(e => e.Doctype)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("doctype");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TargetDocType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TransDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransNo)
                    .HasMaxLength(402)
                    .IsUnicode(false);

                entity.Property(e => e.TransType)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwCusStatementDetailsx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCusStatementDetailsx");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate).HasColumnType("datetime");

                entity.Property(e => e.TransDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransType)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCusStatementOpeningRunbal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCusStatementOpening_RUNBAL");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Display).HasColumnName("display");

                entity.Property(e => e.Docbal).HasColumnName("docbal");

                entity.Property(e => e.Docnum)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("docnum");

                entity.Property(e => e.Doctype)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("doctype");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TargetDocType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(23)
                    .IsUnicode(false);

                entity.Property(e => e.TransNo)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TransType)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwCusStatementTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCusStatementTotals");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Onetwenty).HasColumnName("onetwenty");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Uptothirty).HasColumnName("uptothirty");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwCusStatementTotals2008>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCusStatementTotals2008");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Onetwenty).HasColumnName("onetwenty");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Uptothirty).HasColumnName("uptothirty");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwCustomerAgeAnalysisXtal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCustomerAgeAnalysis_Xtal");

                entity.Property(e => e.AgeingTotal).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.Category)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CATEGORY");

                entity.Property(e => e.CategoryCode)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.ControllerName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Credcategory)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREDCATEGORY");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.CscatgCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_CODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Onetwenty).HasColumnName("onetwenty");

                entity.Property(e => e.Pdcheques).HasColumnName("pdcheques");

                entity.Property(e => e.Province)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("province");

                entity.Property(e => e.ProvinceCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("province_code");

                entity.Property(e => e.Routename)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("routename");

                entity.Property(e => e.Salesman)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("salesman");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TotalSales).HasColumnName("TOTAL_SALES");

                entity.Property(e => e.Uptothirty).HasColumnName("uptothirty");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwCustomerAgeAnalysisXtal11052005>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCustomerAgeAnalysis_Xtal11052005");

                entity.Property(e => e.AgeingTotal).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.Category)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CATEGORY");

                entity.Property(e => e.CategoryCode).HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.CscatgCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_CODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Onetwenty).HasColumnName("onetwenty");

                entity.Property(e => e.Province)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("province");

                entity.Property(e => e.ProvinceCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("province_code");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TotalSales).HasColumnName("TOTAL_SALES");

                entity.Property(e => e.Uptothirty).HasColumnName("uptothirty");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwCustomerAgeAnalysisXtal2008>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCustomerAgeAnalysis_Xtal2008");

                entity.Property(e => e.AgeingTotal).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.Category)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CATEGORY");

                entity.Property(e => e.CategoryCode)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.ControllerName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Credcategory)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREDCATEGORY");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.CscatgCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CSCATG_CODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Onetwenty).HasColumnName("onetwenty");

                entity.Property(e => e.Pdcheques).HasColumnName("pdcheques");

                entity.Property(e => e.Province)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("province");

                entity.Property(e => e.ProvinceCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("province_code");

                entity.Property(e => e.Routename)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("routename");

                entity.Property(e => e.Salesman)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("salesman");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TotalSales).HasColumnName("TOTAL_SALES");

                entity.Property(e => e.Uptothirty).HasColumnName("uptothirty");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwCustomerAgeAnalysisXtalQuick>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCustomerAgeAnalysis_XtalQuick");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.Category)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CATEGORY");

                entity.Property(e => e.CategoryCode).HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Onetwenty).HasColumnName("onetwenty");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TotalSales).HasColumnName("TOTAL_SALES");

                entity.Property(e => e.Uptothirty).HasColumnName("uptothirty");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwCustomerInterestInvoiceAmtDue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCustomerInterestInvoiceAmtDue");

                entity.Property(e => e.CnoteDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CNOTE_DATE");

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SALEINV_NUMBER");
            });

            modelBuilder.Entity<VwCustomersUnAllocated>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCustomersUnAllocated");

                entity.Property(e => e.Choose)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CusName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<VwDebitsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwDebitsList");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwGetReportName>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwGetReportNames");

                entity.Property(e => e.MaxLines).HasColumnName("MAX_LINES");

                entity.Property(e => e.ReportCategory)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_CATEGORY");

                entity.Property(e => e.ReportName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REPORT_NAME");

                entity.Property(e => e.Reportid).HasColumnName("REPORTID");
            });

            modelBuilder.Entity<VwGetSalesJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwGetSalesJournal");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvSubgroupcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.MonthName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Salesval).HasColumnName("SALESVAL");

                entity.Property(e => e.Salesyear).HasColumnName("SALESYEAR");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");
            });

            modelBuilder.Entity<VwGlintegrationAcct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwGLIntegrationAccts");

                entity.Property(e => e.CostofsalesGl)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COSTOFSALES_GL");

                entity.Property(e => e.InvAvgcost).HasColumnName("INV_AVGCOST");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvPhysicalitem).HasColumnName("INV_PHYSICALITEM");

                entity.Property(e => e.InvadjustmentGl)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INVADJUSTMENT_GL");

                entity.Property(e => e.InventoryGl)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INVENTORY_GL");

                entity.Property(e => e.SalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SALES_GL");
            });

            modelBuilder.Entity<VwGretnote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwGretnote");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Bonus).HasColumnName("bonus");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.Partwhole)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PARTWHOLE")
                    .IsFixedLength(true);

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.SinvDetNum).HasColumnName("SINV_DET_NUM");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<VwGretnotePart>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwGretnotePart");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Bonus).HasColumnName("bonus");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.Partbalance)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partbalance");

                entity.Property(e => e.Partreturned)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partreturned");

                entity.Property(e => e.Parttaken)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("parttaken");

                entity.Property(e => e.Partwhole)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PARTWHOLE")
                    .IsFixedLength(true);

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.SinvDetNum).HasColumnName("SINV_DET_NUM");

                entity.Property(e => e.SinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sinv_number");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.Unit).HasColumnName("unit");
            });

            modelBuilder.Entity<VwGrnGretnote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwGrnGretnote");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Bonus).HasColumnName("bonus");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.GrnNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GRN_number");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.SinvDetNum).HasColumnName("sinv_det_num");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<VwGroupCredit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwGroupCredits");

                entity.Property(e => e.SourceDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Totalcredits).HasColumnName("totalcredits");
            });

            modelBuilder.Entity<VwGroupDebit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwGroupDebits");

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Saleinv_number");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Totaldebits).HasColumnName("totaldebits");
            });

            modelBuilder.Entity<VwInvMatchTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwInvMatchTemp");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.Period)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Saleinv_number");

                entity.Property(e => e.SourceDocRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SourceDocREf");

                entity.Property(e => e.SourceDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwInventoryReorder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwInventoryReorders");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvInstockqty).HasColumnName("INV_INSTOCKQTY");

                entity.Property(e => e.InvMaxqty).HasColumnName("INV_MAXQTY");

                entity.Property(e => e.InvMinqty).HasColumnName("INV_MINQTY");

                entity.Property(e => e.InvStrength)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");
            });

            modelBuilder.Entity<VwInventoryReordersMovement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwInventoryReorders_Movement");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.MonthName)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Movement).HasColumnName("MOVEMENT");
            });

            modelBuilder.Entity<VwInventoryReordersMovementSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwInventoryReorders_MovementSummary");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Movement).HasColumnName("MOVEMENT");
            });

            modelBuilder.Entity<VwInventoryStatementDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwInventoryStatement_Details");

                entity.Property(e => e.Area).HasMaxLength(313);

                entity.Property(e => e.CustomerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName).HasMaxLength(200);

                entity.Property(e => e.DocNumber)
                    .HasMaxLength(103)
                    .IsUnicode(false);

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.ModuleCode).HasColumnName("Module_Code");

                entity.Property(e => e.MovementBy)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MovementType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.QtyIn).HasColumnName("QTY_IN");

                entity.Property(e => e.QtyOut).HasColumnName("QTY_OUT");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransNo).HasColumnName("Trans_No");

                entity.Property(e => e.Transdate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSDATE");

                entity.Property(e => e.Unitcost).HasColumnName("UNITCOST");
            });

            modelBuilder.Entity<VwInventoryStatementDocBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwInventoryStatement_DocBalances");

                entity.Property(e => e.Area).HasMaxLength(325);

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.ModuleCode).HasColumnName("Module_Code");

                entity.Property(e => e.QtyIn).HasColumnName("QTY_IN");

                entity.Property(e => e.QtyOut).HasColumnName("QTY_OUT");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransNo).HasColumnName("Trans_No");

                entity.Property(e => e.Transdate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSDATE");
            });

            modelBuilder.Entity<VwInventoryStatementRunningBal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwInventoryStatement_RunningBal");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.SumOfQtyIn).HasColumnName("SumOfQTY_IN");

                entity.Property(e => e.SumOfQtyOut).HasColumnName("SumOfQTY_OUT");
            });

            modelBuilder.Entity<VwInvoiceReceiptPart>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwInvoiceReceiptPart");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Description)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.Partbalance)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partbalance");

                entity.Property(e => e.Partreturned)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partreturned");

                entity.Property(e => e.Parttaken).HasColumnName("parttaken");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .IsFixedLength(true);

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.SaleinvDetNum).HasColumnName("SALEINV_DET_NUM");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("SALEINV_NUMBER");

                entity.Property(e => e.Sbcode).HasColumnName("SBCODE");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.Unit).HasColumnName("unit");
            });

            modelBuilder.Entity<VwItemMovement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwItemMovement");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Movement).HasColumnName("MOVEMENT");

                entity.Property(e => e.Tdate)
                    .HasColumnType("datetime")
                    .HasColumnName("TDATE");
            });

            modelBuilder.Entity<VwItemMovementByMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwItemMovement_ByMonth");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.MonthName)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Movement).HasColumnName("MOVEMENT");
            });

            modelBuilder.Entity<VwItemMovementByMonthCrosstab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwItemMovement_ByMonth_Crosstab");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");
            });

            modelBuilder.Entity<VwLastItemPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwLastItemPrice");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Lastdisc).HasColumnName("LASTDISC");

                entity.Property(e => e.Lastprice).HasColumnName("LASTPRICE");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time");
            });

            modelBuilder.Entity<VwLastItemPricePw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwLastItemPricePW");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Lastdisc).HasColumnName("LASTDISC");

                entity.Property(e => e.Lastprice).HasColumnName("LASTPRICE");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .IsFixedLength(true);

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time");
            });

            modelBuilder.Entity<VwLastItemPriceSupp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwLastItemPriceSupp");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Lastdisc).HasColumnName("LASTDISC");

                entity.Property(e => e.Lastprice).HasColumnName("LASTPRICE");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .IsFixedLength(true);

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time");
            });

            modelBuilder.Entity<VwOrdersList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwOrdersList");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.SaleinvNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SALEINV_NUMBER");
            });

            modelBuilder.Entity<VwPostDatedCheque>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwPostDatedCheques");

                entity.Property(e => e.Amountpaid).HasColumnName("amountpaid");

                entity.Property(e => e.BankAcct)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_acct");

                entity.Property(e => e.BankGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("bank_gl");

                entity.Property(e => e.BankName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("bank_name");

                entity.Property(e => e.Batched).HasColumnName("BATCHED");

                entity.Property(e => e.ChqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHQ_DATE");

                entity.Property(e => e.Cleared).HasColumnName("CLEARED");

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Gcs)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("GCS");

                entity.Property(e => e.Holding).HasColumnName("HOLDING");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCE");

                entity.Property(e => e.RptDetnum).HasColumnName("RPT_detnum");

                entity.Property(e => e.Whichdoc)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WHICHDOC");
            });

            modelBuilder.Entity<VwPurchaseOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwPurchaseOrders");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.Metquantity).HasColumnName("METQUANTITY");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PARTWHOLE")
                    .IsFixedLength(true);

                entity.Property(e => e.PorderDetNum).HasColumnName("PORDER_DET_NUM");

                entity.Property(e => e.PorderNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PORDER_NUMBER");

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.Property(e => e.Remquantity).HasColumnName("REMQUANTITY");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<VwPurchaseOrderInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwPurchaseOrderInfo");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LastOrdered).HasColumnName("Last Ordered");

                entity.Property(e => e.Manuf)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OnOrder).HasColumnName("On Order");

                entity.Property(e => e.Strength)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_DESC");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwQryLastPurchaseDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwQryLastPurchaseDate");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.LastPurchaseDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwQryLastSaleDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwQryLastSaleDate");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.LastSaleDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwQuotation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwQuotation");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Bonbalance).HasColumnName("bonbalance");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Packqty).HasColumnName("packqty");

                entity.Property(e => e.Partstock).HasColumnName("partstock");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .IsFixedLength(true);

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.QuoDetNum).HasColumnName("quo_DET_NUM");

                entity.Property(e => e.QuoNum).HasColumnName("quo_num");

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("unit");
            });

            modelBuilder.Entity<VwQuotationPart>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwQuotationPart");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Bonbalance).HasColumnName("bonbalance");

                entity.Property(e => e.Bonus).HasColumnName("bonus");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvInstockqty).HasColumnName("inv_instockqty");

                entity.Property(e => e.InvStrength)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.Packqty).HasColumnName("packqty");

                entity.Property(e => e.Partbalance)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partbalance");

                entity.Property(e => e.Partreturned)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partreturned");

                entity.Property(e => e.Partstock)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partstock");

                entity.Property(e => e.Parttaken)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("parttaken");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .IsFixedLength(true);

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.QuoDetNum).HasColumnName("QUO_DET_NUM");

                entity.Property(e => e.QuoNum).HasColumnName("QUO_NUM");

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.Unit).HasColumnName("unit");
            });

            modelBuilder.Entity<VwQuotationPartcsale>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwQuotationPartcsale");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvInstockqty).HasColumnName("inv_instockqty");

                entity.Property(e => e.InvStrength)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.Packqty).HasColumnName("packqty");

                entity.Property(e => e.Partbalance)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partbalance");

                entity.Property(e => e.Partreturned)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partreturned");

                entity.Property(e => e.Partstock)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partstock");

                entity.Property(e => e.Parttaken)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("parttaken");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .IsFixedLength(true);

                entity.Property(e => e.QuoDetNum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QUO_DET_NUM");

                entity.Property(e => e.QuoNum).HasColumnName("QUO_NUM");

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.Unit).HasColumnName("unit");
            });

            modelBuilder.Entity<VwQuotationPartwEb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwQuotationPartwEB");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvInstockqty).HasColumnName("inv_instockqty");

                entity.Property(e => e.InvStrength)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.Packqty).HasColumnName("packqty");

                entity.Property(e => e.Partbalance)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partbalance");

                entity.Property(e => e.Partreturned)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partreturned");

                entity.Property(e => e.Partstock)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partstock");

                entity.Property(e => e.Parttaken)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("parttaken");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .IsFixedLength(true);

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.QuoDetNum).HasColumnName("QUO_DET_NUM");

                entity.Property(e => e.QuoNum).HasColumnName("QUO_NUM");

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.Unit).HasColumnName("unit");
            });

            modelBuilder.Entity<VwQuotationcsale>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwQuotationcsale");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.Packqty).HasColumnName("packqty");

                entity.Property(e => e.Partstock).HasColumnName("partstock");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .IsFixedLength(true);

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.QuoDetNum)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("quo_DET_NUM");

                entity.Property(e => e.QuoNum).HasColumnName("quo_num");

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("unit");
            });

            modelBuilder.Entity<VwRet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwREt");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.IbiDetNum).HasColumnName("IBI_DET_NUM");

                entity.Property(e => e.IbiNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("IBI_number");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(15)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("unit");
            });

            modelBuilder.Entity<VwSalesAnalysisMonthYtdSalesDetailsSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSalesAnalysis_Month_YTD_SalesDetailsSummary");

                entity.Property(e => e.CurLastYearYtdqtyPercentageChange).HasColumnName("Cur_LastYear_YTDQtyPercentageChange");

                entity.Property(e => e.CurPriorMonthQtyPercentageChange).HasColumnName("Cur_Prior_MonthQtyPercentageChange");

                entity.Property(e => e.CurrentYtdavgPrice).HasColumnName("CurrentYTDAvgPrice");

                entity.Property(e => e.CurrentYtdqty).HasColumnName("CurrentYTDQty");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.LastYearYtdavgPrice).HasColumnName("LastYearYTDAvgPrice");

                entity.Property(e => e.LastYearYtdqty).HasColumnName("LastYearYTDQty");

                entity.Property(e => e.YtdsalesPercentageChange).HasColumnName("YTDSalesPercentageChange");

                entity.Property(e => e.YtdtotalCurrentYear).HasColumnName("YTDTotalCurrentYear");

                entity.Property(e => e.YtdtotalLastYear).HasColumnName("YTDTotalLastYear");
            });

            modelBuilder.Entity<VwSalesInvoice1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSalesInvoice_1");

                entity.Property(e => e.Address)
                    .HasMaxLength(150)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("batch_num");

                entity.Property(e => e.Bonusamt).HasColumnName("BONUSAMT");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.Contact)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Currencydesc)
                    .HasMaxLength(105)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYDESC");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.DeliveryNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERY_NO");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Discount).HasColumnName("DISCOUNT");

                entity.Property(e => e.Discountval).HasColumnName("DISCOUNTVAL");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.Insure).HasColumnName("insure");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.MyDiscountLabel)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mydiscountamt).HasColumnName("MYDISCOUNTAMT");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.Packingqty).HasColumnName("PACKINGQTY");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Phyaddress)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PHYADDRESS");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(150)
                    .HasColumnName("PHYSICALADD");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SALEINV_DATE");

                entity.Property(e => e.SaleinvNet).HasColumnName("SALEINV_NET");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.SaleinvVat).HasColumnName("SALEINV_VAT");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales_Code");

                entity.Property(e => e.Tax).HasColumnName("TAX");

                entity.Property(e => e.TotalSales).HasColumnName("TOTAL_SALES");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.Town)
                    .HasMaxLength(150)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.TranspCharge).HasColumnName("transp_charge");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.Property(e => e.WaybillNum).HasColumnName("waybill_num");
            });

            modelBuilder.Entity<VwSalesInvoice2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSalesInvoice_2");

                entity.Property(e => e.Address)
                    .HasMaxLength(150)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Bonusamt).HasColumnName("BONUSAMT");

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Contact)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Currencydesc)
                    .HasMaxLength(105)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYDESC");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Discount).HasColumnName("DISCOUNT");

                entity.Property(e => e.Discountval).HasColumnName("DISCOUNTVAL");

                entity.Property(e => e.Insure).HasColumnName("insure");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Membername)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNAME");

                entity.Property(e => e.Memberno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MEMBERNO");

                entity.Property(e => e.MyDiscountLabel)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.Packingqty).HasColumnName("PACKINGQTY");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Phyaddress)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PHYADDRESS");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(150)
                    .HasColumnName("PHYSICALADD");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.QtyOrdered).HasColumnName("QTY_ORDERED");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SALEINV_DATE");

                entity.Property(e => e.SaleinvNet).HasColumnName("SALEINV_NET");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.SaleinvTotal).HasColumnName("SALEINV_TOTAL");

                entity.Property(e => e.SaleinvVat).HasColumnName("SALEINV_VAT");

                entity.Property(e => e.Tax).HasColumnName("TAX");

                entity.Property(e => e.Td).HasColumnName("TD");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.Town)
                    .HasMaxLength(150)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.TranspCharge).HasColumnName("transp_charge");

                entity.Property(e => e.Transporter)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("transporter");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.Property(e => e.WaybillNum).HasColumnName("waybill_num");
            });

            modelBuilder.Entity<VwSalesInvoiceList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSalesInvoiceList");

                entity.Property(e => e.ChargableAfter).HasColumnName("CHARGABLE_AFTER");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DateInterestPayableFrom).HasColumnType("datetime");

                entity.Property(e => e.InterestRate).HasColumnName("INTEREST_RATE");

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.SaleinvNet).HasColumnName("SALEINV_NET");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");
            });

            modelBuilder.Entity<VwSalesJournalMatrixByItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSalesJournal_Matrix_ByItem");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvSubgroupcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("inv_subgroupcode");
            });

            modelBuilder.Entity<VwSalesJournalMatrixSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSalesJournal_MatrixSummary");

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvSubgroupcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("inv_subgroupcode");
            });

            modelBuilder.Entity<VwSalesJournalMatrixSummaryC>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSalesJournal_MatrixSummaryC");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvSubgroupcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_subgroupcode");
            });

            modelBuilder.Entity<VwSelectBank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSelectBanks");

                entity.Property(e => e.BankAcct)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_acct");

                entity.Property(e => e.BankGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("bank_gl");

                entity.Property(e => e.BankName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("bank_name");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Postdated).HasColumnName("POSTDATED");
            });

            modelBuilder.Entity<VwSelectPendingOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSelectPendingOrder");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvInstockqty).HasColumnName("INV_INSTOCKQTY");

                entity.Property(e => e.Pending).HasColumnName("pending");
            });

            modelBuilder.Entity<VwShowCurrentCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwShowCurrentCustomer");

                entity.Property(e => e.Address)
                    .HasMaxLength(150)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.CategoryCode).HasColumnName("CATEGORY_CODE");

                entity.Property(e => e.CcontNum).HasColumnName("ccont_num");

                entity.Property(e => e.Companyfax)
                    .HasMaxLength(50)
                    .HasColumnName("COMPANYFAX");

                entity.Property(e => e.Contact)
                    .HasMaxLength(50)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Creddiscounts).HasColumnName("CREDDISCOUNTS");

                entity.Property(e => e.CreditCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasColumnName("CREDIT_CODE");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(50)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusCode0)
                    .HasMaxLength(50)
                    .HasColumnName("CUS_CODE0");

                entity.Property(e => e.CusContact)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CusDesc)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Default).HasColumnName("DEFAULT");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Discount).HasColumnName("DISCOUNT");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("email");

                entity.Property(e => e.EnforceTerms).HasColumnName("ENFORCE_TERMS");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .HasColumnName("FAX");

                entity.Property(e => e.Lastrptamount).HasColumnName("LASTRPTAMOUNT");

                entity.Property(e => e.Lastrptdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTRPTDATE");

                entity.Property(e => e.Numdays).HasColumnName("NUMDAYS");

                entity.Property(e => e.Oldaccount)
                    .HasMaxLength(50)
                    .HasColumnName("oldaccount");

                entity.Property(e => e.OverAppliedBalance).HasColumnName("OverAPPLIED_BALANCE");

                entity.Property(e => e.Overapplied).HasColumnName("overapplied");

                entity.Property(e => e.Paytermcode).HasColumnName("PAYTERMCODE");

                entity.Property(e => e.Phone)
                    .HasMaxLength(150)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(150)
                    .HasColumnName("PHYSICALADD");

                entity.Property(e => e.Pin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIN");

                entity.Property(e => e.StatementCurrentbal).HasColumnName("STATEMENT_CURRENTBAL");

                entity.Property(e => e.TempCreditlimit).HasColumnName("TEMP_CREDITLIMIT");

                entity.Property(e => e.TemporaryCustomer).HasColumnName("TEMPORARY_CUSTOMER");

                entity.Property(e => e.TotalSales).HasColumnName("TOTAL_SALES");

                entity.Property(e => e.Town)
                    .HasMaxLength(150)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TownCode).HasColumnName("town_code");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.Unapplied).HasColumnName("unapplied");

                entity.Property(e => e.UnappliedBalance).HasColumnName("UNAPPLIED_BALANCE");

                entity.Property(e => e.Used).HasColumnName("USED");

                entity.Property(e => e.Used2).HasColumnName("USED2");

                entity.Property(e => e.Using).HasColumnName("using");

                entity.Property(e => e.Using2).HasColumnName("using2");

                entity.Property(e => e.Vat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VAt");
            });

            modelBuilder.Entity<VwShowCurrentSupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwShowCurrentSupplier");

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.ContNum).HasColumnName("CONT_NUM");

                entity.Property(e => e.Contact)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Counter).HasColumnName("COUNTER");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.Currencycode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Default).HasColumnName("DEFAULT");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Fax)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.Lastpayamount).HasColumnName("LASTPAYAMOUNT");

                entity.Property(e => e.Lastpaydate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTPAYDATE");

                entity.Property(e => e.Openingbal).HasColumnName("openingbal");

                entity.Property(e => e.OverAppliedBalance).HasColumnName("OverAPPLIED_BALANCE");

                entity.Property(e => e.Overapplied).HasColumnName("overapplied");

                entity.Property(e => e.Phone)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHYSICALADD");

                entity.Property(e => e.Pinno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PINNO");

                entity.Property(e => e.Printstatement).HasColumnName("PRINTSTATEMENT");

                entity.Property(e => e.SpcatgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_CODE");

                entity.Property(e => e.StatementCurrentbal).HasColumnName("STATEMENT_CURRENTBAL");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_DESC");

                entity.Property(e => e.Terms)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TERMS");

                entity.Property(e => e.TotalPurchases).HasColumnName("TOTAL_PURCHASES");

                entity.Property(e => e.Town)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TownCode).HasColumnName("town_code");

                entity.Property(e => e.Unapplied).HasColumnName("unapplied");

                entity.Property(e => e.UnappliedBalance).HasColumnName("UNAPPLIED_BALANCE");

                entity.Property(e => e.Used).HasColumnName("USED");

                entity.Property(e => e.Used2).HasColumnName("USED2");

                entity.Property(e => e.Using).HasColumnName("using");

                entity.Property(e => e.Using2).HasColumnName("using2");

                entity.Property(e => e.Vatno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VATNO");

                entity.Property(e => e.Xblocked).HasColumnName("XBLOCKED");
            });

            modelBuilder.Entity<VwShowCurrentSupplier11052005>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwShowCurrentSupplier11052005");

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.ContNum).HasColumnName("CONT_NUM");

                entity.Property(e => e.Contact)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CONTACT");

                entity.Property(e => e.Counter).HasColumnName("COUNTER");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.Currencycode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Default).HasColumnName("DEFAULT");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Fax)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.Lastpayamount).HasColumnName("LASTPAYAMOUNT");

                entity.Property(e => e.Lastpaydate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTPAYDATE");

                entity.Property(e => e.Openingbal).HasColumnName("openingbal");

                entity.Property(e => e.OverAppliedBalance).HasColumnName("OverAPPLIED_BALANCE");

                entity.Property(e => e.Overapplied).HasColumnName("overapplied");

                entity.Property(e => e.Phone)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Physicaladd)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHYSICALADD");

                entity.Property(e => e.Pinno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PINNO");

                entity.Property(e => e.Printstatement).HasColumnName("PRINTSTATEMENT");

                entity.Property(e => e.SpcatgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_CODE");

                entity.Property(e => e.StatementCurrentbal).HasColumnName("STATEMENT_CURRENTBAL");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_DESC");

                entity.Property(e => e.Terms)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TERMS");

                entity.Property(e => e.TotalPurchases).HasColumnName("TOTAL_PURCHASES");

                entity.Property(e => e.Town)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TOWN");

                entity.Property(e => e.TownCode).HasColumnName("town_code");

                entity.Property(e => e.Unapplied).HasColumnName("unapplied");

                entity.Property(e => e.UnappliedBalance).HasColumnName("UNAPPLIED_BALANCE");

                entity.Property(e => e.Used).HasColumnName("USED");

                entity.Property(e => e.Used2).HasColumnName("USED2");

                entity.Property(e => e.Using).HasColumnName("using");

                entity.Property(e => e.Using2).HasColumnName("using2");

                entity.Property(e => e.Vatno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VATNO");

                entity.Property(e => e.Xblocked).HasColumnName("XBLOCKED");
            });

            modelBuilder.Entity<VwShowNonPbank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwShowNonPBanks");

                entity.Property(e => e.BankAcct)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_acct");

                entity.Property(e => e.BankGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("bank_gl");

                entity.Property(e => e.BankName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("bank_name");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");
            });

            modelBuilder.Entity<VwShowSalesUnbatchedInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwShowSalesUnbatchedInvoices");

                entity.Property(e => e.AdultChild)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("adult_child");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("analysis_code");

                entity.Property(e => e.Bonus).HasColumnName("bonus");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.CostofsalesGl)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COSTOFSALES_GL");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(50)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .HasMaxLength(150)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.DeliveryNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERY_NO");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.DocSalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Doc_SalesGl");

                entity.Property(e => e.Documentnumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTNUMBER");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.Expiry)
                    .HasColumnType("datetime")
                    .HasColumnName("expiry");

                entity.Property(e => e.GlTradeaccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("gl_tradeaccount");

                entity.Property(e => e.Insure).HasColumnName("insure");

                entity.Property(e => e.InvAvgcost).HasColumnName("INV_AVGCOST");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvPhysicalitem).HasColumnName("INV_PHYSICALITEM");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvadjustmentGl)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INVADJUSTMENT_GL");

                entity.Property(e => e.InventoryGl)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inventory_gl");

                entity.Property(e => e.ItemselectionDone).HasColumnName("ITEMSELECTION_DONE");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.ManufC)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("manufC");

                entity.Property(e => e.MiscCharges).HasColumnName("misc_charges");

                entity.Property(e => e.ModuleCode).HasColumnName("Module_Code");

                entity.Property(e => e.Newprice).HasColumnName("NEWPRICE");

                entity.Property(e => e.Newtotalcost).HasColumnName("NEWTOTALCOST");

                entity.Property(e => e.OrdQuantity).HasColumnName("ord_quantity");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("order_num");

                entity.Property(e => e.PreGrn).HasColumnName("Pre_GRN");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.QtyLeft).HasColumnName("Qty_Left");

                entity.Property(e => e.QtyOrdered).HasColumnName("QTY_ORDERED");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SALEINV_DATE");

                entity.Property(e => e.SaleinvDetNum).HasColumnName("SALEINV_DET_NUM");

                entity.Property(e => e.SaleinvNet).HasColumnName("SALEINV_NET");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");

                entity.Property(e => e.SoDetNum).HasColumnName("SO_DET_NUM");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.TaxAmt).HasColumnName("TAX_AMT");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TradeDiscount).HasColumnName("trade_discount");

                entity.Property(e => e.TransSalesGl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Trans_SalesGl");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time");

                entity.Property(e => e.TranspCharge).HasColumnName("transp_charge");

                entity.Property(e => e.TransportVat).HasColumnName("transport_vat");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<VwStockBalanceInquiry>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwStockBalanceInquiry");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("inv_code");
            });

            modelBuilder.Entity<VwStockBalanceInquirydate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwStockBalanceInquirydate");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");
            });

            modelBuilder.Entity<VwStockReorder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwStockReorders");

                entity.Property(e => e.Avgsales).HasColumnName("avgsales");

                entity.Property(e => e.Companyname)
                    .HasMaxLength(203)
                    .IsUnicode(false)
                    .HasColumnName("COMPANYNAME");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.H).HasColumnName("h");

                entity.Property(e => e.InvAvgcost).HasColumnName("INV_AVGCOST");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvInstockqty).HasColumnName("INV_INSTOCKQTY");

                entity.Property(e => e.InvLastunitcost).HasColumnName("INV_LASTUNITCOST");

                entity.Property(e => e.InvMinqty).HasColumnName("INV_MINQTY");

                entity.Property(e => e.InvReorderqty).HasColumnName("INV_REORDERQTY");

                entity.Property(e => e.InvStrength)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.Lastprice).HasColumnName("lastprice");

                entity.Property(e => e.Manufname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MANUFNAME");

                entity.Property(e => e.Reoqty).HasColumnName("reoqty");

                entity.Property(e => e.Spcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("spcode");

                entity.Property(e => e.Suppliername)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("suppliername");
            });

            modelBuilder.Entity<VwStockReordersMovement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwStockReorders_Movement");

                entity.Property(e => e.Stockcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("stockcode");

                entity.Property(e => e.Stockqty).HasColumnName("stockqty");
            });

            modelBuilder.Entity<VwStockReordersMovementold>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwStockReorders_Movementold");

                entity.Property(e => e.Stockcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("stockcode");

                entity.Property(e => e.Stockqty).HasColumnName("stockqty");
            });

            modelBuilder.Entity<VwStockReordersold>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwStockReordersold");

                entity.Property(e => e.Companyname)
                    .HasMaxLength(203)
                    .IsUnicode(false)
                    .HasColumnName("COMPANYNAME");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.H).HasColumnName("h");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvInstockqty).HasColumnName("INV_INSTOCKQTY");

                entity.Property(e => e.InvMinqty).HasColumnName("INV_MINQTY");

                entity.Property(e => e.InvReorderqty).HasColumnName("INV_REORDERQTY");

                entity.Property(e => e.InvStrength)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvUnit)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.Lastprice).HasColumnName("lastprice");

                entity.Property(e => e.Reoqty).HasColumnName("reoqty");

                entity.Property(e => e.Spcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("spcode");

                entity.Property(e => e.Suppliername)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("suppliername");
            });

            modelBuilder.Entity<VwSuppAgeingCreditsBalanceMonthBasis>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppAgeing_CreditsBalance_MonthBasis");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SINV_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Supp_CODE");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwSuppAgeingDebitsMatched>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppAgeing_DebitsMatched");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.SourceDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwSuppAgeingDebitsMatched21102004>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppAgeing_DebitsMatched21102004");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.SourceDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwSuppAgeingDebitsMatchedTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppAgeing_DebitsMatchedTotals");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.SourceDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwSuppAgeingPeriodBasisDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppAgeing_PeriodBasisDetails");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SINV_DATE");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Supp_CODE");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(17)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwSuppAgeingSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppAgeingSummary");

                entity.Property(e => e.Curend)
                    .HasColumnType("datetime")
                    .HasColumnName("CUREND");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwSuppAgeingSummary1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppAgeingSummary1");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");
            });

            modelBuilder.Entity<VwSuppAgeingSummary2008>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppAgeingSummary2008");

                entity.Property(e => e.Curend)
                    .HasColumnType("datetime")
                    .HasColumnName("CUREND");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwSuppAgeingSummary21102004>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppAgeingSummary21102004");

                entity.Property(e => e.Curend)
                    .HasColumnType("datetime")
                    .HasColumnName("CUREND");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwSuppAgeingSummaryCredit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppAgeingSummary_Credits");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwSuppAgeingSummaryCredits1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppAgeingSummary_Credits1");

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");
            });

            modelBuilder.Entity<VwSuppAgeingSummaryDeb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppAgeingSummaryDeb");

                entity.Property(e => e.Curend)
                    .HasColumnType("datetime")
                    .HasColumnName("CUREND");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwSuppAgeingSummaryDebit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppAgeingSummary_Debits");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");
            });

            modelBuilder.Entity<VwSuppAgeingSummaryDebits1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppAgeingSummary_Debits1");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");
            });

            modelBuilder.Entity<VwSuppAgeingUnallocatedDebit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppAgeing_UnallocatedDebits");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.DocRef)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SourceDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwSuppAgeingUnallocatedDebitsTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppAgeing_UnallocatedDebits_Test");

                entity.Property(e => e.Bal).HasColumnName("BAL");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.DocRef)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SourceDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwSuppBroughtForward>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppBroughtForward");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");
            });

            modelBuilder.Entity<VwSuppCreditsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppCreditsList");

                entity.Property(e => e.DocReference)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SINV_date");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwSuppStatementDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppStatementDetails");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.TransDate).HasColumnType("datetime");

                entity.Property(e => e.TransDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransType)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwSuppStatementDetailsOpenitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppStatementDetails_OPENITEM");

                entity.Property(e => e.Docbal).HasColumnName("docbal");

                entity.Property(e => e.Docnum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docnum");

                entity.Property(e => e.Doctype)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("doctype");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransType)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwSuppStatementDetailsOpenitem21102004>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppStatementDetails_OPENITEM21102004");

                entity.Property(e => e.Docbal).HasColumnName("docbal");

                entity.Property(e => e.Docnum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docnum");

                entity.Property(e => e.Doctype)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("doctype");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransType)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwSuppStatementDetailsRunbal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppStatementDetails_RUNBAL");

                entity.Property(e => e.Display).HasColumnName("display");

                entity.Property(e => e.Docbal).HasColumnName("docbal");

                entity.Property(e => e.Docnum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docnum");

                entity.Property(e => e.Doctype)
                    .IsRequired()
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("doctype");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransType)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwSuppStatementOpeningRunbal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppStatementOpening_RUNBAL");

                entity.Property(e => e.Display).HasColumnName("display");

                entity.Property(e => e.Docbal).HasColumnName("docbal");

                entity.Property(e => e.Docnum)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("docnum");

                entity.Property(e => e.Doctype)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("doctype");

                entity.Property(e => e.ExchRate).HasColumnName("exch_rate");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.TargetDocType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TransDesc)
                    .IsRequired()
                    .HasMaxLength(23)
                    .IsUnicode(false);

                entity.Property(e => e.TransNo)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TransType)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwSuppStatementTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppStatementTotals");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Onetwenty).HasColumnName("onetwenty");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Uptothirty).HasColumnName("uptothirty");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwSuppStatementTotals2008>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSuppStatementTotals2008");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Onetwenty).HasColumnName("onetwenty");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Uptothirty).HasColumnName("uptothirty");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwSupplierAgeAnalysisXtal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSupplierAgeAnalysis_Xtal");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Onetwenty).HasColumnName("onetwenty");

                entity.Property(e => e.Pdcheques).HasColumnName("PDCHEQUES");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SpcatgCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_CODE");

                entity.Property(e => e.SpcatgName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_NAME");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_DESC");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Uptothirty).HasColumnName("uptothirty");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwSupplierAgeAnalysisXtal11052005>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSupplierAgeAnalysis_Xtal11052005");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Onetwenty).HasColumnName("onetwenty");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SpcatgCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_CODE");

                entity.Property(e => e.SpcatgName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_NAME");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_DESC");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Uptothirty).HasColumnName("uptothirty");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwSupplierAgeAnalysisXtal2008>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSupplierAgeAnalysis_Xtal2008");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.Creditlimit).HasColumnName("CREDITLIMIT");

                entity.Property(e => e.Ninetydays).HasColumnName("ninetydays");

                entity.Property(e => e.Onetwenty).HasColumnName("onetwenty");

                entity.Property(e => e.Pdcheques).HasColumnName("PDCHEQUES");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SpcatgCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_CODE");

                entity.Property(e => e.SpcatgName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SPCATG_NAME");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.SuppDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_DESC");

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Uptothirty).HasColumnName("uptothirty");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwUnbatchedInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwUnbatchedInvoices");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SALEINV_DATE");

                entity.Property(e => e.SaleinvNet).HasColumnName("SALEINV_NET");

                entity.Property(e => e.SaleinvNum).HasColumnName("SALEINV_NUM");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("saleinv_number");
            });

            modelBuilder.Entity<VwUnmatchedCustomerPayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwUnmatchedCustomerPayments");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");
            });

            modelBuilder.Entity<VwUnmatchedSupplierPayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwUnmatchedSupplierPayments");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");
            });

            modelBuilder.Entity<VwUserRightsAvailable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwUserRights_Available");

                entity.Property(e => e.Area)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AREA");

                entity.Property(e => e.Modul)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MODUL_");

                entity.Property(e => e.ModuleCode)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MODULE_CODE");
            });

            modelBuilder.Entity<VwValidCustomerStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwValidCustomerStatements");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");
            });

            modelBuilder.Entity<VwValidSupplierStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwValidSupplierStatements");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");
            });

            modelBuilder.Entity<VwValidXtalCustomerStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwValidXTalCustomerStatements");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");
            });

            modelBuilder.Entity<VwValidXtalSupplierStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwValidXTalSupplierStatements");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");
            });

            modelBuilder.Entity<Vwac1973>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VWAC1973");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Saleinv_number");

                entity.Property(e => e.SourceDocType)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TargetDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Vwact1973>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VWACT1973");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.SaleinvNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Saleinv_number");

                entity.Property(e => e.TargetDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Vwactivestock>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VWACTIVESTOCK");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvInstockqty).HasColumnName("inv_instockqty");
            });

            modelBuilder.Entity<VwageingdetailsExrate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwageingdetails_exrate");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Curend)
                    .HasColumnType("datetime")
                    .HasColumnName("CUREND");

                entity.Property(e => e.Curstart)
                    .HasColumnType("datetime")
                    .HasColumnName("CURSTART");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Exrate).HasColumnName("exrate");

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.Ninetyend)
                    .HasColumnType("datetime")
                    .HasColumnName("NINETYEND");

                entity.Property(e => e.Ninetystart)
                    .HasColumnType("datetime")
                    .HasColumnName("NINETYSTART");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.Sixtyend)
                    .HasColumnType("datetime")
                    .HasColumnName("SIXTYEND");

                entity.Property(e => e.Sixtystart)
                    .HasColumnType("datetime")
                    .HasColumnName("SIXTYSTART");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.Thirtyend)
                    .HasColumnType("datetime")
                    .HasColumnName("THIRTYEND");

                entity.Property(e => e.Thirtystart)
                    .HasColumnType("datetime")
                    .HasColumnName("THIRTYSTART");

                entity.Property(e => e.TransDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwageingdetailssuppExrate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwageingdetailssupp_exrate");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Curend)
                    .HasColumnType("datetime")
                    .HasColumnName("CUREND");

                entity.Property(e => e.DocNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DocRef)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Exrate).HasColumnName("exrate");

                entity.Property(e => e.Ninety).HasColumnName("ninety");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");

                entity.Property(e => e.Sixtydays).HasColumnName("sixtydays");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.TargetDocType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Thirtydays).HasColumnName("thirtydays");

                entity.Property(e => e.TransDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<Vwast1973>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VWAST1973");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.SourceDocType)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Vwbanktransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwbanktransactions");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BANK_ACCT");

                entity.Property(e => e.Credamt).HasColumnName("credamt");

                entity.Property(e => e.Debamt).HasColumnName("debamt");

                entity.Property(e => e.Docdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DOCDATE");
            });

            modelBuilder.Entity<Vwcdoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwcdocs");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Docamount).HasColumnName("docamount");

                entity.Property(e => e.SaleinvDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleinv_date");
            });

            modelBuilder.Entity<Vwcustomerledger>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VWCUSTOMERLEDGER");

                entity.Property(e => e.Address)
                    .HasMaxLength(150)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Batched).HasColumnName("BATCHED");

                entity.Property(e => e.Creditamount).HasColumnName("CREDITAMOUNT");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CusDesc)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("CUS_DESC");

                entity.Property(e => e.Dcn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DCN");

                entity.Property(e => e.Debitamount).HasColumnName("DEBITAMOUNT");

                entity.Property(e => e.Outstanding).HasColumnName("OUTSTANDING");

                entity.Property(e => e.Phone)
                    .HasMaxLength(150)
                    .HasColumnName("PHONE");

                entity.Property(e => e.Town)
                    .HasMaxLength(150)
                    .HasColumnName("TOWN");

                entity.Property(e => e.Transdate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSDATE");

                entity.Property(e => e.Transdesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSDESC");

                entity.Property(e => e.Transno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSNO");

                entity.Property(e => e.Transtype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TRANSTYPE");
            });

            modelBuilder.Entity<Vwdaytransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwdaytransactions");

                entity.Property(e => e.Credamt).HasColumnName("credamt");

                entity.Property(e => e.Debamt).HasColumnName("debamt");

                entity.Property(e => e.Docdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DOCDATE");

                entity.Property(e => e.Doctype)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("doctype");

                entity.Property(e => e.Posn).HasColumnName("POSN");
            });

            modelBuilder.Entity<Vwgldoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwgldocs");

                entity.Property(e => e.Cfromacc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CFROMACC");

                entity.Property(e => e.Cfromname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CFROMNAME");

                entity.Property(e => e.Cusname)
                    .HasMaxLength(305)
                    .HasColumnName("CUSNAME");

                entity.Property(e => e.Docnum).HasColumnName("DOCNUM");

                entity.Property(e => e.Docnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCNUMBER");

                entity.Property(e => e.Doctype)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("DOCTYPE");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCE");

                entity.Property(e => e.Scode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SCODE");

                entity.Property(e => e.Whichamt).HasColumnName("WHICHAMT");

                entity.Property(e => e.Whichcode).HasColumnName("WHICHCODE");
            });

            modelBuilder.Entity<VwgldocsBook>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwgldocsBOOKS");

                entity.Property(e => e.Cusname)
                    .HasMaxLength(200)
                    .HasColumnName("CUSNAME");

                entity.Property(e => e.Docnum).HasColumnName("DOCNUM");

                entity.Property(e => e.Docnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCNUMBER");

                entity.Property(e => e.Doctype)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("DOCTYPE");

                entity.Property(e => e.Getpay).HasColumnName("GETPAY");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCE");

                entity.Property(e => e.Scode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SCODE");
            });

            modelBuilder.Entity<VwgldocsRep>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwgldocsREP");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Cfromacc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CFROMACC");

                entity.Property(e => e.Cfromname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CFROMNAME");

                entity.Property(e => e.Cusname)
                    .HasMaxLength(305)
                    .HasColumnName("CUSNAME");

                entity.Property(e => e.Docnum).HasColumnName("DOCNUM");

                entity.Property(e => e.Docnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOCNUMBER");

                entity.Property(e => e.Doctype)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("DOCTYPE");

                entity.Property(e => e.ModuleCode).HasColumnName("MODULE_CODE");

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCE");

                entity.Property(e => e.Scode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SCODE");

                entity.Property(e => e.Whichamt).HasColumnName("WHICHAMT");

                entity.Property(e => e.Whichcode).HasColumnName("WHICHCODE");
            });

            modelBuilder.Entity<Vwgrn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwgrn");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.GrnDetNum).HasColumnName("GRN_DET_NUM");

                entity.Property(e => e.GrnNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GRN_number");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.Partbalance)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partbalance");

                entity.Property(e => e.Partreturned)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partreturned");

                entity.Property(e => e.Parttaken)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("parttaken");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .IsFixedLength(true);

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("unit");
            });

            modelBuilder.Entity<Vwlpotransferpart>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwlpotransferpart");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.CusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cus_code");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvStrength)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("inv_strength");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Partbakshishi).HasColumnName("partbakshishi");

                entity.Property(e => e.Partbalance)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partbalance");

                entity.Property(e => e.Partreturned)
                    .HasMaxLength(62)
                    .IsUnicode(false)
                    .HasColumnName("partreturned");

                entity.Property(e => e.Parttaken).HasColumnName("parttaken");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .IsFixedLength(true);

                entity.Property(e => e.PorderinDetNum).HasColumnName("PORDERIN_DET_NUM");

                entity.Property(e => e.PorderinNum).HasColumnName("PORDERIN_NUM");

                entity.Property(e => e.PorderinNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PORDERIN_NUMBER");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Returned).HasColumnName("returned");

                entity.Property(e => e.Sbcode).HasColumnName("sbcode");

                entity.Property(e => e.SoDetNum).HasColumnName("so_det_num");

                entity.Property(e => e.Taken).HasColumnName("taken");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("tax_code");

                entity.Property(e => e.Unit).HasColumnName("unit");
            });

            modelBuilder.Entity<Vwpurchasesanalysis>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwpurchasesanalysis");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Bonus).HasColumnName("bonus");

                entity.Property(e => e.CusClass)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Discount).HasColumnName("DISCOUNT");

                entity.Property(e => e.Docref)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docref");

                entity.Property(e => e.Goodsamt).HasColumnName("GOODSAMT");

                entity.Property(e => e.Grosssamt).HasColumnName("GROSSSAMT");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_NO");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Partquantity).HasColumnName("partquantity");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.Suppcat)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("suppcat");

                entity.Property(e => e.TaxCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.TheDocname)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("theDocname");

                entity.Property(e => e.ThemoduleCode).HasColumnName("themodule_code");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");

                entity.Property(e => e.Vat).HasColumnName("VAT");
            });

            modelBuilder.Entity<Vwpurchasesanalysiscentral>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwpurchasesanalysiscentral");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Bonus).HasColumnName("bonus");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Discount).HasColumnName("DISCOUNT");

                entity.Property(e => e.Docref)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docref");

                entity.Property(e => e.Goodsamt).HasColumnName("GOODSAMT");

                entity.Property(e => e.Grosssamt).HasColumnName("GROSSSAMT");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_NO");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.SuppCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");

                entity.Property(e => e.TaxCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");

                entity.Property(e => e.Vat).HasColumnName("VAT");
            });

            modelBuilder.Entity<Vwsalesanalysis>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwsalesanalysis");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Bcode).HasColumnName("BCODE");

                entity.Property(e => e.Bonus).HasColumnName("bonus");

                entity.Property(e => e.CusClass)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CustomerRefence)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Discount).HasColumnName("DISCOUNT");

                entity.Property(e => e.Goodsamt).HasColumnName("GOODSAMT");

                entity.Property(e => e.Goodscost).HasColumnName("GOODSCOST");

                entity.Property(e => e.Goodtimes).HasColumnName("goodtimes");

                entity.Property(e => e.Grosssamt).HasColumnName("GROSSSAMT");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_NO");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Name).HasMaxLength(351);

                entity.Property(e => e.Partquantity).HasColumnName("partquantity");

                entity.Property(e => e.Paymode)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("paymode");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Salesmancode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("salesmancode");

                entity.Property(e => e.TaxCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.TheDocname)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("theDocname");

                entity.Property(e => e.ThemoduleCode).HasColumnName("themodule_code");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");

                entity.Property(e => e.Username)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Vat).HasColumnName("VAT");
            });

            modelBuilder.Entity<Vwsalesanalysiscentral>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwsalesanalysiscentral");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Bonus).HasColumnName("bonus");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CUS_CODE");

                entity.Property(e => e.CustomerRefence)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Discount).HasColumnName("DISCOUNT");

                entity.Property(e => e.Goodsamt).HasColumnName("GOODSAMT");

                entity.Property(e => e.Grosssamt).HasColumnName("GROSSSAMT");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE_NO");

                entity.Property(e => e.Itemname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ITEMNAME");

                entity.Property(e => e.Name).HasMaxLength(351);

                entity.Property(e => e.Paymode)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("paymode");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Salesmancode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("salesmancode");

                entity.Property(e => e.TaxCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.TransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANS_DATE");

                entity.Property(e => e.Username)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Vat).HasColumnName("VAT");
            });

            modelBuilder.Entity<Vwstocksanalysis>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwstocksanalysis");

                entity.Property(e => e.Area).HasMaxLength(200);

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bcode).HasColumnName("bcode");

                entity.Property(e => e.Bonus).HasColumnName("bonus");

                entity.Property(e => e.Docname)
                    .IsRequired()
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("docname");

                entity.Property(e => e.Docnumber)
                    .HasMaxLength(100)
                    .HasColumnName("docnumber");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.ModuleCode).HasColumnName("Module_Code");

                entity.Property(e => e.Partquantity).HasColumnName("PARTQUANTITY");

                entity.Property(e => e.QtyIn).HasColumnName("QTY_IN");

                entity.Property(e => e.QtyOut).HasColumnName("QTY_OUT");

                entity.Property(e => e.Searchcode).HasColumnName("searchcode");

                entity.Property(e => e.Sortord).HasColumnName("SORTORD");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransNo).HasColumnName("Trans_No");

                entity.Property(e => e.Transdate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSDATE");
            });

            modelBuilder.Entity<VwstocksanalysisToday>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwstocksanalysis_today");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .HasColumnName("inv_code");

                entity.Property(e => e.Stockbalance).HasColumnName("stockbalance");
            });

            modelBuilder.Entity<VwstocksanalysisTodaybatched>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwstocksanalysis_todaybatched");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .HasColumnName("inv_code");

                entity.Property(e => e.Stockbalance).HasColumnName("stockbalance");
            });

            modelBuilder.Entity<VwstocksanalysisTodaybatchedpartwhole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwstocksanalysis_todaybatchedpartwhole");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .HasColumnName("inv_code");

                entity.Property(e => e.Stockbalance).HasColumnName("stockbalance");
            });

            modelBuilder.Entity<VwstocksanalysisTodaypartwhole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwstocksanalysis_todaypartwhole");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .HasColumnName("inv_code");

                entity.Property(e => e.Stockbalance).HasColumnName("stockbalance");
            });

            modelBuilder.Entity<Vwstocksanalysisallbatched>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwstocksanalysisallbatched");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .HasColumnName("inv_code");

                entity.Property(e => e.Stockbalance).HasColumnName("stockbalance");
            });

            modelBuilder.Entity<Vwstocksanalysisbatched>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwstocksanalysisbatched");

                entity.Property(e => e.Area).HasMaxLength(200);

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Docname)
                    .IsRequired()
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("docname");

                entity.Property(e => e.Docnumber)
                    .HasMaxLength(100)
                    .HasColumnName("docnumber");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.ModuleCode).HasColumnName("Module_Code");

                entity.Property(e => e.QtyIn).HasColumnName("QTY_IN");

                entity.Property(e => e.QtyOut).HasColumnName("QTY_OUT");

                entity.Property(e => e.Searchcode).HasColumnName("searchcode");

                entity.Property(e => e.Sortord).HasColumnName("SORTORD");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransNo).HasColumnName("Trans_No");

                entity.Property(e => e.Transdate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSDATE");
            });

            modelBuilder.Entity<Vwstocksanalysispartwhole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwstocksanalysispartwhole");

                entity.Property(e => e.Area).HasMaxLength(200);

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Docname)
                    .IsRequired()
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("docname");

                entity.Property(e => e.Docnumber)
                    .HasMaxLength(100)
                    .HasColumnName("docnumber");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.ModuleCode).HasColumnName("Module_Code");

                entity.Property(e => e.QtyIn).HasColumnName("QTY_IN");

                entity.Property(e => e.QtyOut).HasColumnName("QTY_OUT");

                entity.Property(e => e.Searchcode).HasColumnName("searchcode");

                entity.Property(e => e.Sortord).HasColumnName("SORTORD");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransNo).HasColumnName("Trans_No");

                entity.Property(e => e.Transdate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSDATE");
            });

            modelBuilder.Entity<Vwstocksanalysisstocktake>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwstocksanalysisstocktake");

                entity.Property(e => e.Area).HasMaxLength(200);

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Docname)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("docname");

                entity.Property(e => e.Docnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docnumber");

                entity.Property(e => e.InvCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.ModuleCode).HasColumnName("Module_Code");

                entity.Property(e => e.QtyIn).HasColumnName("QTY_IN");

                entity.Property(e => e.QtyOut).HasColumnName("QTY_OUT");

                entity.Property(e => e.Searchcode).HasColumnName("searchcode");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.TransNo).HasColumnName("Trans_No");

                entity.Property(e => e.Transdate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSDATE");
            });

            modelBuilder.Entity<Vwsuppbalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VWSUPPBALANCE");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.SuppCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUPP_CODE");
            });

            modelBuilder.Entity<Vwtblsuppageing>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("vwtblsuppageing");

                entity.HasIndex(e => new { e.CusCode, e.SourceDocNum, e.SourceDocType }, "IX_vwtblsuppageing");

                entity.Property(e => e.CusCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Cus_Code");

                entity.Property(e => e.SourceDocType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<Vwtotalpayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VWTOTALPAYMENTS");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Acct");

                entity.Property(e => e.ClearingDate).HasColumnType("datetime");

                entity.Property(e => e.Gcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GCode");

                entity.Property(e => e.PayDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Pay_Date");
            });

            modelBuilder.Entity<Vwtotalpayments11052005>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VWTOTALPAYMENTS11052005");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Acct");

                entity.Property(e => e.ClearingDate).HasColumnType("datetime");

                entity.Property(e => e.Gcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GCode");

                entity.Property(e => e.PayDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Pay_Date");
            });

            modelBuilder.Entity<Vwtotalreceipt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VWTOTALRECEIPTS");

                entity.Property(e => e.Amountpaid).HasColumnName("AMOUNTPAID");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("BANK_ACCT");

                entity.Property(e => e.Clearingdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CLEARINGDATE");

                entity.Property(e => e.Gcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GCode");

                entity.Property(e => e.RptDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RPT_DATE");
            });

            modelBuilder.Entity<Vwtotalreceipts11052005>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VWTOTALRECEIPTS11052005");

                entity.Property(e => e.Amountpaid).HasColumnName("AMOUNTPAID");

                entity.Property(e => e.BankAcct)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("BANK_ACCT");

                entity.Property(e => e.Clearingdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CLEARINGDATE");

                entity.Property(e => e.Gcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GCode");

                entity.Property(e => e.RptDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RPT_DATE");
            });

            modelBuilder.Entity<Warning>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WARNINGS");

                entity.Property(e => e.Warno).HasColumnName("WARNO");

                entity.Property(e => e.Wartext)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("WARTEXT");
            });

            modelBuilder.Entity<Xpareto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("XPARETO");

                entity.HasIndex(e => new { e.Username, e.Itemdesc }, "IX_XPARETO")
                    .IsClustered();

                entity.HasIndex(e => new { e.Salesvalue, e.Username }, "IXsalesvalue");

                entity.HasIndex(e => new { e.Salesqty, e.Username }, "ixsaleqty");

                entity.HasIndex(e => e.Username, "uname");

                entity.Property(e => e.Avgcost)
                    .HasColumnName("avgcost")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Avgsalesqty)
                    .HasColumnName("avgsalesqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AvgsalesqtyPw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("avgsalesqtyPW");

                entity.Property(e => e.Cumsalesqtycont)
                    .HasColumnName("cumsalesqtycont")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cumsalesvaluecont)
                    .HasColumnName("cumsalesvaluecont")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inv_code");

                entity.Property(e => e.Itemdesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("itemdesc");

                entity.Property(e => e.Manufname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("manufname");

                entity.Property(e => e.Ordqty)
                    .HasColumnName("ordqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OrdqtyPartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ordqtyPartwhole");

                entity.Property(e => e.OrdqtyPw)
                    .HasColumnName("ordqtyPW")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ordqtyonorder)
                    .HasColumnName("ordqtyonorder")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ordvalue).HasColumnName("ordvalue");

                entity.Property(e => e.Packqty)
                    .HasColumnName("packqty")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Paretofinal)
                    .HasColumnName("paretofinal")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Paretoname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("paretoname")
                    .HasDefaultValueSql("('non 2080')");

                entity.Property(e => e.Paretosalesqty)
                    .HasColumnName("paretosalesqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Paretosalesvalue)
                    .HasColumnName("paretosalesvalue")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Propordqty)
                    .HasColumnName("propordqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Salesqty)
                    .HasColumnName("salesqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SalesqtyPw)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("salesqtyPW");

                entity.Property(e => e.Salesqtycont)
                    .HasColumnName("salesqtycont")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Salesvalue)
                    .HasColumnName("salesvalue")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Salesvaluecont)
                    .HasColumnName("salesvaluecont")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stockbalance)
                    .HasColumnName("stockbalance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stockbalancepw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stockbalancepw")
                    .HasDefaultValueSql("('0W0P')");

                entity.Property(e => e.Stockdepth)
                    .HasColumnName("stockdepth")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Threemsalesqty)
                    .HasColumnName("threemsalesqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Threemsalesvalue)
                    .HasColumnName("threemsalesvalue")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<_259t>(entity =>
            {
                entity.HasKey(e => e.Docdetnum1);

                entity.ToTable("259T");

                entity.HasIndex(e => new { e.BtransNum, e.BtransDetNum, e.Bcode }, "IX_259T");

                entity.Property(e => e.Docdetnum1).HasColumnName("DOCDETNUM");

                entity.Property(e => e.ActiveIngredient)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_INGREDIENT");

                entity.Property(e => e.AdultChild)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("adult_child")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Amounttopay).HasColumnName("AMOUNTTOPAY");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_CODE");

                entity.Property(e => e.Balance).HasColumnName("BALANCE");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BARCODE");

                entity.Property(e => e.BatchNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BATCH_NUM")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.Batched).HasColumnName("batched");

                entity.Property(e => e.Bcode)
                    .HasColumnName("bcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Bcodefrom).HasColumnName("BCODEFROM");

                entity.Property(e => e.Bcodeto).HasColumnName("BCODETO");

                entity.Property(e => e.Blocked)
                    .HasColumnName("BLOCKED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonus)
                    .HasColumnName("bonus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bonusdiscount).HasColumnName("BONUSDISCOUNT");

                entity.Property(e => e.BorderDetNum)
                    .HasColumnName("Border_DET_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHCODE");

                entity.Property(e => e.Branchfrom)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BRANCHFROM");

                entity.Property(e => e.BrinDetNum)
                    .HasColumnName("BRIN_DET_NUM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BtransD).HasColumnName("BTRANS_D");

                entity.Property(e => e.BtransDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BTRANS_DATE");

                entity.Property(e => e.BtransDetNum).HasColumnName("BTRANS_DET_NUM");

                entity.Property(e => e.BtransNet).HasColumnName("BTRANS_NET");

                entity.Property(e => e.BtransNum).HasColumnName("BTRANS_NUM");

                entity.Property(e => e.BtransNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("BTRANS_number");

                entity.Property(e => e.BtransRef)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BTRANS_REF");

                entity.Property(e => e.BtransTotal).HasColumnName("BTRANS_TOTAL");

                entity.Property(e => e.BtransVat).HasColumnName("BTRANS_VAT");

                entity.Property(e => e.CashDiscount)
                    .HasColumnName("cash_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cashsaleinvoice)
                    .HasColumnName("cashsaleinvoice")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CcontNum).HasColumnName("CCONT_NUM");

                entity.Property(e => e.Comments)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.Costofsale)
                    .HasColumnName("costofsale")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Country)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCYCODE");

                entity.Property(e => e.CusRef)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CUS_REF");

                entity.Property(e => e.Deleted)
                    .HasColumnName("DELETED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DeliveryNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DELIVERY_NO");

                entity.Property(e => e.Description)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DetBtransNum).HasColumnName("detBTRANS_NUM");

                entity.Property(e => e.Detbcode)
                    .HasColumnName("detbcode")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DiscountCode).HasColumnName("DISCOUNT_CODE");

                entity.Property(e => e.DocDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DOC_DATE");

                entity.Property(e => e.DocDetnum).HasColumnName("DOC_DETNUM");

                entity.Property(e => e.DocNum).HasColumnName("DOC_NUM");

                entity.Property(e => e.Documentnumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTNUMBER");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.ExchRate)
                    .HasColumnName("EXCH_RATE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Expiry)
                    .HasColumnType("datetime")
                    .HasColumnName("expiry");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.GlTradeaccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GL_TRADEACCOUNT");

                entity.Property(e => e.GpDescription)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("gpDESCRIPTION");

                entity.Property(e => e.InstkNum).HasColumnName("INSTK_NUM");

                entity.Property(e => e.Instkentryno).HasColumnName("INSTKENTRYNO");

                entity.Property(e => e.Insure).HasColumnName("insure");

                entity.Property(e => e.InvAvgcost).HasColumnName("INV_AVGCOST");

                entity.Property(e => e.InvBrandgeneric)
                    .HasColumnName("INV_BRANDGENERIC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_CODE");

                entity.Property(e => e.InvCostprice).HasColumnName("INV_COSTPRICE");

                entity.Property(e => e.InvDescription)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("invDESCRIPTION");

                entity.Property(e => e.InvGroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_GROUPCODE");

                entity.Property(e => e.InvInvCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("invINV_CODE");

                entity.Property(e => e.InvInvStrength)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("invINV_STRENGTH")
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.InvItemcontents)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_ITEMCONTENTS");

                entity.Property(e => e.InvLastunitcost).HasColumnName("INV_LASTUNITCOST");

                entity.Property(e => e.InvLocCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("invLOC_CODE");

                entity.Property(e => e.InvMaxprice).HasColumnName("INV_MAXPRICE");

                entity.Property(e => e.InvMinprice).HasColumnName("INV_MINPRICE");

                entity.Property(e => e.InvNotes)
                    .HasMaxLength(500)
                    .HasColumnName("inv_notes");

                entity.Property(e => e.InvPhysicalitem)
                    .HasColumnName("INV_PHYSICALITEM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvRetailprice).HasColumnName("INV_RETAILPRICE");

                entity.Property(e => e.InvSpecialprice).HasColumnName("INV_SPECIALPRICE");

                entity.Property(e => e.InvStrength)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("INV_STRENGTH");

                entity.Property(e => e.InvSubgroupcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("INV_SUBGROUPCODE");

                entity.Property(e => e.InvTaxCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("invTAX_CODE")
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.InvTradeprice).HasColumnName("INV_TRADEPRICE");

                entity.Property(e => e.InvUnit)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INV_UNIT");

                entity.Property(e => e.InvoiceDiscount)
                    .HasColumnName("invoice_discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemselectionDone).HasColumnName("ITEMSELECTION_DONE");

                entity.Property(e => e.Lastlineno)
                    .HasColumnName("lastlineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LASTUPDATE");

                entity.Property(e => e.LineDisc).HasColumnName("line_disc");

                entity.Property(e => e.Lineimported)
                    .HasColumnName("LINEIMPORTED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.ManufC)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("manufC");

                entity.Property(e => e.ManufacturerCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANUFACTURER_CODE");

                entity.Property(e => e.MiscCharges).HasColumnName("MISC_CHARGES");

                entity.Property(e => e.MnfDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("mnfDESCRIPTION");

                entity.Property(e => e.ModuleCode)
                    .HasColumnName("Module_Code")
                    .HasDefaultValueSql("((4))");

                entity.Property(e => e.Mylineno)
                    .HasColumnName("mylineno")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Newprice).HasColumnName("NEWPRICE");

                entity.Property(e => e.Newtotalcost).HasColumnName("NEWTOTALCOST");

                entity.Property(e => e.Noexpiry)
                    .HasColumnName("noexpiry")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OrdQuantity)
                    .HasColumnName("ord_quantity")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORDER_NUM");

                entity.Property(e => e.PackQty1)
                    .HasColumnName("PACK_QTY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PackageCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGE_CODE");

                entity.Property(e => e.Packqty)
                    .HasColumnName("PACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.Partwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("partwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.PayDue)
                    .HasColumnType("datetime")
                    .HasColumnName("PAY_DUE");

                entity.Property(e => e.Paying).HasColumnName("paying");

                entity.Property(e => e.Period)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD");

                entity.Property(e => e.Posted)
                    .HasColumnName("POSTED")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PreGrn)
                    .IsRequired()
                    .HasColumnName("Pre_GRN")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Price).HasColumnName("PRICE");

                entity.Property(e => e.Printcopy).HasColumnName("PRINTCOPY");

                entity.Property(e => e.ProvisionCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PROVISION_CODE");

                entity.Property(e => e.Pwqty)
                    .HasColumnName("PWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyLeft).HasColumnName("Qty_Left");

                entity.Property(e => e.QtyOrdered).HasColumnName("QTY_ORDERED");

                entity.Property(e => e.QtyOut).HasColumnName("QTY_OUT");

                entity.Property(e => e.Quantity).HasColumnName("QUANTITY");

                entity.Property(e => e.Returned)
                    .HasColumnName("returned")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SalesCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales_Code");

                entity.Property(e => e.Savetime)
                    .HasColumnType("datetime")
                    .HasColumnName("savetime");

                entity.Property(e => e.SbgDescription)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sbgDESCRIPTION");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.StkBcode)
                    .HasColumnName("stkBCODE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StkInvCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("stkINV_CODE");

                entity.Property(e => e.StkModuleCode).HasColumnName("stkMODULE_CODE");

                entity.Property(e => e.StkNum).HasColumnName("STK_NUM");

                entity.Property(e => e.StkPackqty)
                    .HasColumnName("stkPACKQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StkPwqty)
                    .HasColumnName("stkPWQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StkStkNum).HasColumnName("stkSTK_NUM");

                entity.Property(e => e.StkUsername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("stkUSERNAME");

                entity.Property(e => e.Stkentryno).HasColumnName("STKENTRYNO");

                entity.Property(e => e.Stkpartwhole)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("stkpartwhole")
                    .HasDefaultValueSql("('W')")
                    .IsFixedLength(true);

                entity.Property(e => e.Stkref)
                    .HasColumnName("STKREF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stksavetime)
                    .HasColumnType("datetime")
                    .HasColumnName("stksavetime");

                entity.Property(e => e.Taken)
                    .HasColumnName("taken")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxAmt).HasColumnName("TAX_AMT");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TAX_CODE");

                entity.Property(e => e.Totalcost).HasColumnName("TOTALCOST");

                entity.Property(e => e.Totrecs).HasColumnName("TOTRECS");

                entity.Property(e => e.TradeDiscount).HasColumnName("TRADE_DISCOUNT");

                entity.Property(e => e.TransTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Trans_Time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TranspCharge).HasColumnName("transp_charge");

                entity.Property(e => e.TranspCode).HasColumnName("transp_code");

                entity.Property(e => e.TransportVat).HasColumnName("TRANSPORT_VAT");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");

                entity.Property(e => e.UnitQty).HasColumnName("UNIT_QTY");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime");

                entity.Property(e => e.Urgent)
                    .HasColumnName("urgent")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WaybillNum).HasColumnName("waybill_num");

                entity.Property(e => e.XrateBalance)
                    .HasColumnName("xrate_balance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XrateNet)
                    .HasColumnName("xrate_net")
                    .HasDefaultValueSql("((0))");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
